// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemCondition.
const (
	ActionItemTriggerParamsIncidentActionItemConditionALL ActionItemTriggerParamsIncidentActionItemCondition = "ALL"

	ActionItemTriggerParamsIncidentActionItemConditionNONE ActionItemTriggerParamsIncidentActionItemCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionGroup.
const (
	ActionItemTriggerParamsIncidentActionItemConditionGroupANY ActionItemTriggerParamsIncidentActionItemConditionGroup = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionGroupIS ActionItemTriggerParamsIncidentActionItemConditionGroup = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionGroupNONE ActionItemTriggerParamsIncidentActionItemConditionGroup = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionGroupSET ActionItemTriggerParamsIncidentActionItemConditionGroup = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionGroupUNSET ActionItemTriggerParamsIncidentActionItemConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionKind.
const (
	ActionItemTriggerParamsIncidentActionItemConditionKindANY ActionItemTriggerParamsIncidentActionItemConditionKind = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionKindIS ActionItemTriggerParamsIncidentActionItemConditionKind = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionKindNONE ActionItemTriggerParamsIncidentActionItemConditionKind = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionKindSET ActionItemTriggerParamsIncidentActionItemConditionKind = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionKindUNSET ActionItemTriggerParamsIncidentActionItemConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionPriority.
const (
	ActionItemTriggerParamsIncidentActionItemConditionPriorityANY ActionItemTriggerParamsIncidentActionItemConditionPriority = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityIS ActionItemTriggerParamsIncidentActionItemConditionPriority = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityNONE ActionItemTriggerParamsIncidentActionItemConditionPriority = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionPrioritySET ActionItemTriggerParamsIncidentActionItemConditionPriority = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityUNSET ActionItemTriggerParamsIncidentActionItemConditionPriority = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionStatus.
const (
	ActionItemTriggerParamsIncidentActionItemConditionStatusANY ActionItemTriggerParamsIncidentActionItemConditionStatus = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionStatusIS ActionItemTriggerParamsIncidentActionItemConditionStatus = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionStatusNONE ActionItemTriggerParamsIncidentActionItemConditionStatus = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionStatusSET ActionItemTriggerParamsIncidentActionItemConditionStatus = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionStatusUNSET ActionItemTriggerParamsIncidentActionItemConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemKinds.
const (
	ActionItemTriggerParamsIncidentActionItemKindsFollowUp ActionItemTriggerParamsIncidentActionItemKinds = "follow_up"

	ActionItemTriggerParamsIncidentActionItemKindsTask ActionItemTriggerParamsIncidentActionItemKinds = "task"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemPriorities.
const (
	ActionItemTriggerParamsIncidentActionItemPrioritiesHigh ActionItemTriggerParamsIncidentActionItemPriorities = "high"

	ActionItemTriggerParamsIncidentActionItemPrioritiesLow ActionItemTriggerParamsIncidentActionItemPriorities = "low"

	ActionItemTriggerParamsIncidentActionItemPrioritiesMedium ActionItemTriggerParamsIncidentActionItemPriorities = "medium"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemStatuses.
const (
	ActionItemTriggerParamsIncidentActionItemStatusesCancelled ActionItemTriggerParamsIncidentActionItemStatuses = "cancelled"

	ActionItemTriggerParamsIncidentActionItemStatusesDone ActionItemTriggerParamsIncidentActionItemStatuses = "done"

	ActionItemTriggerParamsIncidentActionItemStatusesInProgress ActionItemTriggerParamsIncidentActionItemStatuses = "in_progress"

	ActionItemTriggerParamsIncidentActionItemStatusesOpen ActionItemTriggerParamsIncidentActionItemStatuses = "open"
)

// Defines values for ActionItemTriggerParamsIncidentCondition.
const (
	ActionItemTriggerParamsIncidentConditionALL ActionItemTriggerParamsIncidentCondition = "ALL"

	ActionItemTriggerParamsIncidentConditionNONE ActionItemTriggerParamsIncidentCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentConditionEnvironment.
const (
	ActionItemTriggerParamsIncidentConditionEnvironmentANY ActionItemTriggerParamsIncidentConditionEnvironment = "ANY"

	ActionItemTriggerParamsIncidentConditionEnvironmentIS ActionItemTriggerParamsIncidentConditionEnvironment = "IS"

	ActionItemTriggerParamsIncidentConditionEnvironmentNONE ActionItemTriggerParamsIncidentConditionEnvironment = "NONE"

	ActionItemTriggerParamsIncidentConditionEnvironmentSET ActionItemTriggerParamsIncidentConditionEnvironment = "SET"

	ActionItemTriggerParamsIncidentConditionEnvironmentUNSET ActionItemTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionFunctionality.
const (
	ActionItemTriggerParamsIncidentConditionFunctionalityANY ActionItemTriggerParamsIncidentConditionFunctionality = "ANY"

	ActionItemTriggerParamsIncidentConditionFunctionalityIS ActionItemTriggerParamsIncidentConditionFunctionality = "IS"

	ActionItemTriggerParamsIncidentConditionFunctionalityNONE ActionItemTriggerParamsIncidentConditionFunctionality = "NONE"

	ActionItemTriggerParamsIncidentConditionFunctionalitySET ActionItemTriggerParamsIncidentConditionFunctionality = "SET"

	ActionItemTriggerParamsIncidentConditionFunctionalityUNSET ActionItemTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionGroup.
const (
	ActionItemTriggerParamsIncidentConditionGroupANY ActionItemTriggerParamsIncidentConditionGroup = "ANY"

	ActionItemTriggerParamsIncidentConditionGroupIS ActionItemTriggerParamsIncidentConditionGroup = "IS"

	ActionItemTriggerParamsIncidentConditionGroupNONE ActionItemTriggerParamsIncidentConditionGroup = "NONE"

	ActionItemTriggerParamsIncidentConditionGroupSET ActionItemTriggerParamsIncidentConditionGroup = "SET"

	ActionItemTriggerParamsIncidentConditionGroupUNSET ActionItemTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentType.
const (
	ActionItemTriggerParamsIncidentConditionIncidentTypeANY ActionItemTriggerParamsIncidentConditionIncidentType = "ANY"

	ActionItemTriggerParamsIncidentConditionIncidentTypeIS ActionItemTriggerParamsIncidentConditionIncidentType = "IS"

	ActionItemTriggerParamsIncidentConditionIncidentTypeNONE ActionItemTriggerParamsIncidentConditionIncidentType = "NONE"

	ActionItemTriggerParamsIncidentConditionIncidentTypeSET ActionItemTriggerParamsIncidentConditionIncidentType = "SET"

	ActionItemTriggerParamsIncidentConditionIncidentTypeUNSET ActionItemTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionKind.
const (
	ActionItemTriggerParamsIncidentConditionKindANY ActionItemTriggerParamsIncidentConditionKind = "ANY"

	ActionItemTriggerParamsIncidentConditionKindIS ActionItemTriggerParamsIncidentConditionKind = "IS"

	ActionItemTriggerParamsIncidentConditionKindNONE ActionItemTriggerParamsIncidentConditionKind = "NONE"

	ActionItemTriggerParamsIncidentConditionKindSET ActionItemTriggerParamsIncidentConditionKind = "SET"

	ActionItemTriggerParamsIncidentConditionKindUNSET ActionItemTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionService.
const (
	ActionItemTriggerParamsIncidentConditionServiceANY ActionItemTriggerParamsIncidentConditionService = "ANY"

	ActionItemTriggerParamsIncidentConditionServiceIS ActionItemTriggerParamsIncidentConditionService = "IS"

	ActionItemTriggerParamsIncidentConditionServiceNONE ActionItemTriggerParamsIncidentConditionService = "NONE"

	ActionItemTriggerParamsIncidentConditionServiceSET ActionItemTriggerParamsIncidentConditionService = "SET"

	ActionItemTriggerParamsIncidentConditionServiceUNSET ActionItemTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionSeverity.
const (
	ActionItemTriggerParamsIncidentConditionSeverityANY ActionItemTriggerParamsIncidentConditionSeverity = "ANY"

	ActionItemTriggerParamsIncidentConditionSeverityIS ActionItemTriggerParamsIncidentConditionSeverity = "IS"

	ActionItemTriggerParamsIncidentConditionSeverityNONE ActionItemTriggerParamsIncidentConditionSeverity = "NONE"

	ActionItemTriggerParamsIncidentConditionSeveritySET ActionItemTriggerParamsIncidentConditionSeverity = "SET"

	ActionItemTriggerParamsIncidentConditionSeverityUNSET ActionItemTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionStatus.
const (
	ActionItemTriggerParamsIncidentConditionStatusANY ActionItemTriggerParamsIncidentConditionStatus = "ANY"

	ActionItemTriggerParamsIncidentConditionStatusIS ActionItemTriggerParamsIncidentConditionStatus = "IS"

	ActionItemTriggerParamsIncidentConditionStatusNONE ActionItemTriggerParamsIncidentConditionStatus = "NONE"

	ActionItemTriggerParamsIncidentConditionStatusSET ActionItemTriggerParamsIncidentConditionStatus = "SET"

	ActionItemTriggerParamsIncidentConditionStatusUNSET ActionItemTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionVisibility.
const (
	ActionItemTriggerParamsIncidentConditionVisibilityANY ActionItemTriggerParamsIncidentConditionVisibility = "ANY"

	ActionItemTriggerParamsIncidentConditionVisibilityIS ActionItemTriggerParamsIncidentConditionVisibility = "IS"

	ActionItemTriggerParamsIncidentConditionVisibilityNONE ActionItemTriggerParamsIncidentConditionVisibility = "NONE"

	ActionItemTriggerParamsIncidentConditionVisibilitySET ActionItemTriggerParamsIncidentConditionVisibility = "SET"

	ActionItemTriggerParamsIncidentConditionVisibilityUNSET ActionItemTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentKinds.
const (
	ActionItemTriggerParamsIncidentKindsExample ActionItemTriggerParamsIncidentKinds = "example"

	ActionItemTriggerParamsIncidentKindsNormal ActionItemTriggerParamsIncidentKinds = "normal"

	ActionItemTriggerParamsIncidentKindsScheduled ActionItemTriggerParamsIncidentKinds = "scheduled"

	ActionItemTriggerParamsIncidentKindsTest ActionItemTriggerParamsIncidentKinds = "test"
)

// Defines values for ActionItemTriggerParamsIncidentStatuses.
const (
	ActionItemTriggerParamsIncidentStatusesAcknowledged ActionItemTriggerParamsIncidentStatuses = "acknowledged"

	ActionItemTriggerParamsIncidentStatusesCancelled ActionItemTriggerParamsIncidentStatuses = "cancelled"

	ActionItemTriggerParamsIncidentStatusesCompleted ActionItemTriggerParamsIncidentStatuses = "completed"

	ActionItemTriggerParamsIncidentStatusesDetected ActionItemTriggerParamsIncidentStatuses = "detected"

	ActionItemTriggerParamsIncidentStatusesInProgress ActionItemTriggerParamsIncidentStatuses = "in_progress"

	ActionItemTriggerParamsIncidentStatusesMitigated ActionItemTriggerParamsIncidentStatuses = "mitigated"

	ActionItemTriggerParamsIncidentStatusesResolved ActionItemTriggerParamsIncidentStatuses = "resolved"

	ActionItemTriggerParamsIncidentStatusesScheduled ActionItemTriggerParamsIncidentStatuses = "scheduled"

	ActionItemTriggerParamsIncidentStatusesStarted ActionItemTriggerParamsIncidentStatuses = "started"
)

// Defines values for ActionItemTriggerParamsTriggerType.
const (
	ActionItemTriggerParamsTriggerTypeActionItem ActionItemTriggerParamsTriggerType = "action_item"
)

// Defines values for ActionItemTriggerParamsTriggers.
const (
	ActionItemTriggerParamsTriggersActionItemCreated ActionItemTriggerParamsTriggers = "action_item_created"

	ActionItemTriggerParamsTriggersActionItemUpdated ActionItemTriggerParamsTriggers = "action_item_updated"

	ActionItemTriggerParamsTriggersAssignedUserUpdated ActionItemTriggerParamsTriggers = "assigned_user_updated"

	ActionItemTriggerParamsTriggersDescriptionUpdated ActionItemTriggerParamsTriggers = "description_updated"

	ActionItemTriggerParamsTriggersPriorityUpdated ActionItemTriggerParamsTriggers = "priority_updated"

	ActionItemTriggerParamsTriggersSlackCommand ActionItemTriggerParamsTriggers = "slack_command"

	ActionItemTriggerParamsTriggersStatusUpdated ActionItemTriggerParamsTriggers = "status_updated"

	ActionItemTriggerParamsTriggersSummaryUpdated ActionItemTriggerParamsTriggers = "summary_updated"

	ActionItemTriggerParamsTriggersTeamsUpdated ActionItemTriggerParamsTriggers = "teams_updated"
)

// Defines values for AddActionItemTaskParamsPriority.
const (
	AddActionItemTaskParamsPriorityHigh AddActionItemTaskParamsPriority = "high"

	AddActionItemTaskParamsPriorityLow AddActionItemTaskParamsPriority = "low"

	AddActionItemTaskParamsPriorityMedium AddActionItemTaskParamsPriority = "medium"
)

// Defines values for AddActionItemTaskParamsStatus.
const (
	AddActionItemTaskParamsStatusCancelled AddActionItemTaskParamsStatus = "cancelled"

	AddActionItemTaskParamsStatusDone AddActionItemTaskParamsStatus = "done"

	AddActionItemTaskParamsStatusInProgress AddActionItemTaskParamsStatus = "in_progress"

	AddActionItemTaskParamsStatusOpen AddActionItemTaskParamsStatus = "open"
)

// Defines values for AddActionItemTaskParamsTaskType.
const (
	AddActionItemTaskParamsTaskTypeAddActionItem AddActionItemTaskParamsTaskType = "add_action_item"
)

// Defines values for AddRoleTaskParamsTaskType.
const (
	AddRoleTaskParamsTaskTypeAddRole AddRoleTaskParamsTaskType = "add_role"
)

// Defines values for AddTeamTaskParamsTaskType.
const (
	AddTeamTaskParamsTaskTypeAddTeam AddTeamTaskParamsTaskType = "add_team"
)

// Defines values for AddToTimelineTaskParamsTaskType.
const (
	AddToTimelineTaskParamsTaskTypeAddToTimeline AddToTimelineTaskParamsTaskType = "add_to_timeline"
)

// Defines values for AlertSource.
const (
	AlertSourceAsana AlertSource = "asana"

	AlertSourceDatadog AlertSource = "datadog"

	AlertSourceJira AlertSource = "jira"

	AlertSourceNobl9 AlertSource = "nobl9"

	AlertSourceOpsgenie AlertSource = "opsgenie"

	AlertSourcePagerduty AlertSource = "pagerduty"

	AlertSourceVictorops AlertSource = "victorops"

	AlertSourceZendesk AlertSource = "zendesk"
)

// Defines values for AlertListDataSource.
const (
	AlertListDataSourceAsana AlertListDataSource = "asana"

	AlertListDataSourceDatadog AlertListDataSource = "datadog"

	AlertListDataSourceJira AlertListDataSource = "jira"

	AlertListDataSourceNobl9 AlertListDataSource = "nobl9"

	AlertListDataSourceOpsgenie AlertListDataSource = "opsgenie"

	AlertListDataSourcePagerduty AlertListDataSource = "pagerduty"

	AlertListDataSourceVictorops AlertListDataSource = "victorops"

	AlertListDataSourceZendesk AlertListDataSource = "zendesk"
)

// Defines values for AlertListDataType.
const (
	AlertListDataTypeAlerts AlertListDataType = "alerts"
)

// Defines values for AlertResponseDataSource.
const (
	AlertResponseDataSourceAsana AlertResponseDataSource = "asana"

	AlertResponseDataSourceDatadog AlertResponseDataSource = "datadog"

	AlertResponseDataSourceJira AlertResponseDataSource = "jira"

	AlertResponseDataSourceNobl9 AlertResponseDataSource = "nobl9"

	AlertResponseDataSourceOpsgenie AlertResponseDataSource = "opsgenie"

	AlertResponseDataSourcePagerduty AlertResponseDataSource = "pagerduty"

	AlertResponseDataSourceVictorops AlertResponseDataSource = "victorops"

	AlertResponseDataSourceZendesk AlertResponseDataSource = "zendesk"
)

// Defines values for AlertResponseDataType.
const (
	AlertResponseDataTypeAlerts AlertResponseDataType = "alerts"
)

// Defines values for AlertTriggerParamsAlertCondition.
const (
	AlertTriggerParamsAlertConditionALL AlertTriggerParamsAlertCondition = "ALL"

	AlertTriggerParamsAlertConditionNONE AlertTriggerParamsAlertCondition = "NONE"
)

// Defines values for AlertTriggerParamsAlertConditionLabel.
const (
	AlertTriggerParamsAlertConditionLabelANY AlertTriggerParamsAlertConditionLabel = "ANY"

	AlertTriggerParamsAlertConditionLabelIS AlertTriggerParamsAlertConditionLabel = "IS"

	AlertTriggerParamsAlertConditionLabelNONE AlertTriggerParamsAlertConditionLabel = "NONE"

	AlertTriggerParamsAlertConditionLabelSET AlertTriggerParamsAlertConditionLabel = "SET"

	AlertTriggerParamsAlertConditionLabelUNSET AlertTriggerParamsAlertConditionLabel = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionSource.
const (
	AlertTriggerParamsAlertConditionSourceANY AlertTriggerParamsAlertConditionSource = "ANY"

	AlertTriggerParamsAlertConditionSourceIS AlertTriggerParamsAlertConditionSource = "IS"

	AlertTriggerParamsAlertConditionSourceNONE AlertTriggerParamsAlertConditionSource = "NONE"

	AlertTriggerParamsAlertConditionSourceSET AlertTriggerParamsAlertConditionSource = "SET"

	AlertTriggerParamsAlertConditionSourceUNSET AlertTriggerParamsAlertConditionSource = "UNSET"
)

// Defines values for AlertTriggerParamsTriggerType.
const (
	AlertTriggerParamsTriggerTypeAlert AlertTriggerParamsTriggerType = "alert"
)

// Defines values for AlertTriggerParamsTriggers.
const (
	AlertTriggerParamsTriggersAlertCreated AlertTriggerParamsTriggers = "alert_created"
)

// Defines values for ArchiveSlackChannelsTaskParamsTaskType.
const (
	ArchiveSlackChannelsTaskParamsTaskTypeArchiveSlackChannels ArchiveSlackChannelsTaskParamsTaskType = "archive_slack_channels"
)

// Defines values for AttachDatadogDashboardsTaskParamsTaskType.
const (
	AttachDatadogDashboardsTaskParamsTaskTypeAttachDatadogDashboards AttachDatadogDashboardsTaskParamsTaskType = "attach_datadog_dashboards"
)

// Defines values for AutoAssignRoleOpsgenieTaskParamsTaskType.
const (
	AutoAssignRoleOpsgenieTaskParamsTaskTypeAutoAssignRoleOpsgenie AutoAssignRoleOpsgenieTaskParamsTaskType = "auto_assign_role_opsgenie"
)

// Defines values for AutoAssignRoleVictorOpsTaskParamsTaskType.
const (
	AutoAssignRoleVictorOpsTaskParamsTaskTypeAutoAssignRoleVictorOps AutoAssignRoleVictorOpsTaskParamsTaskType = "auto_assign_role_victor_ops"
)

// Defines values for CallPeopleTaskParamsTaskType.
const (
	CallPeopleTaskParamsTaskTypeCallPeople CallPeopleTaskParamsTaskType = "call_people"
)

// Defines values for CancelIncidentDataType.
const (
	CancelIncidentDataTypeIncidents CancelIncidentDataType = "incidents"
)

// Defines values for CauseListDataType.
const (
	CauseListDataTypeCauses CauseListDataType = "causes"
)

// Defines values for CauseResponseDataType.
const (
	CauseResponseDataTypeCauses CauseResponseDataType = "causes"
)

// Defines values for CreateAirtableTableRecordTaskParamsTaskType.
const (
	CreateAirtableTableRecordTaskParamsTaskTypeCreateAirtableTableRecord CreateAirtableTableRecordTaskParamsTaskType = "create_airtable_table_record"
)

// Defines values for CreateAsanaSubtaskTaskParamsTaskType.
const (
	CreateAsanaSubtaskTaskParamsTaskTypeCreateAsanaSubtask CreateAsanaSubtaskTaskParamsTaskType = "create_asana_subtask"
)

// Defines values for CreateAsanaTaskTaskParamsTaskType.
const (
	CreateAsanaTaskTaskParamsTaskTypeCreateAsanaTask CreateAsanaTaskTaskParamsTaskType = "create_asana_task"
)

// Defines values for CreateConfluencePageTaskParamsTaskType.
const (
	CreateConfluencePageTaskParamsTaskTypeCreateConfluencePage CreateConfluencePageTaskParamsTaskType = "create_confluence_page"
)

// Defines values for CreateDatadogNotebookTaskParamsKind.
const (
	CreateDatadogNotebookTaskParamsKindDocumentation CreateDatadogNotebookTaskParamsKind = "documentation"

	CreateDatadogNotebookTaskParamsKindInvestigation CreateDatadogNotebookTaskParamsKind = "investigation"

	CreateDatadogNotebookTaskParamsKindPostmortem CreateDatadogNotebookTaskParamsKind = "postmortem"

	CreateDatadogNotebookTaskParamsKindReport CreateDatadogNotebookTaskParamsKind = "report"

	CreateDatadogNotebookTaskParamsKindRunbook CreateDatadogNotebookTaskParamsKind = "runbook"
)

// Defines values for CreateDatadogNotebookTaskParamsTaskType.
const (
	CreateDatadogNotebookTaskParamsTaskTypeCreateDatadogNotebook CreateDatadogNotebookTaskParamsTaskType = "create_datadog_notebook"
)

// Defines values for CreateDropboxPaperPageTaskParamsTaskType.
const (
	CreateDropboxPaperPageTaskParamsTaskTypeCreateDropboxPaperPage CreateDropboxPaperPageTaskParamsTaskType = "create_dropbox_paper_page"
)

// Defines values for CreateGithubIssueTaskParamsTaskType.
const (
	CreateGithubIssueTaskParamsTaskTypeCreateGithubIssue CreateGithubIssueTaskParamsTaskType = "create_github_issue"
)

// Defines values for CreateGoogleCalendarEventTaskParamsTaskType.
const (
	CreateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent CreateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for CreateGoogleDocsPageTaskParamsTaskType.
const (
	CreateGoogleDocsPageTaskParamsTaskTypeCreateGoogleDocsPage CreateGoogleDocsPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateGoogleMeetingTaskParamsTaskType.
const (
	CreateGoogleMeetingTaskParamsTaskTypeCreateGoogleMeeting CreateGoogleMeetingTaskParamsTaskType = "create_google_meeting"
)

// Defines values for CreateIncidentTaskParamsTaskType.
const (
	CreateIncidentTaskParamsTaskTypeCreateIncident CreateIncidentTaskParamsTaskType = "create_incident"
)

// Defines values for CreateJiraIssueSubtaskTaskParamsTaskType.
const (
	CreateJiraIssueSubtaskTaskParamsTaskTypeCreateJiraIssueSubtask CreateJiraIssueSubtaskTaskParamsTaskType = "create_jira_issue_subtask"
)

// Defines values for CreateJiraIssueTaskParamsTaskType.
const (
	CreateJiraIssueTaskParamsTaskTypeCreateJiraIssue CreateJiraIssueTaskParamsTaskType = "create_jira_issue"
)

// Defines values for CreateLinearIssueTaskParamsTaskType.
const (
	CreateLinearIssueTaskParamsTaskTypeCreateLinearIssue CreateLinearIssueTaskParamsTaskType = "create_linear_issue"
)

// Defines values for CreateLinearSubtaskIssueTaskParamsTaskType.
const (
	CreateLinearSubtaskIssueTaskParamsTaskTypeCreateLinearSubtaskIssue CreateLinearSubtaskIssueTaskParamsTaskType = "create_linear_subtask_issue"
)

// Defines values for CreateMicrosoftTeamsMeetingTaskParamsTaskType.
const (
	CreateMicrosoftTeamsMeetingTaskParamsTaskTypeCreateMicrosoftTeamsMeeting CreateMicrosoftTeamsMeetingTaskParamsTaskType = "create_microsoft_teams_meeting"
)

// Defines values for CreateNotionPageTaskParamsTaskType.
const (
	CreateNotionPageTaskParamsTaskTypeCreateNotionPage CreateNotionPageTaskParamsTaskType = "create_notion_page"
)

// Defines values for CreateServiceNowIncidentTaskParamsTaskType.
const (
	CreateServiceNowIncidentTaskParamsTaskTypeCreateServiceNowIncident CreateServiceNowIncidentTaskParamsTaskType = "create_service_now_incident"
)

// Defines values for CreateShortcutStoryTaskParamsKind.
const (
	CreateShortcutStoryTaskParamsKindBug CreateShortcutStoryTaskParamsKind = "bug"

	CreateShortcutStoryTaskParamsKindChore CreateShortcutStoryTaskParamsKind = "chore"

	CreateShortcutStoryTaskParamsKindFeature CreateShortcutStoryTaskParamsKind = "feature"
)

// Defines values for CreateShortcutStoryTaskParamsTaskType.
const (
	CreateShortcutStoryTaskParamsTaskTypeCreateShortcutStory CreateShortcutStoryTaskParamsTaskType = "create_shortcut_story"
)

// Defines values for CreateShortcutTaskTaskParamsTaskType.
const (
	CreateShortcutTaskTaskParamsTaskTypeCreateShortcutTask CreateShortcutTaskTaskParamsTaskType = "create_shortcut_task"
)

// Defines values for CreateTrelloCardTaskParamsTaskType.
const (
	CreateTrelloCardTaskParamsTaskTypeCreateTrelloCard CreateTrelloCardTaskParamsTaskType = "create_trello_card"
)

// Defines values for CreateWebexMeetingTaskParamsTaskType.
const (
	CreateWebexMeetingTaskParamsTaskTypeCreateWebexMeeting CreateWebexMeetingTaskParamsTaskType = "create_webex_meeting"
)

// Defines values for CreateZendeskTicketTaskParamsKind.
const (
	CreateZendeskTicketTaskParamsKindIncident CreateZendeskTicketTaskParamsKind = "incident"

	CreateZendeskTicketTaskParamsKindProblem CreateZendeskTicketTaskParamsKind = "problem"

	CreateZendeskTicketTaskParamsKindQuestion CreateZendeskTicketTaskParamsKind = "question"

	CreateZendeskTicketTaskParamsKindTask CreateZendeskTicketTaskParamsKind = "task"
)

// Defines values for CreateZendeskTicketTaskParamsTaskType.
const (
	CreateZendeskTicketTaskParamsTaskTypeCreateZendeskTicket CreateZendeskTicketTaskParamsTaskType = "create_zendesk_ticket"
)

// Defines values for CreateZoomMeetingTaskParamsAutoRecording.
const (
	CreateZoomMeetingTaskParamsAutoRecordingCloud CreateZoomMeetingTaskParamsAutoRecording = "cloud"

	CreateZoomMeetingTaskParamsAutoRecordingLocal CreateZoomMeetingTaskParamsAutoRecording = "local"

	CreateZoomMeetingTaskParamsAutoRecordingNone CreateZoomMeetingTaskParamsAutoRecording = "none"
)

// Defines values for CreateZoomMeetingTaskParamsTaskType.
const (
	CreateZoomMeetingTaskParamsTaskTypeCreateZoomMeeting CreateZoomMeetingTaskParamsTaskType = "create_zoom_meeting"
)

// Defines values for CustomFieldRequired.
const (
	CustomFieldRequiredIncidentForm CustomFieldRequired = "incident_form"

	CustomFieldRequiredIncidentMitigationForm CustomFieldRequired = "incident_mitigation_form"

	CustomFieldRequiredIncidentMitigationSlackForm CustomFieldRequired = "incident_mitigation_slack_form"

	CustomFieldRequiredIncidentPostMortemForm CustomFieldRequired = "incident_post_mortem_form"

	CustomFieldRequiredIncidentResolutionForm CustomFieldRequired = "incident_resolution_form"

	CustomFieldRequiredIncidentResolutionSlackForm CustomFieldRequired = "incident_resolution_slack_form"

	CustomFieldRequiredIncidentSlackForm CustomFieldRequired = "incident_slack_form"
)

// Defines values for CustomFieldShown.
const (
	CustomFieldShownIncidentForm CustomFieldShown = "incident_form"

	CustomFieldShownIncidentMitigationForm CustomFieldShown = "incident_mitigation_form"

	CustomFieldShownIncidentMitigationSlackForm CustomFieldShown = "incident_mitigation_slack_form"

	CustomFieldShownIncidentPostMortem CustomFieldShown = "incident_post_mortem"

	CustomFieldShownIncidentPostMortemForm CustomFieldShown = "incident_post_mortem_form"

	CustomFieldShownIncidentResolutionForm CustomFieldShown = "incident_resolution_form"

	CustomFieldShownIncidentResolutionSlackForm CustomFieldShown = "incident_resolution_slack_form"

	CustomFieldShownIncidentSlackForm CustomFieldShown = "incident_slack_form"
)

// Defines values for CustomFieldListDataType.
const (
	CustomFieldListDataTypeCustomFields CustomFieldListDataType = "custom_fields"
)

// Defines values for CustomFieldOptionListDataType.
const (
	CustomFieldOptionListDataTypeCustomFieldOptions CustomFieldOptionListDataType = "custom_field_options"
)

// Defines values for CustomFieldOptionResponseDataType.
const (
	CustomFieldOptionResponseDataTypeCustomFieldOptions CustomFieldOptionResponseDataType = "custom_field_options"
)

// Defines values for CustomFieldResponseDataType.
const (
	CustomFieldResponseDataTypeCustomFields CustomFieldResponseDataType = "custom_fields"
)

// Defines values for EnvironmentListDataType.
const (
	EnvironmentListDataTypeEnvironments EnvironmentListDataType = "environments"
)

// Defines values for EnvironmentResponseDataType.
const (
	EnvironmentResponseDataTypeEnvironments EnvironmentResponseDataType = "environments"
)

// Defines values for FunctionalityListDataType.
const (
	FunctionalityListDataTypeFunctionalities FunctionalityListDataType = "functionalities"
)

// Defines values for FunctionalityResponseDataType.
const (
	FunctionalityResponseDataTypeFunctionalities FunctionalityResponseDataType = "functionalities"
)

// Defines values for GetPulsesTaskParamsTaskType.
const (
	GetPulsesTaskParamsTaskTypeGetPulses GetPulsesTaskParamsTaskType = "get_pulses"
)

// Defines values for HttpClientTaskParamsMethod.
const (
	HttpClientTaskParamsMethodDELETE HttpClientTaskParamsMethod = "DELETE"

	HttpClientTaskParamsMethodGET HttpClientTaskParamsMethod = "GET"

	HttpClientTaskParamsMethodOPTIONS HttpClientTaskParamsMethod = "OPTIONS"

	HttpClientTaskParamsMethodPOST HttpClientTaskParamsMethod = "POST"

	HttpClientTaskParamsMethodPUT HttpClientTaskParamsMethod = "PUT"
)

// Defines values for HttpClientTaskParamsTaskType.
const (
	HttpClientTaskParamsTaskTypeHttpClient HttpClientTaskParamsTaskType = "http_client"
)

// Defines values for IncidentActionItemKind.
const (
	IncidentActionItemKindFollowUp IncidentActionItemKind = "follow_up"

	IncidentActionItemKindTask IncidentActionItemKind = "task"
)

// Defines values for IncidentActionItemPriority.
const (
	IncidentActionItemPriorityHigh IncidentActionItemPriority = "high"

	IncidentActionItemPriorityLow IncidentActionItemPriority = "low"

	IncidentActionItemPriorityMedium IncidentActionItemPriority = "medium"
)

// Defines values for IncidentActionItemStatus.
const (
	IncidentActionItemStatusCancelled IncidentActionItemStatus = "cancelled"

	IncidentActionItemStatusDone IncidentActionItemStatus = "done"

	IncidentActionItemStatusInProgress IncidentActionItemStatus = "in_progress"

	IncidentActionItemStatusOpen IncidentActionItemStatus = "open"
)

// Defines values for IncidentActionItemListDataType.
const (
	IncidentActionItemListDataTypeIncidentActionItems IncidentActionItemListDataType = "incident_action_items"
)

// Defines values for IncidentActionItemResponseDataType.
const (
	IncidentActionItemResponseDataTypeIncidentActionItems IncidentActionItemResponseDataType = "incident_action_items"
)

// Defines values for IncidentCustomFieldSelectionListDataType.
const (
	IncidentCustomFieldSelectionListDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionListDataType = "incident_custom_field_selections"
)

// Defines values for IncidentCustomFieldSelectionResponseDataType.
const (
	IncidentCustomFieldSelectionResponseDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionResponseDataType = "incident_custom_field_selections"
)

// Defines values for IncidentEventVisibility.
const (
	IncidentEventVisibilityExternal IncidentEventVisibility = "external"

	IncidentEventVisibilityInternal IncidentEventVisibility = "internal"
)

// Defines values for IncidentEventListDataType.
const (
	IncidentEventListDataTypeIncidentEvents IncidentEventListDataType = "incident_events"
)

// Defines values for IncidentEventResponseDataType.
const (
	IncidentEventResponseDataTypeIncidentEvents IncidentEventResponseDataType = "incident_events"
)

// Defines values for IncidentFeedbackRating.
const (
	IncidentFeedbackRatingN0 IncidentFeedbackRating = 0

	IncidentFeedbackRatingN1 IncidentFeedbackRating = 1

	IncidentFeedbackRatingN2 IncidentFeedbackRating = 2

	IncidentFeedbackRatingN3 IncidentFeedbackRating = 3

	IncidentFeedbackRatingN4 IncidentFeedbackRating = 4
)

// Defines values for IncidentFeedbackListDataType.
const (
	IncidentFeedbackListDataTypeIncidentFeedbacks IncidentFeedbackListDataType = "incident_feedbacks"
)

// Defines values for IncidentFeedbackResponseDataType.
const (
	IncidentFeedbackResponseDataTypeIncidentFeedbacks IncidentFeedbackResponseDataType = "incident_feedbacks"
)

// Defines values for IncidentListDataType.
const (
	IncidentListDataTypeIncidents IncidentListDataType = "incidents"
)

// Defines values for IncidentPostMortemStatus.
const (
	IncidentPostMortemStatusDraft IncidentPostMortemStatus = "draft"

	IncidentPostMortemStatusPublished IncidentPostMortemStatus = "published"
)

// Defines values for IncidentPostMortemListDataType.
const (
	IncidentPostMortemListDataTypeIncidentPostMortems IncidentPostMortemListDataType = "incident_post_mortems"
)

// Defines values for IncidentPostMortemResponseDataType.
const (
	IncidentPostMortemResponseDataTypeIncidentPostMortems IncidentPostMortemResponseDataType = "incident_post_mortems"
)

// Defines values for IncidentResponseDataType.
const (
	IncidentResponseDataTypeIncidents IncidentResponseDataType = "incidents"
)

// Defines values for IncidentRoleListDataType.
const (
	IncidentRoleListDataTypeIncidentRoles IncidentRoleListDataType = "incident_roles"
)

// Defines values for IncidentRoleResponseDataType.
const (
	IncidentRoleResponseDataTypeIncidentRoles IncidentRoleResponseDataType = "incident_roles"
)

// Defines values for IncidentRoleTaskPriority.
const (
	IncidentRoleTaskPriorityHigh IncidentRoleTaskPriority = "high"

	IncidentRoleTaskPriorityLow IncidentRoleTaskPriority = "low"

	IncidentRoleTaskPriorityMedium IncidentRoleTaskPriority = "medium"
)

// Defines values for IncidentRoleTaskListDataType.
const (
	IncidentRoleTaskListDataTypeIncidentRoleTasks IncidentRoleTaskListDataType = "incident_role_tasks"
)

// Defines values for IncidentRoleTaskResponseDataType.
const (
	IncidentRoleTaskResponseDataTypeIncidentRoleTasks IncidentRoleTaskResponseDataType = "incident_role_tasks"
)

// Defines values for IncidentStatusPageEventStatus.
const (
	IncidentStatusPageEventStatusCompleted IncidentStatusPageEventStatus = "completed"

	IncidentStatusPageEventStatusIdentified IncidentStatusPageEventStatus = "identified"

	IncidentStatusPageEventStatusInProgress IncidentStatusPageEventStatus = "in_progress"

	IncidentStatusPageEventStatusInvestigating IncidentStatusPageEventStatus = "investigating"

	IncidentStatusPageEventStatusMonitoring IncidentStatusPageEventStatus = "monitoring"

	IncidentStatusPageEventStatusResolved IncidentStatusPageEventStatus = "resolved"

	IncidentStatusPageEventStatusScheduled IncidentStatusPageEventStatus = "scheduled"

	IncidentStatusPageEventStatusVerifying IncidentStatusPageEventStatus = "verifying"
)

// Defines values for IncidentStatusPageEventListDataType.
const (
	IncidentStatusPageEventListDataTypeIncidentStatusPageEvents IncidentStatusPageEventListDataType = "incident_status_page_events"
)

// Defines values for IncidentStatusPageEventResponseDataType.
const (
	IncidentStatusPageEventResponseDataTypeIncidentStatusPageEvents IncidentStatusPageEventResponseDataType = "incident_status_page_events"
)

// Defines values for IncidentTriggerParamsIncidentCondition.
const (
	IncidentTriggerParamsIncidentConditionALL IncidentTriggerParamsIncidentCondition = "ALL"

	IncidentTriggerParamsIncidentConditionNONE IncidentTriggerParamsIncidentCondition = "NONE"
)

// Defines values for IncidentTriggerParamsIncidentConditionEnvironment.
const (
	IncidentTriggerParamsIncidentConditionEnvironmentANY IncidentTriggerParamsIncidentConditionEnvironment = "ANY"

	IncidentTriggerParamsIncidentConditionEnvironmentIS IncidentTriggerParamsIncidentConditionEnvironment = "IS"

	IncidentTriggerParamsIncidentConditionEnvironmentNONE IncidentTriggerParamsIncidentConditionEnvironment = "NONE"

	IncidentTriggerParamsIncidentConditionEnvironmentSET IncidentTriggerParamsIncidentConditionEnvironment = "SET"

	IncidentTriggerParamsIncidentConditionEnvironmentUNSET IncidentTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionFunctionality.
const (
	IncidentTriggerParamsIncidentConditionFunctionalityANY IncidentTriggerParamsIncidentConditionFunctionality = "ANY"

	IncidentTriggerParamsIncidentConditionFunctionalityIS IncidentTriggerParamsIncidentConditionFunctionality = "IS"

	IncidentTriggerParamsIncidentConditionFunctionalityNONE IncidentTriggerParamsIncidentConditionFunctionality = "NONE"

	IncidentTriggerParamsIncidentConditionFunctionalitySET IncidentTriggerParamsIncidentConditionFunctionality = "SET"

	IncidentTriggerParamsIncidentConditionFunctionalityUNSET IncidentTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionGroup.
const (
	IncidentTriggerParamsIncidentConditionGroupANY IncidentTriggerParamsIncidentConditionGroup = "ANY"

	IncidentTriggerParamsIncidentConditionGroupIS IncidentTriggerParamsIncidentConditionGroup = "IS"

	IncidentTriggerParamsIncidentConditionGroupNONE IncidentTriggerParamsIncidentConditionGroup = "NONE"

	IncidentTriggerParamsIncidentConditionGroupSET IncidentTriggerParamsIncidentConditionGroup = "SET"

	IncidentTriggerParamsIncidentConditionGroupUNSET IncidentTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentType.
const (
	IncidentTriggerParamsIncidentConditionIncidentTypeANY IncidentTriggerParamsIncidentConditionIncidentType = "ANY"

	IncidentTriggerParamsIncidentConditionIncidentTypeIS IncidentTriggerParamsIncidentConditionIncidentType = "IS"

	IncidentTriggerParamsIncidentConditionIncidentTypeNONE IncidentTriggerParamsIncidentConditionIncidentType = "NONE"

	IncidentTriggerParamsIncidentConditionIncidentTypeSET IncidentTriggerParamsIncidentConditionIncidentType = "SET"

	IncidentTriggerParamsIncidentConditionIncidentTypeUNSET IncidentTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionKind.
const (
	IncidentTriggerParamsIncidentConditionKindANY IncidentTriggerParamsIncidentConditionKind = "ANY"

	IncidentTriggerParamsIncidentConditionKindIS IncidentTriggerParamsIncidentConditionKind = "IS"

	IncidentTriggerParamsIncidentConditionKindNONE IncidentTriggerParamsIncidentConditionKind = "NONE"

	IncidentTriggerParamsIncidentConditionKindSET IncidentTriggerParamsIncidentConditionKind = "SET"

	IncidentTriggerParamsIncidentConditionKindUNSET IncidentTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionService.
const (
	IncidentTriggerParamsIncidentConditionServiceANY IncidentTriggerParamsIncidentConditionService = "ANY"

	IncidentTriggerParamsIncidentConditionServiceIS IncidentTriggerParamsIncidentConditionService = "IS"

	IncidentTriggerParamsIncidentConditionServiceNONE IncidentTriggerParamsIncidentConditionService = "NONE"

	IncidentTriggerParamsIncidentConditionServiceSET IncidentTriggerParamsIncidentConditionService = "SET"

	IncidentTriggerParamsIncidentConditionServiceUNSET IncidentTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionSeverity.
const (
	IncidentTriggerParamsIncidentConditionSeverityANY IncidentTriggerParamsIncidentConditionSeverity = "ANY"

	IncidentTriggerParamsIncidentConditionSeverityIS IncidentTriggerParamsIncidentConditionSeverity = "IS"

	IncidentTriggerParamsIncidentConditionSeverityNONE IncidentTriggerParamsIncidentConditionSeverity = "NONE"

	IncidentTriggerParamsIncidentConditionSeveritySET IncidentTriggerParamsIncidentConditionSeverity = "SET"

	IncidentTriggerParamsIncidentConditionSeverityUNSET IncidentTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionStatus.
const (
	IncidentTriggerParamsIncidentConditionStatusANY IncidentTriggerParamsIncidentConditionStatus = "ANY"

	IncidentTriggerParamsIncidentConditionStatusIS IncidentTriggerParamsIncidentConditionStatus = "IS"

	IncidentTriggerParamsIncidentConditionStatusNONE IncidentTriggerParamsIncidentConditionStatus = "NONE"

	IncidentTriggerParamsIncidentConditionStatusSET IncidentTriggerParamsIncidentConditionStatus = "SET"

	IncidentTriggerParamsIncidentConditionStatusUNSET IncidentTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionVisibility.
const (
	IncidentTriggerParamsIncidentConditionVisibilityANY IncidentTriggerParamsIncidentConditionVisibility = "ANY"

	IncidentTriggerParamsIncidentConditionVisibilityIS IncidentTriggerParamsIncidentConditionVisibility = "IS"

	IncidentTriggerParamsIncidentConditionVisibilityNONE IncidentTriggerParamsIncidentConditionVisibility = "NONE"

	IncidentTriggerParamsIncidentConditionVisibilitySET IncidentTriggerParamsIncidentConditionVisibility = "SET"

	IncidentTriggerParamsIncidentConditionVisibilityUNSET IncidentTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentKinds.
const (
	IncidentTriggerParamsIncidentKindsExample IncidentTriggerParamsIncidentKinds = "example"

	IncidentTriggerParamsIncidentKindsNormal IncidentTriggerParamsIncidentKinds = "normal"

	IncidentTriggerParamsIncidentKindsScheduled IncidentTriggerParamsIncidentKinds = "scheduled"

	IncidentTriggerParamsIncidentKindsTest IncidentTriggerParamsIncidentKinds = "test"
)

// Defines values for IncidentTriggerParamsIncidentStatuses.
const (
	IncidentTriggerParamsIncidentStatusesAcknowledged IncidentTriggerParamsIncidentStatuses = "acknowledged"

	IncidentTriggerParamsIncidentStatusesCancelled IncidentTriggerParamsIncidentStatuses = "cancelled"

	IncidentTriggerParamsIncidentStatusesCompleted IncidentTriggerParamsIncidentStatuses = "completed"

	IncidentTriggerParamsIncidentStatusesDetected IncidentTriggerParamsIncidentStatuses = "detected"

	IncidentTriggerParamsIncidentStatusesInProgress IncidentTriggerParamsIncidentStatuses = "in_progress"

	IncidentTriggerParamsIncidentStatusesMitigated IncidentTriggerParamsIncidentStatuses = "mitigated"

	IncidentTriggerParamsIncidentStatusesResolved IncidentTriggerParamsIncidentStatuses = "resolved"

	IncidentTriggerParamsIncidentStatusesScheduled IncidentTriggerParamsIncidentStatuses = "scheduled"

	IncidentTriggerParamsIncidentStatusesStarted IncidentTriggerParamsIncidentStatuses = "started"
)

// Defines values for IncidentTriggerParamsTriggerType.
const (
	IncidentTriggerParamsTriggerTypeIncident IncidentTriggerParamsTriggerType = "incident"
)

// Defines values for IncidentTriggerParamsTriggers.
const (
	IncidentTriggerParamsTriggersEnvironmentsUpdated IncidentTriggerParamsTriggers = "environments_updated"

	IncidentTriggerParamsTriggersFunctionalitiesUpdated IncidentTriggerParamsTriggers = "functionalities_updated"

	IncidentTriggerParamsTriggersIncidentCreated IncidentTriggerParamsTriggers = "incident_created"

	IncidentTriggerParamsTriggersIncidentTypesUpdated IncidentTriggerParamsTriggers = "incident_types_updated"

	IncidentTriggerParamsTriggersIncidentUpdated IncidentTriggerParamsTriggers = "incident_updated"

	IncidentTriggerParamsTriggersRoleAssignmentsUpdated IncidentTriggerParamsTriggers = "role_assignments_updated"

	IncidentTriggerParamsTriggersServicesUpdated IncidentTriggerParamsTriggers = "services_updated"

	IncidentTriggerParamsTriggersSeverityUpdated IncidentTriggerParamsTriggers = "severity_updated"

	IncidentTriggerParamsTriggersSlackCommand IncidentTriggerParamsTriggers = "slack_command"

	IncidentTriggerParamsTriggersStatusUpdated IncidentTriggerParamsTriggers = "status_updated"

	IncidentTriggerParamsTriggersSummaryUpdated IncidentTriggerParamsTriggers = "summary_updated"

	IncidentTriggerParamsTriggersTeamsUpdated IncidentTriggerParamsTriggers = "teams_updated"

	IncidentTriggerParamsTriggersTimelineUpdated IncidentTriggerParamsTriggers = "timeline_updated"

	IncidentTriggerParamsTriggersTitleUpdated IncidentTriggerParamsTriggers = "title_updated"
)

// Defines values for IncidentTypeListDataType.
const (
	IncidentTypeListDataTypeIncidentTypes IncidentTypeListDataType = "incident_types"
)

// Defines values for IncidentTypeResponseDataType.
const (
	IncidentTypeResponseDataTypeIncidentTypes IncidentTypeResponseDataType = "incident_types"
)

// Defines values for InviteToSlackChannelOpsgenieTaskParamsTaskType.
const (
	InviteToSlackChannelOpsgenieTaskParamsTaskTypeInviteToSlackChannelOpsgenie InviteToSlackChannelOpsgenieTaskParamsTaskType = "invite_to_slack_channel_opsgenie"
)

// Defines values for InviteToSlackChannelVictorOpsTaskParamsTaskType.
const (
	InviteToSlackChannelVictorOpsTaskParamsTaskTypeInviteToSlackChannelVictorOps InviteToSlackChannelVictorOpsTaskParamsTaskType = "invite_to_slack_channel_victor_ops"
)

// Defines values for MitigateIncidentDataType.
const (
	MitigateIncidentDataTypeIncidents MitigateIncidentDataType = "incidents"
)

// Defines values for NewAlertDataAttributesSource.
const (
	NewAlertDataAttributesSourceAsana NewAlertDataAttributesSource = "asana"

	NewAlertDataAttributesSourceDatadog NewAlertDataAttributesSource = "datadog"

	NewAlertDataAttributesSourceJira NewAlertDataAttributesSource = "jira"

	NewAlertDataAttributesSourceNobl9 NewAlertDataAttributesSource = "nobl9"

	NewAlertDataAttributesSourceOpsgenie NewAlertDataAttributesSource = "opsgenie"

	NewAlertDataAttributesSourcePagerduty NewAlertDataAttributesSource = "pagerduty"

	NewAlertDataAttributesSourceVictorops NewAlertDataAttributesSource = "victorops"

	NewAlertDataAttributesSourceZendesk NewAlertDataAttributesSource = "zendesk"
)

// Defines values for NewAlertDataType.
const (
	NewAlertDataTypeAlerts NewAlertDataType = "alerts"
)

// Defines values for NewCauseDataType.
const (
	NewCauseDataTypeCauses NewCauseDataType = "causes"
)

// Defines values for NewCustomFieldDataAttributesRequired.
const (
	NewCustomFieldDataAttributesRequiredIncidentForm NewCustomFieldDataAttributesRequired = "incident_form"

	NewCustomFieldDataAttributesRequiredIncidentMitigationForm NewCustomFieldDataAttributesRequired = "incident_mitigation_form"

	NewCustomFieldDataAttributesRequiredIncidentMitigationSlackForm NewCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"

	NewCustomFieldDataAttributesRequiredIncidentPostMortemForm NewCustomFieldDataAttributesRequired = "incident_post_mortem_form"

	NewCustomFieldDataAttributesRequiredIncidentResolutionForm NewCustomFieldDataAttributesRequired = "incident_resolution_form"

	NewCustomFieldDataAttributesRequiredIncidentResolutionSlackForm NewCustomFieldDataAttributesRequired = "incident_resolution_slack_form"

	NewCustomFieldDataAttributesRequiredIncidentSlackForm NewCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for NewCustomFieldDataAttributesShown.
const (
	NewCustomFieldDataAttributesShownIncidentForm NewCustomFieldDataAttributesShown = "incident_form"

	NewCustomFieldDataAttributesShownIncidentMitigationForm NewCustomFieldDataAttributesShown = "incident_mitigation_form"

	NewCustomFieldDataAttributesShownIncidentMitigationSlackForm NewCustomFieldDataAttributesShown = "incident_mitigation_slack_form"

	NewCustomFieldDataAttributesShownIncidentPostMortem NewCustomFieldDataAttributesShown = "incident_post_mortem"

	NewCustomFieldDataAttributesShownIncidentPostMortemForm NewCustomFieldDataAttributesShown = "incident_post_mortem_form"

	NewCustomFieldDataAttributesShownIncidentResolutionForm NewCustomFieldDataAttributesShown = "incident_resolution_form"

	NewCustomFieldDataAttributesShownIncidentResolutionSlackForm NewCustomFieldDataAttributesShown = "incident_resolution_slack_form"

	NewCustomFieldDataAttributesShownIncidentSlackForm NewCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for NewCustomFieldDataType.
const (
	NewCustomFieldDataTypeCustomFields NewCustomFieldDataType = "custom_fields"
)

// Defines values for NewCustomFieldOptionDataType.
const (
	NewCustomFieldOptionDataTypeCustomFieldOptions NewCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for NewEnvironmentDataType.
const (
	NewEnvironmentDataTypeEnvironments NewEnvironmentDataType = "environments"
)

// Defines values for NewFunctionalityDataType.
const (
	NewFunctionalityDataTypeFunctionalities NewFunctionalityDataType = "functionalities"
)

// Defines values for NewIncidentDataAttributesKind.
const (
	NewIncidentDataAttributesKindExample NewIncidentDataAttributesKind = "example"

	NewIncidentDataAttributesKindNormal NewIncidentDataAttributesKind = "normal"

	NewIncidentDataAttributesKindScheduled NewIncidentDataAttributesKind = "scheduled"

	NewIncidentDataAttributesKindTest NewIncidentDataAttributesKind = "test"
)

// Defines values for NewIncidentDataAttributesStatus.
const (
	NewIncidentDataAttributesStatusAcknowledged NewIncidentDataAttributesStatus = "acknowledged"

	NewIncidentDataAttributesStatusCancelled NewIncidentDataAttributesStatus = "cancelled"

	NewIncidentDataAttributesStatusCompleted NewIncidentDataAttributesStatus = "completed"

	NewIncidentDataAttributesStatusDetected NewIncidentDataAttributesStatus = "detected"

	NewIncidentDataAttributesStatusInProgress NewIncidentDataAttributesStatus = "in_progress"

	NewIncidentDataAttributesStatusMitigated NewIncidentDataAttributesStatus = "mitigated"

	NewIncidentDataAttributesStatusResolved NewIncidentDataAttributesStatus = "resolved"

	NewIncidentDataAttributesStatusScheduled NewIncidentDataAttributesStatus = "scheduled"

	NewIncidentDataAttributesStatusStarted NewIncidentDataAttributesStatus = "started"
)

// Defines values for NewIncidentDataType.
const (
	NewIncidentDataTypeIncidents NewIncidentDataType = "incidents"
)

// Defines values for NewIncidentActionItemDataAttributesKind.
const (
	NewIncidentActionItemDataAttributesKindFollowUp NewIncidentActionItemDataAttributesKind = "follow_up"

	NewIncidentActionItemDataAttributesKindTask NewIncidentActionItemDataAttributesKind = "task"
)

// Defines values for NewIncidentActionItemDataAttributesPriority.
const (
	NewIncidentActionItemDataAttributesPriorityHigh NewIncidentActionItemDataAttributesPriority = "high"

	NewIncidentActionItemDataAttributesPriorityLow NewIncidentActionItemDataAttributesPriority = "low"

	NewIncidentActionItemDataAttributesPriorityMedium NewIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for NewIncidentActionItemDataAttributesStatus.
const (
	NewIncidentActionItemDataAttributesStatusCancelled NewIncidentActionItemDataAttributesStatus = "cancelled"

	NewIncidentActionItemDataAttributesStatusDone NewIncidentActionItemDataAttributesStatus = "done"

	NewIncidentActionItemDataAttributesStatusInProgress NewIncidentActionItemDataAttributesStatus = "in_progress"

	NewIncidentActionItemDataAttributesStatusOpen NewIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for NewIncidentActionItemDataType.
const (
	NewIncidentActionItemDataTypeIncidentActionItems NewIncidentActionItemDataType = "incident_action_items"
)

// Defines values for NewIncidentCustomFieldSelectionDataType.
const (
	NewIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections NewIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for NewIncidentEventDataAttributesVisibility.
const (
	NewIncidentEventDataAttributesVisibilityExternal NewIncidentEventDataAttributesVisibility = "external"

	NewIncidentEventDataAttributesVisibilityInternal NewIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for NewIncidentEventDataType.
const (
	NewIncidentEventDataTypeIncidentEvents NewIncidentEventDataType = "incident_events"
)

// Defines values for NewIncidentFeedbackDataAttributesRating.
const (
	NewIncidentFeedbackDataAttributesRatingN0 NewIncidentFeedbackDataAttributesRating = 0

	NewIncidentFeedbackDataAttributesRatingN1 NewIncidentFeedbackDataAttributesRating = 1

	NewIncidentFeedbackDataAttributesRatingN2 NewIncidentFeedbackDataAttributesRating = 2

	NewIncidentFeedbackDataAttributesRatingN3 NewIncidentFeedbackDataAttributesRating = 3

	NewIncidentFeedbackDataAttributesRatingN4 NewIncidentFeedbackDataAttributesRating = 4
)

// Defines values for NewIncidentFeedbackDataType.
const (
	NewIncidentFeedbackDataTypeIncidentFeedbacks NewIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for NewIncidentRoleDataType.
const (
	NewIncidentRoleDataTypeIncidentRoles NewIncidentRoleDataType = "incident_roles"
)

// Defines values for NewIncidentRoleTaskDataAttributesPriority.
const (
	NewIncidentRoleTaskDataAttributesPriorityHigh NewIncidentRoleTaskDataAttributesPriority = "high"

	NewIncidentRoleTaskDataAttributesPriorityLow NewIncidentRoleTaskDataAttributesPriority = "low"

	NewIncidentRoleTaskDataAttributesPriorityMedium NewIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for NewIncidentRoleTaskDataType.
const (
	NewIncidentRoleTaskDataTypeIncidentRoleTasks NewIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for NewIncidentStatusPageEventDataAttributesStatus.
const (
	NewIncidentStatusPageEventDataAttributesStatusCompleted NewIncidentStatusPageEventDataAttributesStatus = "completed"

	NewIncidentStatusPageEventDataAttributesStatusIdentified NewIncidentStatusPageEventDataAttributesStatus = "identified"

	NewIncidentStatusPageEventDataAttributesStatusInProgress NewIncidentStatusPageEventDataAttributesStatus = "in_progress"

	NewIncidentStatusPageEventDataAttributesStatusInvestigating NewIncidentStatusPageEventDataAttributesStatus = "investigating"

	NewIncidentStatusPageEventDataAttributesStatusMonitoring NewIncidentStatusPageEventDataAttributesStatus = "monitoring"

	NewIncidentStatusPageEventDataAttributesStatusResolved NewIncidentStatusPageEventDataAttributesStatus = "resolved"

	NewIncidentStatusPageEventDataAttributesStatusScheduled NewIncidentStatusPageEventDataAttributesStatus = "scheduled"

	NewIncidentStatusPageEventDataAttributesStatusVerifying NewIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for NewIncidentStatusPageEventDataType.
const (
	NewIncidentStatusPageEventDataTypeIncidentStatusPageEvents NewIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for NewIncidentTypeDataType.
const (
	NewIncidentTypeDataTypeIncidentTypes NewIncidentTypeDataType = "incident_types"
)

// Defines values for NewPlaybookDataType.
const (
	NewPlaybookDataTypePlaybooks NewPlaybookDataType = "playbooks"
)

// Defines values for NewPlaybookTaskDataType.
const (
	NewPlaybookTaskDataTypePlaybookTasks NewPlaybookTaskDataType = "playbook_tasks"
)

// Defines values for NewPostMortemTemplateDataType.
const (
	NewPostMortemTemplateDataTypePostMortemTemplates NewPostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for NewPulseDataType.
const (
	NewPulseDataTypePulses NewPulseDataType = "pulses"
)

// Defines values for NewServiceDataType.
const (
	NewServiceDataTypeServices NewServiceDataType = "services"
)

// Defines values for NewSeverityDataAttributesSeverity.
const (
	NewSeverityDataAttributesSeverityCritical NewSeverityDataAttributesSeverity = "critical"

	NewSeverityDataAttributesSeverityHigh NewSeverityDataAttributesSeverity = "high"

	NewSeverityDataAttributesSeverityLow NewSeverityDataAttributesSeverity = "low"

	NewSeverityDataAttributesSeverityMedium NewSeverityDataAttributesSeverity = "medium"
)

// Defines values for NewSeverityDataType.
const (
	NewSeverityDataTypeSeverities NewSeverityDataType = "severities"
)

// Defines values for NewStatusPageDataAttributesShowUptimeLastDays.
const (
	NewStatusPageDataAttributesShowUptimeLastDaysN30 NewStatusPageDataAttributesShowUptimeLastDays = 30

	NewStatusPageDataAttributesShowUptimeLastDaysN60 NewStatusPageDataAttributesShowUptimeLastDays = 60

	NewStatusPageDataAttributesShowUptimeLastDaysN90 NewStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewStatusPageDataType.
const (
	NewStatusPageDataTypeStatusPages NewStatusPageDataType = "status_pages"
)

// Defines values for NewTeamDataType.
const (
	NewTeamDataTypeGroups NewTeamDataType = "groups"
)

// Defines values for NewWorkflowDataAttributesRepeatOn.
const (
	NewWorkflowDataAttributesRepeatOnF NewWorkflowDataAttributesRepeatOn = "F"

	NewWorkflowDataAttributesRepeatOnM NewWorkflowDataAttributesRepeatOn = "M"

	NewWorkflowDataAttributesRepeatOnR NewWorkflowDataAttributesRepeatOn = "R"

	NewWorkflowDataAttributesRepeatOnS NewWorkflowDataAttributesRepeatOn = "S"

	NewWorkflowDataAttributesRepeatOnT NewWorkflowDataAttributesRepeatOn = "T"

	NewWorkflowDataAttributesRepeatOnU NewWorkflowDataAttributesRepeatOn = "U"

	NewWorkflowDataAttributesRepeatOnW NewWorkflowDataAttributesRepeatOn = "W"
)

// Defines values for NewWorkflowDataType.
const (
	NewWorkflowDataTypeWorkflows NewWorkflowDataType = "workflows"
)

// Defines values for NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowCustomFieldSelectionDataType.
const (
	NewWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections NewWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for NewWorkflowTaskDataType.
const (
	NewWorkflowTaskDataTypeWorkflowTasks NewWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsPriority.
const (
	PageOpsgenieOnCallRespondersTaskParamsPriorityAuto PageOpsgenieOnCallRespondersTaskParamsPriority = "auto"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP1 PageOpsgenieOnCallRespondersTaskParamsPriority = "P1"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP2 PageOpsgenieOnCallRespondersTaskParamsPriority = "P2"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP3 PageOpsgenieOnCallRespondersTaskParamsPriority = "P3"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP4 PageOpsgenieOnCallRespondersTaskParamsPriority = "P4"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsTaskType.
const (
	PageOpsgenieOnCallRespondersTaskParamsTaskTypePageOpsgenieOnCallResponders PageOpsgenieOnCallRespondersTaskParamsTaskType = "page_opsgenie_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsTaskType.
const (
	PagePagerdutyOnCallRespondersTaskParamsTaskTypePagePagerdutyOnCallResponders PagePagerdutyOnCallRespondersTaskParamsTaskType = "page_pagerduty_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsUrgency.
const (
	PagePagerdutyOnCallRespondersTaskParamsUrgencyAuto PagePagerdutyOnCallRespondersTaskParamsUrgency = "auto"

	PagePagerdutyOnCallRespondersTaskParamsUrgencyHigh PagePagerdutyOnCallRespondersTaskParamsUrgency = "high"

	PagePagerdutyOnCallRespondersTaskParamsUrgencyLow PagePagerdutyOnCallRespondersTaskParamsUrgency = "low"
)

// Defines values for PlaybookListDataType.
const (
	PlaybookListDataTypePlaybooks PlaybookListDataType = "playbooks"
)

// Defines values for PlaybookResponseDataType.
const (
	PlaybookResponseDataTypePlaybooks PlaybookResponseDataType = "playbooks"
)

// Defines values for PlaybookTaskListDataType.
const (
	PlaybookTaskListDataTypePlaybookTasks PlaybookTaskListDataType = "playbook_tasks"
)

// Defines values for PlaybookTaskResponseDataType.
const (
	PlaybookTaskResponseDataTypePlaybookTasks PlaybookTaskResponseDataType = "playbook_tasks"
)

// Defines values for PostMortemTemplateListDataType.
const (
	PostMortemTemplateListDataTypePostMortemTemplates PostMortemTemplateListDataType = "post_mortem_templates"
)

// Defines values for PostMortemTemplateResponseDataType.
const (
	PostMortemTemplateResponseDataTypePostMortemTemplates PostMortemTemplateResponseDataType = "post_mortem_templates"
)

// Defines values for PrintTaskParamsTaskType.
const (
	PrintTaskParamsTaskTypePrint PrintTaskParamsTaskType = "print"
)

// Defines values for PublishIncidentTaskParamsStatus.
const (
	PublishIncidentTaskParamsStatusCompleted PublishIncidentTaskParamsStatus = "completed"

	PublishIncidentTaskParamsStatusIdentified PublishIncidentTaskParamsStatus = "identified"

	PublishIncidentTaskParamsStatusInProgress PublishIncidentTaskParamsStatus = "in_progress"

	PublishIncidentTaskParamsStatusInvestigating PublishIncidentTaskParamsStatus = "investigating"

	PublishIncidentTaskParamsStatusMonitoring PublishIncidentTaskParamsStatus = "monitoring"

	PublishIncidentTaskParamsStatusResolved PublishIncidentTaskParamsStatus = "resolved"

	PublishIncidentTaskParamsStatusScheduled PublishIncidentTaskParamsStatus = "scheduled"

	PublishIncidentTaskParamsStatusVerifying PublishIncidentTaskParamsStatus = "verifying"
)

// Defines values for PublishIncidentTaskParamsTaskType.
const (
	PublishIncidentTaskParamsTaskTypePublishIncident PublishIncidentTaskParamsTaskType = "publish_incident"
)

// Defines values for PulseListDataType.
const (
	PulseListDataTypePulses PulseListDataType = "pulses"
)

// Defines values for PulseResponseDataType.
const (
	PulseResponseDataTypePulses PulseResponseDataType = "pulses"
)

// Defines values for PulseTriggerParamsPulseCondition.
const (
	PulseTriggerParamsPulseConditionALL PulseTriggerParamsPulseCondition = "ALL"

	PulseTriggerParamsPulseConditionNONE PulseTriggerParamsPulseCondition = "NONE"
)

// Defines values for PulseTriggerParamsPulseConditionLabel.
const (
	PulseTriggerParamsPulseConditionLabelANY PulseTriggerParamsPulseConditionLabel = "ANY"

	PulseTriggerParamsPulseConditionLabelIS PulseTriggerParamsPulseConditionLabel = "IS"

	PulseTriggerParamsPulseConditionLabelNONE PulseTriggerParamsPulseConditionLabel = "NONE"

	PulseTriggerParamsPulseConditionLabelSET PulseTriggerParamsPulseConditionLabel = "SET"

	PulseTriggerParamsPulseConditionLabelUNSET PulseTriggerParamsPulseConditionLabel = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionSource.
const (
	PulseTriggerParamsPulseConditionSourceANY PulseTriggerParamsPulseConditionSource = "ANY"

	PulseTriggerParamsPulseConditionSourceIS PulseTriggerParamsPulseConditionSource = "IS"

	PulseTriggerParamsPulseConditionSourceNONE PulseTriggerParamsPulseConditionSource = "NONE"

	PulseTriggerParamsPulseConditionSourceSET PulseTriggerParamsPulseConditionSource = "SET"

	PulseTriggerParamsPulseConditionSourceUNSET PulseTriggerParamsPulseConditionSource = "UNSET"
)

// Defines values for PulseTriggerParamsTriggerType.
const (
	PulseTriggerParamsTriggerTypePulse PulseTriggerParamsTriggerType = "pulse"
)

// Defines values for PulseTriggerParamsTriggers.
const (
	PulseTriggerParamsTriggersPulseCreated PulseTriggerParamsTriggers = "pulse_created"
)

// Defines values for RedisClientTaskParamsTaskType.
const (
	RedisClientTaskParamsTaskTypeRedisClient RedisClientTaskParamsTaskType = "redis_client"
)

// Defines values for RenameSlackChannelTaskParamsTaskType.
const (
	RenameSlackChannelTaskParamsTaskTypeRenameSlackChannel RenameSlackChannelTaskParamsTaskType = "rename_slack_channel"
)

// Defines values for ResolveIncidentDataType.
const (
	ResolveIncidentDataTypeIncidents ResolveIncidentDataType = "incidents"
)

// Defines values for RunCommandHerokuTaskParamsSize.
const (
	RunCommandHerokuTaskParamsSizeStandard1X RunCommandHerokuTaskParamsSize = "standard-1X"

	RunCommandHerokuTaskParamsSizeStandard2X RunCommandHerokuTaskParamsSize = "standard-2X"
)

// Defines values for RunCommandHerokuTaskParamsTaskType.
const (
	RunCommandHerokuTaskParamsTaskTypeRunCommandHeroku RunCommandHerokuTaskParamsTaskType = "run_command_heroku"
)

// Defines values for SendEmailTaskParamsTaskType.
const (
	SendEmailTaskParamsTaskTypeSendEmail SendEmailTaskParamsTaskType = "send_email"
)

// Defines values for SendSmsTaskParamsTaskType.
const (
	SendSmsTaskParamsTaskTypeSendSms SendSmsTaskParamsTaskType = "send_sms"
)

// Defines values for ServiceListDataType.
const (
	ServiceListDataTypeServices ServiceListDataType = "services"
)

// Defines values for ServiceResponseDataType.
const (
	ServiceResponseDataTypeServices ServiceResponseDataType = "services"
)

// Defines values for SeveritySeverity.
const (
	SeveritySeverityCritical SeveritySeverity = "critical"

	SeveritySeverityHigh SeveritySeverity = "high"

	SeveritySeverityLow SeveritySeverity = "low"

	SeveritySeverityMedium SeveritySeverity = "medium"
)

// Defines values for SeverityListDataType.
const (
	SeverityListDataTypeSeverities SeverityListDataType = "severities"
)

// Defines values for SeverityResponseDataType.
const (
	SeverityResponseDataTypeSeverities SeverityResponseDataType = "severities"
)

// Defines values for SnapshotDatadogGraphTaskParamsTaskType.
const (
	SnapshotDatadogGraphTaskParamsTaskTypeSnapshotDatadogGraph SnapshotDatadogGraphTaskParamsTaskType = "snapshot_datadog_graph"
)

// Defines values for SnapshotGrafanaGraphTaskParamsTaskType.
const (
	SnapshotGrafanaGraphTaskParamsTaskTypeSnapshotGrafanaGraph SnapshotGrafanaGraphTaskParamsTaskType = "snapshot_grafana_graph"
)

// Defines values for SnapshotLookerGraphTaskParamsTaskType.
const (
	SnapshotLookerGraphTaskParamsTaskTypeSnapshotLookerGraph SnapshotLookerGraphTaskParamsTaskType = "snapshot_looker_graph"
)

// Defines values for SnapshotNewRelicGraphTaskParamsMetricType.
const (
	SnapshotNewRelicGraphTaskParamsMetricTypeAPDEX SnapshotNewRelicGraphTaskParamsMetricType = "APDEX"

	SnapshotNewRelicGraphTaskParamsMetricTypeAREA SnapshotNewRelicGraphTaskParamsMetricType = "AREA"

	SnapshotNewRelicGraphTaskParamsMetricTypeBAR SnapshotNewRelicGraphTaskParamsMetricType = "BAR"

	SnapshotNewRelicGraphTaskParamsMetricTypeBASELINE SnapshotNewRelicGraphTaskParamsMetricType = "BASELINE"

	SnapshotNewRelicGraphTaskParamsMetricTypeBILLBOARD SnapshotNewRelicGraphTaskParamsMetricType = "BILLBOARD"

	SnapshotNewRelicGraphTaskParamsMetricTypeBULLET SnapshotNewRelicGraphTaskParamsMetricType = "BULLET"

	SnapshotNewRelicGraphTaskParamsMetricTypeEVENTFEED SnapshotNewRelicGraphTaskParamsMetricType = "EVENT_FEED"

	SnapshotNewRelicGraphTaskParamsMetricTypeFUNNEL SnapshotNewRelicGraphTaskParamsMetricType = "FUNNEL"

	SnapshotNewRelicGraphTaskParamsMetricTypeHEATMAP SnapshotNewRelicGraphTaskParamsMetricType = "HEATMAP"

	SnapshotNewRelicGraphTaskParamsMetricTypeHISTOGRAM SnapshotNewRelicGraphTaskParamsMetricType = "HISTOGRAM"

	SnapshotNewRelicGraphTaskParamsMetricTypeLINE SnapshotNewRelicGraphTaskParamsMetricType = "LINE"

	SnapshotNewRelicGraphTaskParamsMetricTypePIE SnapshotNewRelicGraphTaskParamsMetricType = "PIE"

	SnapshotNewRelicGraphTaskParamsMetricTypeSCATTER SnapshotNewRelicGraphTaskParamsMetricType = "SCATTER"

	SnapshotNewRelicGraphTaskParamsMetricTypeSTACKEDHORIZONTALBAR SnapshotNewRelicGraphTaskParamsMetricType = "STACKED_HORIZONTAL_BAR"

	SnapshotNewRelicGraphTaskParamsMetricTypeTABLE SnapshotNewRelicGraphTaskParamsMetricType = "TABLE"

	SnapshotNewRelicGraphTaskParamsMetricTypeVERTICALBAR SnapshotNewRelicGraphTaskParamsMetricType = "VERTICAL_BAR"
)

// Defines values for SnapshotNewRelicGraphTaskParamsTaskType.
const (
	SnapshotNewRelicGraphTaskParamsTaskTypeSnapshotLookerGraph SnapshotNewRelicGraphTaskParamsTaskType = "snapshot_looker_graph"
)

// Defines values for StandaloneTriggerParamsTriggerType.
const (
	StandaloneTriggerParamsTriggerTypeSimple StandaloneTriggerParamsTriggerType = "simple"
)

// Defines values for StandaloneTriggerParamsTriggers.
const (
	StandaloneTriggerParamsTriggersSlackCommand StandaloneTriggerParamsTriggers = "slack_command"
)

// Defines values for StatusPageShowUptimeLastDays.
const (
	StatusPageShowUptimeLastDaysN30 StatusPageShowUptimeLastDays = 30

	StatusPageShowUptimeLastDaysN60 StatusPageShowUptimeLastDays = 60

	StatusPageShowUptimeLastDaysN90 StatusPageShowUptimeLastDays = 90
)

// Defines values for StatusPageListDataType.
const (
	StatusPageListDataTypeStatusPages StatusPageListDataType = "status_pages"
)

// Defines values for StatusPageResponseDataType.
const (
	StatusPageResponseDataTypeStatusPages StatusPageResponseDataType = "status_pages"
)

// Defines values for TeamListDataType.
const (
	TeamListDataTypeGroups TeamListDataType = "groups"
)

// Defines values for TeamResponseDataType.
const (
	TeamResponseDataTypeGroups TeamResponseDataType = "groups"
)

// Defines values for TweetTwitterMessageTaskParamsTaskType.
const (
	TweetTwitterMessageTaskParamsTaskTypeTweetTwitterMessage TweetTwitterMessageTaskParamsTaskType = "tweet_twitter_message"
)

// Defines values for UpdateAirtableTableRecordTaskParamsTaskType.
const (
	UpdateAirtableTableRecordTaskParamsTaskTypeUpdateAirtableTableRecord UpdateAirtableTableRecordTaskParamsTaskType = "update_airtable_table_record"
)

// Defines values for UpdateAsanaTaskTaskParamsTaskType.
const (
	UpdateAsanaTaskTaskParamsTaskTypeUpdateAsanaTask UpdateAsanaTaskTaskParamsTaskType = "update_asana_task"
)

// Defines values for UpdateCauseDataType.
const (
	UpdateCauseDataTypeCauses UpdateCauseDataType = "causes"
)

// Defines values for UpdateCustomFieldDataAttributesRequired.
const (
	UpdateCustomFieldDataAttributesRequiredIncidentForm UpdateCustomFieldDataAttributesRequired = "incident_form"

	UpdateCustomFieldDataAttributesRequiredIncidentMitigationForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_form"

	UpdateCustomFieldDataAttributesRequiredIncidentMitigationSlackForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"

	UpdateCustomFieldDataAttributesRequiredIncidentPostMortemForm UpdateCustomFieldDataAttributesRequired = "incident_post_mortem_form"

	UpdateCustomFieldDataAttributesRequiredIncidentResolutionForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_form"

	UpdateCustomFieldDataAttributesRequiredIncidentResolutionSlackForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_slack_form"

	UpdateCustomFieldDataAttributesRequiredIncidentSlackForm UpdateCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataAttributesShown.
const (
	UpdateCustomFieldDataAttributesShownIncidentForm UpdateCustomFieldDataAttributesShown = "incident_form"

	UpdateCustomFieldDataAttributesShownIncidentMitigationForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_form"

	UpdateCustomFieldDataAttributesShownIncidentMitigationSlackForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_slack_form"

	UpdateCustomFieldDataAttributesShownIncidentPostMortem UpdateCustomFieldDataAttributesShown = "incident_post_mortem"

	UpdateCustomFieldDataAttributesShownIncidentPostMortemForm UpdateCustomFieldDataAttributesShown = "incident_post_mortem_form"

	UpdateCustomFieldDataAttributesShownIncidentResolutionForm UpdateCustomFieldDataAttributesShown = "incident_resolution_form"

	UpdateCustomFieldDataAttributesShownIncidentResolutionSlackForm UpdateCustomFieldDataAttributesShown = "incident_resolution_slack_form"

	UpdateCustomFieldDataAttributesShownIncidentSlackForm UpdateCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataType.
const (
	UpdateCustomFieldDataTypeCustomFields UpdateCustomFieldDataType = "custom_fields"
)

// Defines values for UpdateCustomFieldOptionDataType.
const (
	UpdateCustomFieldOptionDataTypeCustomFieldOptions UpdateCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for UpdateEnvironmentDataType.
const (
	UpdateEnvironmentDataTypeEnvironments UpdateEnvironmentDataType = "environments"
)

// Defines values for UpdateFunctionalityDataType.
const (
	UpdateFunctionalityDataTypeFunctionalities UpdateFunctionalityDataType = "functionalities"
)

// Defines values for UpdateGithubIssueTaskParamsTaskType.
const (
	UpdateGithubIssueTaskParamsTaskTypeUpdateGithubIssue UpdateGithubIssueTaskParamsTaskType = "update_github_issue"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsTaskType.
const (
	UpdateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent UpdateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for UpdateIncidentDataType.
const (
	UpdateIncidentDataTypeIncidents UpdateIncidentDataType = "incidents"
)

// Defines values for UpdateIncidentActionItemDataAttributesKind.
const (
	UpdateIncidentActionItemDataAttributesKindFollowUp UpdateIncidentActionItemDataAttributesKind = "follow_up"

	UpdateIncidentActionItemDataAttributesKindTask UpdateIncidentActionItemDataAttributesKind = "task"
)

// Defines values for UpdateIncidentActionItemDataAttributesPriority.
const (
	UpdateIncidentActionItemDataAttributesPriorityHigh UpdateIncidentActionItemDataAttributesPriority = "high"

	UpdateIncidentActionItemDataAttributesPriorityLow UpdateIncidentActionItemDataAttributesPriority = "low"

	UpdateIncidentActionItemDataAttributesPriorityMedium UpdateIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentActionItemDataAttributesStatus.
const (
	UpdateIncidentActionItemDataAttributesStatusCancelled UpdateIncidentActionItemDataAttributesStatus = "cancelled"

	UpdateIncidentActionItemDataAttributesStatusDone UpdateIncidentActionItemDataAttributesStatus = "done"

	UpdateIncidentActionItemDataAttributesStatusInProgress UpdateIncidentActionItemDataAttributesStatus = "in_progress"

	UpdateIncidentActionItemDataAttributesStatusOpen UpdateIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for UpdateIncidentActionItemDataType.
const (
	UpdateIncidentActionItemDataTypeIncidentActionItems UpdateIncidentActionItemDataType = "incident_action_items"
)

// Defines values for UpdateIncidentCustomFieldSelectionDataType.
const (
	UpdateIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections UpdateIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for UpdateIncidentEventDataAttributesVisibility.
const (
	UpdateIncidentEventDataAttributesVisibilityExternal UpdateIncidentEventDataAttributesVisibility = "external"

	UpdateIncidentEventDataAttributesVisibilityInternal UpdateIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for UpdateIncidentEventDataType.
const (
	UpdateIncidentEventDataTypeIncidentEvents UpdateIncidentEventDataType = "incident_events"
)

// Defines values for UpdateIncidentFeedbackDataAttributesRating.
const (
	UpdateIncidentFeedbackDataAttributesRatingN0 UpdateIncidentFeedbackDataAttributesRating = 0

	UpdateIncidentFeedbackDataAttributesRatingN1 UpdateIncidentFeedbackDataAttributesRating = 1

	UpdateIncidentFeedbackDataAttributesRatingN2 UpdateIncidentFeedbackDataAttributesRating = 2

	UpdateIncidentFeedbackDataAttributesRatingN3 UpdateIncidentFeedbackDataAttributesRating = 3

	UpdateIncidentFeedbackDataAttributesRatingN4 UpdateIncidentFeedbackDataAttributesRating = 4
)

// Defines values for UpdateIncidentFeedbackDataType.
const (
	UpdateIncidentFeedbackDataTypeIncidentFeedbacks UpdateIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for UpdateIncidentPostMortemDataAttributesStatus.
const (
	UpdateIncidentPostMortemDataAttributesStatusDraft UpdateIncidentPostMortemDataAttributesStatus = "draft"

	UpdateIncidentPostMortemDataAttributesStatusPublished UpdateIncidentPostMortemDataAttributesStatus = "published"
)

// Defines values for UpdateIncidentPostMortemDataType.
const (
	UpdateIncidentPostMortemDataTypeIncidentPostMortems UpdateIncidentPostMortemDataType = "incident_post_mortems"
)

// Defines values for UpdateIncidentRoleDataType.
const (
	UpdateIncidentRoleDataTypeIncidentRoles UpdateIncidentRoleDataType = "incident_roles"
)

// Defines values for UpdateIncidentRoleTaskDataAttributesPriority.
const (
	UpdateIncidentRoleTaskDataAttributesPriorityHigh UpdateIncidentRoleTaskDataAttributesPriority = "high"

	UpdateIncidentRoleTaskDataAttributesPriorityLow UpdateIncidentRoleTaskDataAttributesPriority = "low"

	UpdateIncidentRoleTaskDataAttributesPriorityMedium UpdateIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentRoleTaskDataType.
const (
	UpdateIncidentRoleTaskDataTypeIncidentRoleTasks UpdateIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for UpdateIncidentStatusPageEventDataAttributesStatus.
const (
	UpdateIncidentStatusPageEventDataAttributesStatusCompleted UpdateIncidentStatusPageEventDataAttributesStatus = "completed"

	UpdateIncidentStatusPageEventDataAttributesStatusIdentified UpdateIncidentStatusPageEventDataAttributesStatus = "identified"

	UpdateIncidentStatusPageEventDataAttributesStatusInProgress UpdateIncidentStatusPageEventDataAttributesStatus = "in_progress"

	UpdateIncidentStatusPageEventDataAttributesStatusInvestigating UpdateIncidentStatusPageEventDataAttributesStatus = "investigating"

	UpdateIncidentStatusPageEventDataAttributesStatusMonitoring UpdateIncidentStatusPageEventDataAttributesStatus = "monitoring"

	UpdateIncidentStatusPageEventDataAttributesStatusResolved UpdateIncidentStatusPageEventDataAttributesStatus = "resolved"

	UpdateIncidentStatusPageEventDataAttributesStatusScheduled UpdateIncidentStatusPageEventDataAttributesStatus = "scheduled"

	UpdateIncidentStatusPageEventDataAttributesStatusVerifying UpdateIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for UpdateIncidentStatusPageEventDataType.
const (
	UpdateIncidentStatusPageEventDataTypeIncidentStatusPageEvents UpdateIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for UpdateIncidentTaskParamsTaskType.
const (
	UpdateIncidentTaskParamsTaskTypeUpdateIncident UpdateIncidentTaskParamsTaskType = "update_incident"
)

// Defines values for UpdateIncidentTypeDataType.
const (
	UpdateIncidentTypeDataTypeIncidentTypes UpdateIncidentTypeDataType = "incident_types"
)

// Defines values for UpdateJiraIssueTaskParamsTaskType.
const (
	UpdateJiraIssueTaskParamsTaskTypeUpdateJiraIssue UpdateJiraIssueTaskParamsTaskType = "update_jira_issue"
)

// Defines values for UpdateLinearIssueTaskParamsTaskType.
const (
	UpdateLinearIssueTaskParamsTaskTypeUpdateLinearIssue UpdateLinearIssueTaskParamsTaskType = "update_linear_issue"
)

// Defines values for UpdatePlaybookDataType.
const (
	UpdatePlaybookDataTypePlaybooks UpdatePlaybookDataType = "playbooks"
)

// Defines values for UpdatePlaybookTaskDataType.
const (
	UpdatePlaybookTaskDataTypePlaybookTasks UpdatePlaybookTaskDataType = "playbook_tasks"
)

// Defines values for UpdatePostMortemTemplateDataType.
const (
	UpdatePostMortemTemplateDataTypePostMortemTemplates UpdatePostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for UpdatePulseDataType.
const (
	UpdatePulseDataTypePulses UpdatePulseDataType = "pulses"
)

// Defines values for UpdateServiceDataType.
const (
	UpdateServiceDataTypeServices UpdateServiceDataType = "services"
)

// Defines values for UpdateServiceNowIncidentTaskParamsTaskType.
const (
	UpdateServiceNowIncidentTaskParamsTaskTypeUpdateServiceNowIncident UpdateServiceNowIncidentTaskParamsTaskType = "update_service_now_incident"
)

// Defines values for UpdateSeverityDataAttributesSeverity.
const (
	UpdateSeverityDataAttributesSeverityCritical UpdateSeverityDataAttributesSeverity = "critical"

	UpdateSeverityDataAttributesSeverityHigh UpdateSeverityDataAttributesSeverity = "high"

	UpdateSeverityDataAttributesSeverityLow UpdateSeverityDataAttributesSeverity = "low"

	UpdateSeverityDataAttributesSeverityMedium UpdateSeverityDataAttributesSeverity = "medium"
)

// Defines values for UpdateSeverityDataType.
const (
	UpdateSeverityDataTypeSeverities UpdateSeverityDataType = "severities"
)

// Defines values for UpdateShortcutStoryTaskParamsTaskType.
const (
	UpdateShortcutStoryTaskParamsTaskTypeUpdateShortcutStory UpdateShortcutStoryTaskParamsTaskType = "update_shortcut_story"
)

// Defines values for UpdateShortcutTaskTaskParamsTaskType.
const (
	UpdateShortcutTaskTaskParamsTaskTypeUpdateShortcutTask UpdateShortcutTaskTaskParamsTaskType = "update_shortcut_task"
)

// Defines values for UpdateSlackChannelTopicTaskParamsTaskType.
const (
	UpdateSlackChannelTopicTaskParamsTaskTypeUpdateSlackChannelTopic UpdateSlackChannelTopicTaskParamsTaskType = "update_slack_channel_topic"
)

// Defines values for UpdateStatusPageDataAttributesShowUptimeLastDays.
const (
	UpdateStatusPageDataAttributesShowUptimeLastDaysN30 UpdateStatusPageDataAttributesShowUptimeLastDays = 30

	UpdateStatusPageDataAttributesShowUptimeLastDaysN60 UpdateStatusPageDataAttributesShowUptimeLastDays = 60

	UpdateStatusPageDataAttributesShowUptimeLastDaysN90 UpdateStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for UpdateStatusPageDataType.
const (
	UpdateStatusPageDataTypeStatusPages UpdateStatusPageDataType = "status_pages"
)

// Defines values for UpdateStatusTaskParamsStatus.
const (
	UpdateStatusTaskParamsStatusCancelled UpdateStatusTaskParamsStatus = "cancelled"

	UpdateStatusTaskParamsStatusMitigated UpdateStatusTaskParamsStatus = "mitigated"

	UpdateStatusTaskParamsStatusResolved UpdateStatusTaskParamsStatus = "resolved"

	UpdateStatusTaskParamsStatusStarted UpdateStatusTaskParamsStatus = "started"
)

// Defines values for UpdateStatusTaskParamsTaskType.
const (
	UpdateStatusTaskParamsTaskTypeUpdateStatus UpdateStatusTaskParamsTaskType = "update_status"
)

// Defines values for UpdateTeamDataType.
const (
	UpdateTeamDataTypeGroups UpdateTeamDataType = "groups"
)

// Defines values for UpdateTrelloCardTaskParamsTaskType.
const (
	UpdateTrelloCardTaskParamsTaskTypeUpdateTrelloCard UpdateTrelloCardTaskParamsTaskType = "update_trello_card"
)

// Defines values for UpdateWorkflowDataAttributesTriggers.
const (
	UpdateWorkflowDataAttributesTriggersEnvironmentsUpdated UpdateWorkflowDataAttributesTriggers = "environments_updated"

	UpdateWorkflowDataAttributesTriggersFunctionalitiesUpdated UpdateWorkflowDataAttributesTriggers = "functionalities_updated"

	UpdateWorkflowDataAttributesTriggersIncidentCreated UpdateWorkflowDataAttributesTriggers = "incident_created"

	UpdateWorkflowDataAttributesTriggersIncidentTypesUpdated UpdateWorkflowDataAttributesTriggers = "incident_types_updated"

	UpdateWorkflowDataAttributesTriggersIncidentUpdated UpdateWorkflowDataAttributesTriggers = "incident_updated"

	UpdateWorkflowDataAttributesTriggersRoleAssignmentsUpdated UpdateWorkflowDataAttributesTriggers = "role_assignments_updated"

	UpdateWorkflowDataAttributesTriggersServicesUpdated UpdateWorkflowDataAttributesTriggers = "services_updated"

	UpdateWorkflowDataAttributesTriggersSeverityUpdated UpdateWorkflowDataAttributesTriggers = "severity_updated"

	UpdateWorkflowDataAttributesTriggersSlackCommand UpdateWorkflowDataAttributesTriggers = "slack_command"

	UpdateWorkflowDataAttributesTriggersStatusUpdated UpdateWorkflowDataAttributesTriggers = "status_updated"

	UpdateWorkflowDataAttributesTriggersSummaryUpdated UpdateWorkflowDataAttributesTriggers = "summary_updated"

	UpdateWorkflowDataAttributesTriggersTeamsUpdated UpdateWorkflowDataAttributesTriggers = "teams_updated"

	UpdateWorkflowDataAttributesTriggersTimelineUpdated UpdateWorkflowDataAttributesTriggers = "timeline_updated"

	UpdateWorkflowDataAttributesTriggersTitleUpdated UpdateWorkflowDataAttributesTriggers = "title_updated"
)

// Defines values for UpdateWorkflowDataType.
const (
	UpdateWorkflowDataTypeWorkflows UpdateWorkflowDataType = "workflows"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataType.
const (
	UpdateWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections UpdateWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for UpdateWorkflowTaskDataType.
const (
	UpdateWorkflowTaskDataTypeWorkflowTasks UpdateWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for UpdateZendeskTicketTaskParamsTaskType.
const (
	UpdateZendeskTicketTaskParamsTaskTypeUpdateZendeskTicket UpdateZendeskTicketTaskParamsTaskType = "update_zendesk_ticket"
)

// Defines values for WorkflowTriggers.
const (
	WorkflowTriggersEnvironmentsUpdated WorkflowTriggers = "environments_updated"

	WorkflowTriggersFunctionalitiesUpdated WorkflowTriggers = "functionalities_updated"

	WorkflowTriggersIncidentCreated WorkflowTriggers = "incident_created"

	WorkflowTriggersIncidentTypesUpdated WorkflowTriggers = "incident_types_updated"

	WorkflowTriggersIncidentUpdated WorkflowTriggers = "incident_updated"

	WorkflowTriggersRoleAssignmentsUpdated WorkflowTriggers = "role_assignments_updated"

	WorkflowTriggersServicesUpdated WorkflowTriggers = "services_updated"

	WorkflowTriggersSeverityUpdated WorkflowTriggers = "severity_updated"

	WorkflowTriggersSlackCommand WorkflowTriggers = "slack_command"

	WorkflowTriggersStatusUpdated WorkflowTriggers = "status_updated"

	WorkflowTriggersSummaryUpdated WorkflowTriggers = "summary_updated"

	WorkflowTriggersTeamsUpdated WorkflowTriggers = "teams_updated"

	WorkflowTriggersTimelineUpdated WorkflowTriggers = "timeline_updated"

	WorkflowTriggersTitleUpdated WorkflowTriggers = "title_updated"
)

// Defines values for WorkflowCustomFieldSelectionIncidentCondition.
const (
	WorkflowCustomFieldSelectionIncidentConditionANY WorkflowCustomFieldSelectionIncidentCondition = "ANY"

	WorkflowCustomFieldSelectionIncidentConditionIS WorkflowCustomFieldSelectionIncidentCondition = "IS"

	WorkflowCustomFieldSelectionIncidentConditionNONE WorkflowCustomFieldSelectionIncidentCondition = "NONE"

	WorkflowCustomFieldSelectionIncidentConditionSET WorkflowCustomFieldSelectionIncidentCondition = "SET"

	WorkflowCustomFieldSelectionIncidentConditionUNSET WorkflowCustomFieldSelectionIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionListDataType.
const (
	WorkflowCustomFieldSelectionListDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionListDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowCustomFieldSelectionResponseDataType.
const (
	WorkflowCustomFieldSelectionResponseDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionResponseDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowListDataType.
const (
	WorkflowListDataTypeWorkflows WorkflowListDataType = "workflows"
)

// Defines values for WorkflowResponseDataType.
const (
	WorkflowResponseDataTypeWorkflows WorkflowResponseDataType = "workflows"
)

// Defines values for WorkflowTaskListDataType.
const (
	WorkflowTaskListDataTypeWorkflowTasks WorkflowTaskListDataType = "workflow_tasks"
)

// Defines values for WorkflowTaskResponseDataType.
const (
	WorkflowTaskResponseDataTypeWorkflowTasks WorkflowTaskResponseDataType = "workflow_tasks"
)

// ActionItemTriggerParams defines model for action_item_trigger_params.
type ActionItemTriggerParams struct {
	IncidentActionItemCondition         *ActionItemTriggerParamsIncidentActionItemCondition         `json:"incident_action_item_condition,omitempty"`
	IncidentActionItemConditionGroup    *ActionItemTriggerParamsIncidentActionItemConditionGroup    `json:"incident_action_item_condition_group,omitempty"`
	IncidentActionItemConditionKind     *ActionItemTriggerParamsIncidentActionItemConditionKind     `json:"incident_action_item_condition_kind,omitempty"`
	IncidentActionItemConditionPriority *ActionItemTriggerParamsIncidentActionItemConditionPriority `json:"incident_action_item_condition_priority,omitempty"`
	IncidentActionItemConditionStatus   *ActionItemTriggerParamsIncidentActionItemConditionStatus   `json:"incident_action_item_condition_status,omitempty"`
	IncidentActionItemKinds             *[]ActionItemTriggerParamsIncidentActionItemKinds           `json:"incident_action_item_kinds,omitempty"`
	IncidentActionItemPriorities        *[]ActionItemTriggerParamsIncidentActionItemPriorities      `json:"incident_action_item_priorities,omitempty"`
	IncidentActionItemStatuses          *[]ActionItemTriggerParamsIncidentActionItemStatuses        `json:"incident_action_item_statuses,omitempty"`
	IncidentCondition                   *ActionItemTriggerParamsIncidentCondition                   `json:"incident_condition,omitempty"`
	IncidentConditionEnvironment        *ActionItemTriggerParamsIncidentConditionEnvironment        `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality      *ActionItemTriggerParamsIncidentConditionFunctionality      `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup              *ActionItemTriggerParamsIncidentConditionGroup              `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentType       *ActionItemTriggerParamsIncidentConditionIncidentType       `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind               *ActionItemTriggerParamsIncidentConditionKind               `json:"incident_condition_kind,omitempty"`
	IncidentConditionService            *ActionItemTriggerParamsIncidentConditionService            `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity           *ActionItemTriggerParamsIncidentConditionSeverity           `json:"incident_condition_severity,omitempty"`
	IncidentConditionStatus             *ActionItemTriggerParamsIncidentConditionStatus             `json:"incident_condition_status,omitempty"`
	IncidentConditionVisibility         *ActionItemTriggerParamsIncidentConditionVisibility         `json:"incident_condition_visibility,omitempty"`
	IncidentKinds                       *[]ActionItemTriggerParamsIncidentKinds                     `json:"incident_kinds,omitempty"`
	IncidentStatuses                    *[]ActionItemTriggerParamsIncidentStatuses                  `json:"incident_statuses,omitempty"`
	IncidentVisibilities                *[]bool                                                     `json:"incident_visibilities,omitempty"`
	TriggerType                         ActionItemTriggerParamsTriggerType                          `json:"trigger_type"`
	Triggers                            *[]ActionItemTriggerParamsTriggers                          `json:"triggers,omitempty"`
}

// ActionItemTriggerParamsIncidentActionItemCondition defines model for ActionItemTriggerParams.IncidentActionItemCondition.
type ActionItemTriggerParamsIncidentActionItemCondition string

// ActionItemTriggerParamsIncidentActionItemConditionGroup defines model for ActionItemTriggerParams.IncidentActionItemConditionGroup.
type ActionItemTriggerParamsIncidentActionItemConditionGroup string

// ActionItemTriggerParamsIncidentActionItemConditionKind defines model for ActionItemTriggerParams.IncidentActionItemConditionKind.
type ActionItemTriggerParamsIncidentActionItemConditionKind string

// ActionItemTriggerParamsIncidentActionItemConditionPriority defines model for ActionItemTriggerParams.IncidentActionItemConditionPriority.
type ActionItemTriggerParamsIncidentActionItemConditionPriority string

// ActionItemTriggerParamsIncidentActionItemConditionStatus defines model for ActionItemTriggerParams.IncidentActionItemConditionStatus.
type ActionItemTriggerParamsIncidentActionItemConditionStatus string

// ActionItemTriggerParamsIncidentActionItemKinds defines model for ActionItemTriggerParams.IncidentActionItemKinds.
type ActionItemTriggerParamsIncidentActionItemKinds string

// ActionItemTriggerParamsIncidentActionItemPriorities defines model for ActionItemTriggerParams.IncidentActionItemPriorities.
type ActionItemTriggerParamsIncidentActionItemPriorities string

// ActionItemTriggerParamsIncidentActionItemStatuses defines model for ActionItemTriggerParams.IncidentActionItemStatuses.
type ActionItemTriggerParamsIncidentActionItemStatuses string

// ActionItemTriggerParamsIncidentCondition defines model for ActionItemTriggerParams.IncidentCondition.
type ActionItemTriggerParamsIncidentCondition string

// ActionItemTriggerParamsIncidentConditionEnvironment defines model for ActionItemTriggerParams.IncidentConditionEnvironment.
type ActionItemTriggerParamsIncidentConditionEnvironment string

// ActionItemTriggerParamsIncidentConditionFunctionality defines model for ActionItemTriggerParams.IncidentConditionFunctionality.
type ActionItemTriggerParamsIncidentConditionFunctionality string

// ActionItemTriggerParamsIncidentConditionGroup defines model for ActionItemTriggerParams.IncidentConditionGroup.
type ActionItemTriggerParamsIncidentConditionGroup string

// ActionItemTriggerParamsIncidentConditionIncidentType defines model for ActionItemTriggerParams.IncidentConditionIncidentType.
type ActionItemTriggerParamsIncidentConditionIncidentType string

// ActionItemTriggerParamsIncidentConditionKind defines model for ActionItemTriggerParams.IncidentConditionKind.
type ActionItemTriggerParamsIncidentConditionKind string

// ActionItemTriggerParamsIncidentConditionService defines model for ActionItemTriggerParams.IncidentConditionService.
type ActionItemTriggerParamsIncidentConditionService string

// ActionItemTriggerParamsIncidentConditionSeverity defines model for ActionItemTriggerParams.IncidentConditionSeverity.
type ActionItemTriggerParamsIncidentConditionSeverity string

// ActionItemTriggerParamsIncidentConditionStatus defines model for ActionItemTriggerParams.IncidentConditionStatus.
type ActionItemTriggerParamsIncidentConditionStatus string

// ActionItemTriggerParamsIncidentConditionVisibility defines model for ActionItemTriggerParams.IncidentConditionVisibility.
type ActionItemTriggerParamsIncidentConditionVisibility string

// ActionItemTriggerParamsIncidentKinds defines model for ActionItemTriggerParams.IncidentKinds.
type ActionItemTriggerParamsIncidentKinds string

// ActionItemTriggerParamsIncidentStatuses defines model for ActionItemTriggerParams.IncidentStatuses.
type ActionItemTriggerParamsIncidentStatuses string

// ActionItemTriggerParamsTriggerType defines model for ActionItemTriggerParams.TriggerType.
type ActionItemTriggerParamsTriggerType string

// Actions that trigger the workflow.
type ActionItemTriggerParamsTriggers string

// AddActionItemTaskParams defines model for add_action_item_task_params.
type AddActionItemTaskParams struct {
	// The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The action item description.
	Description            *string `json:"description,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The action item priority.
	Priority AddActionItemTaskParamsPriority `json:"priority"`

	// The action item status.
	Status AddActionItemTaskParamsStatus `json:"status"`

	// The action item summary.
	Summary  string                           `json:"summary"`
	TaskType *AddActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// The action item priority.
type AddActionItemTaskParamsPriority string

// The action item status.
type AddActionItemTaskParamsStatus string

// AddActionItemTaskParamsTaskType defines model for AddActionItemTaskParams.TaskType.
type AddActionItemTaskParamsTaskType string

// AddRoleTaskParams defines model for add_role_task_params.
type AddRoleTaskParams struct {
	// The user id this role is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The role id to add to the incident
	IncidentRoleId string                     `json:"incident_role_id"`
	TaskType       *AddRoleTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddRoleTaskParamsTaskType defines model for AddRoleTaskParams.TaskType.
type AddRoleTaskParamsTaskType string

// AddSlackBookmarkTaskParams defines model for add_slack_bookmark_task_params.
type AddSlackBookmarkTaskParams interface{}

// AddTeamTaskParams defines model for add_team_task_params.
type AddTeamTaskParams struct {
	// The team id.
	GroupId  string                     `json:"group_id"`
	TaskType *AddTeamTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddTeamTaskParamsTaskType defines model for AddTeamTaskParams.TaskType.
type AddTeamTaskParamsTaskType string

// AddToTimelineTaskParams defines model for add_to_timeline_task_params.
type AddToTimelineTaskParams struct {
	// The timeline event description.
	Event               string `json:"event"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AddToTimelineTaskParamsTaskType `json:"task_type,omitempty"`

	// A URL for the timeline event.
	Url *string `json:"url,omitempty"`
}

// AddToTimelineTaskParamsTaskType defines model for AddToTimelineTaskParams.TaskType.
type AddToTimelineTaskParamsTaskType string

// Alert defines model for alert.
type Alert struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert (eg: zendesk)
	Source AlertSource `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The source of the alert (eg: zendesk)
type AlertSource string

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *AlertListDataSource `json:"source,omitempty"`
		Type   AlertListDataType    `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// The source of the alert (eg: zendesk)
type AlertListDataSource string

// AlertListDataType defines model for AlertList.Data.Type.
type AlertListDataType string

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *AlertResponseDataSource `json:"source,omitempty"`
		Type   AlertResponseDataType    `json:"type"`
	} `json:"data"`
}

// The source of the alert (eg: zendesk)
type AlertResponseDataSource string

// AlertResponseDataType defines model for AlertResponse.Data.Type.
type AlertResponseDataType string

// AlertTriggerParams defines model for alert_trigger_params.
type AlertTriggerParams struct {
	AlertCondition       *AlertTriggerParamsAlertCondition       `json:"alert_condition,omitempty"`
	AlertConditionLabel  *AlertTriggerParamsAlertConditionLabel  `json:"alert_condition_label,omitempty"`
	AlertConditionSource *AlertTriggerParamsAlertConditionSource `json:"alert_condition_source,omitempty"`
	TriggerType          AlertTriggerParamsTriggerType           `json:"trigger_type"`
	Triggers             *[]AlertTriggerParamsTriggers           `json:"triggers,omitempty"`
}

// AlertTriggerParamsAlertCondition defines model for AlertTriggerParams.AlertCondition.
type AlertTriggerParamsAlertCondition string

// AlertTriggerParamsAlertConditionLabel defines model for AlertTriggerParams.AlertConditionLabel.
type AlertTriggerParamsAlertConditionLabel string

// AlertTriggerParamsAlertConditionSource defines model for AlertTriggerParams.AlertConditionSource.
type AlertTriggerParamsAlertConditionSource string

// AlertTriggerParamsTriggerType defines model for AlertTriggerParams.TriggerType.
type AlertTriggerParamsTriggerType string

// Actions that trigger the workflow.
type AlertTriggerParamsTriggers string

// ArchiveSlackChannelsTaskParams defines model for archive_slack_channels_task_params.
type ArchiveSlackChannelsTaskParams struct {
	Channels []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels"`
	TaskType *ArchiveSlackChannelsTaskParamsTaskType `json:"task_type,omitempty"`
}

// ArchiveSlackChannelsTaskParamsTaskType defines model for ArchiveSlackChannelsTaskParams.TaskType.
type ArchiveSlackChannelsTaskParamsTaskType string

// AttachDatadogDashboardsTaskParams defines model for attach_datadog_dashboards_task_params.
type AttachDatadogDashboardsTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AttachDatadogDashboardsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AttachDatadogDashboardsTaskParamsTaskType defines model for AttachDatadogDashboardsTaskParams.TaskType.
type AttachDatadogDashboardsTaskParamsTaskType string

// AutoAssignRoleOpsgenieTaskParams defines model for auto_assign_role_opsgenie_task_params.
type AutoAssignRoleOpsgenieTaskParams struct {
	// The role id.
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleOpsgenieTaskParamsTaskType defines model for AutoAssignRoleOpsgenieTaskParams.TaskType.
type AutoAssignRoleOpsgenieTaskParamsTaskType string

// AutoAssignRolePagerdutyTaskParams defines model for auto_assign_role_pagerduty_task_params.
type AutoAssignRolePagerdutyTaskParams interface{}

// AutoAssignRoleVictorOpsTaskParams defines model for auto_assign_role_victor_ops_task_params.
type AutoAssignRoleVictorOpsTaskParams struct {
	// The role id.
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleVictorOpsTaskParamsTaskType defines model for AutoAssignRoleVictorOpsTaskParams.TaskType.
type AutoAssignRoleVictorOpsTaskParamsTaskType string

// CallPeopleTaskParams defines model for call_people_task_params.
type CallPeopleTaskParams struct {
	// The message to be read by text-to-voice
	Content string `json:"content"`

	// The name
	Name         string                        `json:"name"`
	PhoneNumbers []string                      `json:"phone_numbers"`
	TaskType     *CallPeopleTaskParamsTaskType `json:"task_type,omitempty"`
}

// CallPeopleTaskParamsTaskType defines model for CallPeopleTaskParams.TaskType.
type CallPeopleTaskParamsTaskType string

// CancelIncident defines model for cancel_incident.
type CancelIncident struct {
	Data struct {
		Attributes struct {
			// Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`
		} `json:"attributes"`
		Type CancelIncidentDataType `json:"type"`
	} `json:"data"`
}

// CancelIncidentDataType defines model for CancelIncident.Data.Type.
type CancelIncidentDataType string

// Cause defines model for cause.
type Cause struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// The slug of the cause
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string            `json:"id"`
		Type CauseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseListDataType defines model for CauseList.Data.Type.
type CauseListDataType string

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string                `json:"id"`
		Type CauseResponseDataType `json:"type"`
	} `json:"data"`
}

// CauseResponseDataType defines model for CauseResponse.Data.Type.
type CauseResponseDataType string

// CreateAirtableTableRecordTaskParams defines model for create_airtable_table_record_task_params.
type CreateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings JSON.
	CustomFieldsMapping *map[string]interface{} `json:"custom_fields_mapping,omitempty"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *CreateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateAirtableTableRecordTaskParamsTaskType defines model for CreateAirtableTableRecordTaskParams.TaskType.
type CreateAirtableTableRecordTaskParamsTaskType string

// CreateAsanaSubtaskTaskParams defines model for create_asana_subtask_task_params.
type CreateAsanaSubtaskTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The parent task id
	ParentTaskId string                                `json:"parent_task_id"`
	TaskType     *CreateAsanaSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The subtask title
	Title string `json:"title"`
}

// CreateAsanaSubtaskTaskParamsTaskType defines model for CreateAsanaSubtaskTaskParams.TaskType.
type CreateAsanaSubtaskTaskParamsTaskType string

// CreateAsanaTaskTaskParams defines model for create_asana_task_task_params.
type CreateAsanaTaskTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`
	Projects []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"projects"`
	TaskType *CreateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateAsanaTaskTaskParamsTaskType defines model for CreateAsanaTaskTaskParams.TaskType.
type CreateAsanaTaskTaskParamsTaskType string

// CreateConfluencePageTaskParams defines model for create_confluence_page_task_params.
type CreateConfluencePageTaskParams struct {
	Ancestor *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"ancestor,omitempty"`
	Space struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"space"`
	TaskType *CreateConfluencePageTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title string `json:"title"`
}

// CreateConfluencePageTaskParamsTaskType defines model for CreateConfluencePageTaskParams.TaskType.
type CreateConfluencePageTaskParamsTaskType string

// CreateDatadogNotebookTaskParams defines model for create_datadog_notebook_task_params.
type CreateDatadogNotebookTaskParams struct {
	// The notebook kind
	Kind CreateDatadogNotebookTaskParamsKind `json:"kind"`

	// Post mortem template to use when creating notebook, if desired.
	PostMortemTemplateId *string                                  `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDatadogNotebookTaskParamsTaskType `json:"task_type,omitempty"`

	// The notebook title
	Title string `json:"title"`
}

// The notebook kind
type CreateDatadogNotebookTaskParamsKind string

// CreateDatadogNotebookTaskParamsTaskType defines model for CreateDatadogNotebookTaskParams.TaskType.
type CreateDatadogNotebookTaskParamsTaskType string

// CreateDropboxPaperPageTaskParams defines model for create_dropbox_paper_page_task_params.
type CreateDropboxPaperPageTaskParams struct {
	Namespace *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Post mortem template to use when creating page task, if desired.
	PostMortemTemplateId *string                                   `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDropboxPaperPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page task title
	Title string `json:"title"`
}

// CreateDropboxPaperPageTaskParamsTaskType defines model for CreateDropboxPaperPageTaskParams.TaskType.
type CreateDropboxPaperPageTaskParamsTaskType string

// CreateGithubIssueTaskParams defines model for create_github_issue_task_params.
type CreateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Repository struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"repository"`
	TaskType *CreateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`
}

// CreateGithubIssueTaskParamsTaskType defines model for CreateGithubIssueTaskParams.TaskType.
type CreateGithubIssueTaskParamsTaskType string

// CreateGoogleCalendarEventTaskParams defines model for create_google_calendar_event_task_params.
type CreateGoogleCalendarEventTaskParams struct {
	// Emails of attendees
	Attendees               []string `json:"attendees"`
	CanGuestsInviteOthers   *bool    `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool    `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool    `json:"can_guests_see_other_guests,omitempty"`

	// The days until meeting
	DaysUntilMeeting float32 `json:"days_until_meeting"`

	// The event description
	Description     string `json:"description"`
	ExcludeWeekends *bool  `json:"exclude_weekends,omitempty"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        string `json:"meeting_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  string                                       `json:"summary"`
	TaskType *CreateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting string  `json:"time_of_meeting"`
	TimeZone      *string `json:"time_zone"`
}

// CreateGoogleCalendarEventTaskParamsTaskType defines model for CreateGoogleCalendarEventTaskParams.TaskType.
type CreateGoogleCalendarEventTaskParamsTaskType string

// CreateGoogleDocsPageTaskParams defines model for create_google_docs_page_task_params.
type CreateGoogleDocsPageTaskParams struct {
	// The page content
	Content *string `json:"content,omitempty"`
	Drive   *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"drive,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Page permissions JSON.
	Permissions *string `json:"permissions,omitempty"`

	// Post mortem template to use when creating page, if desired.
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateGoogleDocsPageTaskParamsTaskType defines model for CreateGoogleDocsPageTaskParams.TaskType.
type CreateGoogleDocsPageTaskParamsTaskType string

// CreateGoogleMeetingTaskParams defines model for create_google_meeting_task_params.
type CreateGoogleMeetingTaskParams struct {
	// The meeting description
	Description            string `json:"description"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting summary
	Summary  string                                 `json:"summary"`
	TaskType *CreateGoogleMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoogleMeetingTaskParamsTaskType defines model for CreateGoogleMeetingTaskParams.TaskType.
type CreateGoogleMeetingTaskParamsTaskType string

// CreateIncidentTaskParams defines model for create_incident_task_params.
type CreateIncidentTaskParams struct {
	EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
	GroupIds         *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`
	Private          *bool     `json:"private,omitempty"`
	ServiceIds       *[]string `json:"service_ids,omitempty"`
	SeverityId       *string   `json:"severity_id,omitempty"`

	// The incident summary
	Summary  *string                           `json:"summary,omitempty"`
	TaskType *CreateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateIncidentTaskParamsTaskType defines model for CreateIncidentTaskParams.TaskType.
type CreateIncidentTaskParamsTaskType string

// CreateJiraIssueSubtaskTaskParams defines model for create_jira_issue_subtask_task_params.
type CreateJiraIssueSubtaskTaskParams struct {
	// The assigned user's email.
	AssignUserEmail     *string                 `json:"assign_user_email,omitempty"`
	CustomFieldsMapping *map[string]interface{} `json:"custom_fields_mapping,omitempty"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The parent issue.
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`

	// The issue type id and display name.
	SubtaskIssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"subtask_issue_type"`
	TaskType *CreateJiraIssueSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateJiraIssueSubtaskTaskParamsTaskType defines model for CreateJiraIssueSubtaskTaskParams.TaskType.
type CreateJiraIssueSubtaskTaskParamsTaskType string

// CreateJiraIssueTaskParams defines model for create_jira_issue_task_params.
type CreateJiraIssueTaskParams struct {
	// The assigned user's email.
	AssignUserEmail     *string                 `json:"assign_user_email,omitempty"`
	CustomFieldsMapping *map[string]interface{} `json:"custom_fields_mapping,omitempty"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue type id and display name.
	IssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issue_type"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *CreateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateJiraIssueTaskParamsTaskType defines model for CreateJiraIssueTaskParams.TaskType.
type CreateJiraIssueTaskParamsTaskType string

// CreateLinearIssueTaskParams defines model for create_linear_issue_task_params.
type CreateLinearIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The team id and display name.
	Team struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// The issue title.
	Title string `json:"title"`
}

// CreateLinearIssueTaskParamsTaskType defines model for CreateLinearIssueTaskParams.TaskType.
type CreateLinearIssueTaskParamsTaskType string

// CreateLinearSubtaskIssueTaskParams defines model for create_linear_subtask_issue_task_params.
type CreateLinearSubtaskIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The parent issue.
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearSubtaskIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The team id and display name.
	Team struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// The issue title.
	Title string `json:"title"`
}

// CreateLinearSubtaskIssueTaskParamsTaskType defines model for CreateLinearSubtaskIssueTaskParams.TaskType.
type CreateLinearSubtaskIssueTaskParamsTaskType string

// CreateMicrosoftTeamsMeetingTaskParams defines model for create_microsoft_teams_meeting_task_params.
type CreateMicrosoftTeamsMeetingTaskParams struct {
	// The meeting name
	Name                   string `json:"name"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting subject
	Subject  string                                         `json:"subject"`
	TaskType *CreateMicrosoftTeamsMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateMicrosoftTeamsMeetingTaskParamsTaskType defines model for CreateMicrosoftTeamsMeetingTaskParams.TaskType.
type CreateMicrosoftTeamsMeetingTaskParamsTaskType string

// CreateNotionPageTaskParams defines model for create_notion_page_task_params.
type CreateNotionPageTaskParams struct {
	// The parent page id and display name.
	ParentPage struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_page"`

	// Post mortem template to use when creating page task, if desired.
	PostMortemTemplateId *string                             `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateNotionPageTaskParamsTaskType defines model for CreateNotionPageTaskParams.TaskType.
type CreateNotionPageTaskParamsTaskType string

// CreateServiceNowIncidentTaskParams defines model for create_service_now_incident_task_params.
type CreateServiceNowIncidentTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *CreateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateServiceNowIncidentTaskParamsTaskType defines model for CreateServiceNowIncidentTaskParams.TaskType.
type CreateServiceNowIncidentTaskParamsTaskType string

// CreateShortcutStoryTaskParams defines model for create_shortcut_story_task_params.
type CreateShortcutStoryTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The story due date (ISO8601 format).
	DueDate *string                           `json:"due_date,omitempty"`
	Kind    CreateShortcutStoryTaskParamsKind `json:"kind"`

	// The story labels.
	Labels *string `json:"labels,omitempty"`

	// The project id and display name.
	Project struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project"`
	TaskType *CreateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateShortcutStoryTaskParamsKind defines model for CreateShortcutStoryTaskParams.Kind.
type CreateShortcutStoryTaskParamsKind string

// CreateShortcutStoryTaskParamsTaskType defines model for CreateShortcutStoryTaskParams.TaskType.
type CreateShortcutStoryTaskParamsTaskType string

// CreateShortcutTaskTaskParams defines model for create_shortcut_task_task_params.
type CreateShortcutTaskTaskParams struct {
	// The completion id and display name.
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description string `json:"description"`

	// The parent story
	ParentStoryId string                                `json:"parent_story_id"`
	TaskType      *CreateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateShortcutTaskTaskParamsTaskType defines model for CreateShortcutTaskTaskParams.TaskType.
type CreateShortcutTaskTaskParamsTaskType string

// CreateTrelloCardTaskParams defines model for create_trello_card_task_params.
type CreateTrelloCardTaskParams struct {
	// The archivation id and display name.
	Archivation *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation,omitempty"`

	// The board id and display name.
	Board struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date (ISO8601 format)
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name.
	List struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list"`
	TaskType *CreateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title string `json:"title"`
}

// CreateTrelloCardTaskParamsTaskType defines model for CreateTrelloCardTaskParams.TaskType.
type CreateTrelloCardTaskParamsTaskType string

// CreateWebexMeetingTaskParams defines model for create_webex_meeting_task_params.
type CreateWebexMeetingTaskParams struct {
	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateWebexMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateWebexMeetingTaskParamsTaskType defines model for CreateWebexMeetingTaskParams.TaskType.
type CreateWebexMeetingTaskParamsTaskType string

// CreateZendeskTicketTaskParams defines model for create_zendesk_ticket_task_params.
type CreateZendeskTicketTaskParams struct {
	// The ticket comment.
	Comment *string `json:"comment,omitempty"`

	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`
	Kind CreateZendeskTicketTaskParamsKind `json:"kind"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject.
	Subject string `json:"subject"`

	// The ticket tags.
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *CreateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateZendeskTicketTaskParamsKind defines model for CreateZendeskTicketTaskParams.Kind.
type CreateZendeskTicketTaskParamsKind string

// CreateZendeskTicketTaskParamsTaskType defines model for CreateZendeskTicketTaskParams.TaskType.
type CreateZendeskTicketTaskParamsTaskType string

// CreateZoomMeetingTaskParams defines model for create_zoom_meeting_task_params.
type CreateZoomMeetingTaskParams struct {
	AutoRecording *CreateZoomMeetingTaskParamsAutoRecording `json:"auto_recording,omitempty"`

	// The email to use if creating as email.
	CreateAsEmail *string `json:"create_as_email,omitempty"`

	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateZoomMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateZoomMeetingTaskParamsAutoRecording defines model for CreateZoomMeetingTaskParams.AutoRecording.
type CreateZoomMeetingTaskParamsAutoRecording string

// CreateZoomMeetingTaskParamsTaskType defines model for CreateZoomMeetingTaskParams.TaskType.
type CreateZoomMeetingTaskParamsTaskType string

// CustomField defines model for custom_field.
type CustomField struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the custom_field
	Description *string `json:"description"`

	// The name of the custom_field
	Label string `json:"label"`

	// The position of the custom_field
	Position float32                `json:"position"`
	Required *[]CustomFieldRequired `json:"required"`
	Shown    []CustomFieldShown     `json:"shown"`

	// The slug of the custom_field
	Slug string `json:"slug"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Where the custom_field is required
type CustomFieldRequired string

// Where the custom_field is shown
type CustomFieldShown string

// CustomFieldList defines model for custom_field_list.
type CustomFieldList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field)
			CustomField `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                  `json:"id"`
		Type CustomFieldListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CustomFieldListDataType defines model for CustomFieldList.Data.Type.
type CustomFieldListDataType string

// CustomFieldOption defines model for custom_field_option.
type CustomFieldOption struct {
	// The hex color of the custom_field_option
	Color string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The position of the custom_field_option
	Position float32 `json:"position"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The value of the custom_field_option
	Value string `json:"value"`
}

// CustomFieldOptionList defines model for custom_field_option_list.
type CustomFieldOptionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field_option)
			CustomFieldOption `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                        `json:"id"`
		Type CustomFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CustomFieldOptionListDataType defines model for CustomFieldOptionList.Data.Type.
type CustomFieldOptionListDataType string

// CustomFieldOptionResponse defines model for custom_field_option_response.
type CustomFieldOptionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field_option)
			CustomFieldOption `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                            `json:"id"`
		Type CustomFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldOptionResponseDataType defines model for CustomFieldOptionResponse.Data.Type.
type CustomFieldOptionResponseDataType string

// CustomFieldResponse defines model for custom_field_response.
type CustomFieldResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field)
			CustomField `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                      `json:"id"`
		Type CustomFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldResponseDataType defines model for CustomFieldResponse.Data.Type.
type CustomFieldResponseDataType string

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// The slug of the environment
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                  `json:"id"`
		Type EnvironmentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentListDataType defines model for EnvironmentList.Data.Type.
type EnvironmentListDataType string

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                      `json:"id"`
		Type EnvironmentResponseDataType `json:"type"`
	} `json:"data"`
}

// EnvironmentResponseDataType defines model for EnvironmentResponse.Data.Type.
type EnvironmentResponseDataType string

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// Environments associated with this service
	EnvironmentIds *[]interface{} `json:"environment_ids"`

	// The name of the functionality
	Name string `json:"name"`

	// Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// The public description of the functionality
	PublicDescription *string `json:"public_description"`

	// The slug of the functionality
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                    `json:"id"`
		Type FunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityListDataType defines model for FunctionalityList.Data.Type.
type FunctionalityListDataType string

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                        `json:"id"`
		Type FunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// FunctionalityResponseDataType defines model for FunctionalityResponse.Data.Type.
type FunctionalityResponseDataType string

// GetGithubCommitsTaskParams defines model for get_github_commits_task_params.
type GetGithubCommitsTaskParams interface{}

// GetGitlabCommitsTaskParams defines model for get_gitlab_commits_task_params.
type GetGitlabCommitsTaskParams interface{}

// GetPulsesTaskParams defines model for get_pulses_task_params.
type GetPulsesTaskParams struct {
	EnvironmentIds *[]string `json:"environment_ids,omitempty"`
	Labels         *[]string `json:"labels,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration        string `json:"past_duration"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Refs       *[]string                    `json:"refs,omitempty"`
	ServiceIds *[]string                    `json:"service_ids,omitempty"`
	Sources    *[]string                    `json:"sources,omitempty"`
	TaskType   *GetPulsesTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetPulsesTaskParamsTaskType defines model for GetPulsesTaskParams.TaskType.
type GetPulsesTaskParamsTaskType string

// HttpClientTaskParams defines model for http_client_task_params.
type HttpClientTaskParams struct {
	// HTTP body.
	Body     *string `json:"body,omitempty"`
	EventUrl *string `json:"event_url,omitempty"`

	// JSON map of HTTP headers.
	Headers *string `json:"headers,omitempty"`

	// HTTP method.
	Method *HttpClientTaskParamsMethod `json:"method,omitempty"`

	// JSON map of HTTP query parameters.
	Params              *string `json:"params,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// HTTP status code.
	SucceedOnStatus string                        `json:"succeed_on_status"`
	TaskType        *HttpClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url             *string                       `json:"url,omitempty"`
}

// HTTP method.
type HttpClientTaskParamsMethod string

// HttpClientTaskParamsTaskType defines model for HttpClientTaskParams.TaskType.
type HttpClientTaskParamsTaskType string

// Incident defines model for incident.
type Incident struct {
	// Date of acknowledgment
	AcknowledgedAt *string `json:"acknowledged_at"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of detection
	DetectedAt *string `json:"detected_at"`

	// The Environment ID's to attach to the incident
	EnvironmentIds *[]string `json:"environment_ids"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// The Environment ID's to attach to the incident
	IncidentTypesIds *[]string `json:"incident_types_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// Date of start
	StartedAt *string `json:"started_at"`

	// The summary of the incident
	Summary *string `json:"summary"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The kind of the incident action item
	Kind *IncidentActionItemKind `json:"kind,omitempty"`

	// The priority of the incident action item
	Priority *IncidentActionItemPriority `json:"priority,omitempty"`

	// The status of incident the action item
	Status *IncidentActionItemStatus `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The kind of the incident action item
type IncidentActionItemKind string

// The priority of the incident action item
type IncidentActionItemPriority string

// The status of incident the action item
type IncidentActionItemStatus string

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                         `json:"id"`
		Type IncidentActionItemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemListDataType defines model for IncidentActionItemList.Data.Type.
type IncidentActionItemListDataType string

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                             `json:"id"`
		Type IncidentActionItemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentActionItemResponseDataType defines model for IncidentActionItemResponse.Data.Type.
type IncidentActionItemResponseDataType string

// IncidentCustomFieldSelection defines model for incident_custom_field_selection.
type IncidentCustomFieldSelection struct {
	SelectedOptionIds []float32 `json:"selected_option_ids"`

	// The value of the incident_custom_field_selection
	Value *string `json:"value"`
}

// IncidentCustomFieldSelectionList defines model for incident_custom_field_selection_list.
type IncidentCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_custom_field_selection)
			IncidentCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                   `json:"id"`
		Type IncidentCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentCustomFieldSelectionListDataType defines model for IncidentCustomFieldSelectionList.Data.Type.
type IncidentCustomFieldSelectionListDataType string

// IncidentCustomFieldSelectionResponse defines model for incident_custom_field_selection_response.
type IncidentCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_custom_field_selection)
			IncidentCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                       `json:"id"`
		Type IncidentCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentCustomFieldSelectionResponseDataType defines model for IncidentCustomFieldSelectionResponse.Data.Type.
type IncidentCustomFieldSelectionResponseDataType string

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of occurence
	OccurredAt string `json:"occurred_at"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *IncidentEventVisibility `json:"visibility,omitempty"`
}

// The visibility of the incident action item
type IncidentEventVisibility string

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                    `json:"id"`
		Type IncidentEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventListDataType defines model for IncidentEventList.Data.Type.
type IncidentEventListDataType string

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                        `json:"id"`
		Type IncidentEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventResponseDataType defines model for IncidentEventResponse.Data.Type.
type IncidentEventResponseDataType string

// IncidentFeedback defines model for incident_feedback.
type IncidentFeedback struct {
	// Is the feedback anonymous?
	Anonymous bool `json:"anonymous"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The feedback of the incident feedback
	Feedback string `json:"feedback"`

	// The rating of the incident feedback
	Rating IncidentFeedbackRating `json:"rating"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The rating of the incident feedback
type IncidentFeedbackRating int

// IncidentFeedbackList defines model for incident_feedback_list.
type IncidentFeedbackList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_feedback)
			IncidentFeedback `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                       `json:"id"`
		Type IncidentFeedbackListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentFeedbackListDataType defines model for IncidentFeedbackList.Data.Type.
type IncidentFeedbackListDataType string

// IncidentFeedbackResponse defines model for incident_feedback_response.
type IncidentFeedbackResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_feedback)
			IncidentFeedback `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                           `json:"id"`
		Type IncidentFeedbackResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentFeedbackResponseDataType defines model for IncidentFeedbackResponse.Data.Type.
type IncidentFeedbackResponseDataType string

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string               `json:"id"`
		Type IncidentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentListDataType defines model for IncidentList.Data.Type.
type IncidentListDataType string

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {
	// The content of the incident postmortem (Only if internal)
	Content *string `json:"content"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show workflow events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *IncidentPostMortemStatus `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The url to the incident postmortem
	Url *string `json:"url,omitempty"`
}

// The status of the incident postmortem
type IncidentPostMortemStatus string

// IncidentPostMortemList defines model for incident_post_mortem_list.
type IncidentPostMortemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                         `json:"id"`
		Type IncidentPostMortemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortemListDataType defines model for IncidentPostMortemList.Data.Type.
type IncidentPostMortemListDataType string

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                             `json:"id"`
		Type IncidentPostMortemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPostMortemResponseDataType defines model for IncidentPostMortemResponse.Data.Type.
type IncidentPostMortemResponseDataType string

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string                   `json:"id"`
		Type IncidentResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentResponseDataType defines model for IncidentResponse.Data.Type.
type IncidentResponseDataType string

// IncidentRole defines model for incident_role.
type IncidentRole struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The slug of the incident role
	Slug *string `json:"slug,omitempty"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                   `json:"id"`
		Type IncidentRoleListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleListDataType defines model for IncidentRoleList.Data.Type.
type IncidentRoleListDataType string

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                       `json:"id"`
		Type IncidentRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleResponseDataType defines model for IncidentRoleResponse.Data.Type.
type IncidentRoleResponseDataType string

// IncidentRoleTask defines model for incident_role_task.
type IncidentRoleTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The priority of the incident task
	Priority *IncidentRoleTaskPriority `json:"priority,omitempty"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The priority of the incident task
type IncidentRoleTaskPriority string

// IncidentRoleTaskList defines model for incident_role_task_list.
type IncidentRoleTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role_task)
			IncidentRoleTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type IncidentRoleTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleTaskListDataType defines model for IncidentRoleTaskList.Data.Type.
type IncidentRoleTaskListDataType string

// IncidentRoleTaskResponse defines model for incident_role_task_response.
type IncidentRoleTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role_task)
			IncidentRoleTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                           `json:"id"`
		Type IncidentRoleTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleTaskResponseDataType defines model for IncidentRoleTaskResponse.Data.Type.
type IncidentRoleTaskResponseDataType string

// IncidentStatusPageEvent defines model for incident_status_page_event.
type IncidentStatusPageEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Notify all status pages subscribers
	NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

	// Date of start
	StartedAt string `json:"started_at"`

	// The status of the incident event
	Status *IncidentStatusPageEventStatus `json:"status,omitempty"`

	// The status page ids to post the event
	StatusPageIds *[]string `json:"status_page_ids,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the incident event
type IncidentStatusPageEventStatus string

// IncidentStatusPageEventList defines model for incident_status_page_event_list.
type IncidentStatusPageEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_status_page_event)
			IncidentStatusPageEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                              `json:"id"`
		Type IncidentStatusPageEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentStatusPageEventListDataType defines model for IncidentStatusPageEventList.Data.Type.
type IncidentStatusPageEventListDataType string

// IncidentStatusPageEventResponse defines model for incident_status_page_event_response.
type IncidentStatusPageEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_status_page_event)
			IncidentStatusPageEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                                  `json:"id"`
		Type IncidentStatusPageEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentStatusPageEventResponseDataType defines model for IncidentStatusPageEventResponse.Data.Type.
type IncidentStatusPageEventResponseDataType string

// IncidentTriggerParams defines model for incident_trigger_params.
type IncidentTriggerParams struct {
	IncidentCondition               *IncidentTriggerParamsIncidentCondition              `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt *interface{}                                         `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionDetectedAt     *interface{}                                         `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment    *IncidentTriggerParamsIncidentConditionEnvironment   `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality  *IncidentTriggerParamsIncidentConditionFunctionality `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup          *IncidentTriggerParamsIncidentConditionGroup         `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles  *interface{}                                         `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType   *IncidentTriggerParamsIncidentConditionIncidentType  `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind           *IncidentTriggerParamsIncidentConditionKind          `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt    *interface{}                                         `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt     *interface{}                                         `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService        *IncidentTriggerParamsIncidentConditionService       `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity       *IncidentTriggerParamsIncidentConditionSeverity      `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt      *interface{}                                         `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus         *IncidentTriggerParamsIncidentConditionStatus        `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary        *interface{}                                         `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility     *IncidentTriggerParamsIncidentConditionVisibility    `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity   *interface{}                                         `json:"incident_conditional_inactivity,omitempty"`
	IncidentKinds                   *[]IncidentTriggerParamsIncidentKinds                `json:"incident_kinds,omitempty"`
	IncidentStatuses                *[]IncidentTriggerParamsIncidentStatuses             `json:"incident_statuses,omitempty"`
	IncidentVisibilities            *[]bool                                              `json:"incident_visibilities,omitempty"`
	TriggerType                     IncidentTriggerParamsTriggerType                     `json:"trigger_type"`
	Triggers                        *[]IncidentTriggerParamsTriggers                     `json:"triggers,omitempty"`
}

// IncidentTriggerParamsIncidentCondition defines model for IncidentTriggerParams.IncidentCondition.
type IncidentTriggerParamsIncidentCondition string

// IncidentTriggerParamsIncidentConditionEnvironment defines model for IncidentTriggerParams.IncidentConditionEnvironment.
type IncidentTriggerParamsIncidentConditionEnvironment string

// IncidentTriggerParamsIncidentConditionFunctionality defines model for IncidentTriggerParams.IncidentConditionFunctionality.
type IncidentTriggerParamsIncidentConditionFunctionality string

// IncidentTriggerParamsIncidentConditionGroup defines model for IncidentTriggerParams.IncidentConditionGroup.
type IncidentTriggerParamsIncidentConditionGroup string

// IncidentTriggerParamsIncidentConditionIncidentType defines model for IncidentTriggerParams.IncidentConditionIncidentType.
type IncidentTriggerParamsIncidentConditionIncidentType string

// IncidentTriggerParamsIncidentConditionKind defines model for IncidentTriggerParams.IncidentConditionKind.
type IncidentTriggerParamsIncidentConditionKind string

// IncidentTriggerParamsIncidentConditionService defines model for IncidentTriggerParams.IncidentConditionService.
type IncidentTriggerParamsIncidentConditionService string

// IncidentTriggerParamsIncidentConditionSeverity defines model for IncidentTriggerParams.IncidentConditionSeverity.
type IncidentTriggerParamsIncidentConditionSeverity string

// IncidentTriggerParamsIncidentConditionStatus defines model for IncidentTriggerParams.IncidentConditionStatus.
type IncidentTriggerParamsIncidentConditionStatus string

// IncidentTriggerParamsIncidentConditionVisibility defines model for IncidentTriggerParams.IncidentConditionVisibility.
type IncidentTriggerParamsIncidentConditionVisibility string

// IncidentTriggerParamsIncidentKinds defines model for IncidentTriggerParams.IncidentKinds.
type IncidentTriggerParamsIncidentKinds string

// IncidentTriggerParamsIncidentStatuses defines model for IncidentTriggerParams.IncidentStatuses.
type IncidentTriggerParamsIncidentStatuses string

// IncidentTriggerParamsTriggerType defines model for IncidentTriggerParams.TriggerType.
type IncidentTriggerParamsTriggerType string

// Actions that trigger the workflow.
type IncidentTriggerParamsTriggers string

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// The slug of the incident type
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                   `json:"id"`
		Type IncidentTypeListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeListDataType defines model for IncidentTypeList.Data.Type.
type IncidentTypeListDataType string

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                       `json:"id"`
		Type IncidentTypeResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTypeResponseDataType defines model for IncidentTypeResponse.Data.Type.
type IncidentTypeResponseDataType string

// IncidentsChartResponse defines model for incidents_chart_response.
type IncidentsChartResponse map[string]interface{}

// InviteToSlackChannelOpsgenieTaskParams defines model for invite_to_slack_channel_opsgenie_task_params.
type InviteToSlackChannelOpsgenieTaskParams struct {
	Channels *[]string `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelOpsgenieTaskParamsTaskType defines model for InviteToSlackChannelOpsgenieTaskParams.TaskType.
type InviteToSlackChannelOpsgenieTaskParamsTaskType string

// InviteToSlackChannelPagerdutyTaskParams defines model for invite_to_slack_channel_pagerduty_task_params.
type InviteToSlackChannelPagerdutyTaskParams interface{}

// InviteToSlackChannelTaskParams defines model for invite_to_slack_channel_task_params.
type InviteToSlackChannelTaskParams interface{}

// InviteToSlackChannelVictorOpsTaskParams defines model for invite_to_slack_channel_victor_ops_task_params.
type InviteToSlackChannelVictorOpsTaskParams struct {
	Channels *[]string `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelVictorOpsTaskParamsTaskType defines model for InviteToSlackChannelVictorOpsTaskParams.TaskType.
type InviteToSlackChannelVictorOpsTaskParamsTaskType string

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type MitigateIncidentDataType `json:"type"`
	} `json:"data"`
}

// MitigateIncidentDataType defines model for MitigateIncident.Data.Type.
type MitigateIncidentDataType string

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the alert (eg: zendesk)
			Source *NewAlertDataAttributesSource `json:"source,omitempty"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewAlertDataType `json:"type"`
	} `json:"data"`
}

// The source of the alert (eg: zendesk)
type NewAlertDataAttributesSource string

// NewAlertDataType defines model for NewAlert.Data.Type.
type NewAlertDataType string

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewCauseDataType `json:"type"`
	} `json:"data"`
}

// NewCauseDataType defines model for NewCause.Data.Type.
type NewCauseDataType string

// NewCustomField defines model for new_custom_field.
type NewCustomField struct {
	Data struct {
		Attributes struct {
			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label string `json:"label"`

			// The position of the custom_field
			Position *float32                                `json:"position,omitempty"`
			Required *[]NewCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]NewCustomFieldDataAttributesShown    `json:"shown,omitempty"`
		} `json:"attributes"`
		Type NewCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type NewCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type NewCustomFieldDataAttributesShown string

// NewCustomFieldDataType defines model for NewCustomField.Data.Type.
type NewCustomFieldDataType string

// NewCustomFieldOption defines model for new_custom_field_option.
type NewCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color *string `json:"color,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFieldOptionDataType defines model for NewCustomFieldOption.Data.Type.
type NewCustomFieldOptionDataType string

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// NewEnvironmentDataType defines model for NewEnvironment.Data.Type.
type NewEnvironmentDataType string

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The name of the functionality
			Name string `json:"name"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`
		} `json:"attributes"`
		Type NewFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// NewFunctionalityDataType defines model for NewFunctionality.Data.Type.
type NewFunctionalityDataType string

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The kind of the incident
			Kind *NewIncidentDataAttributesKind `json:"kind,omitempty"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The slug of the incident
			Slug *string `json:"slug,omitempty"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The status of the incident event
			Status *NewIncidentDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title string `json:"title"`

			// The url to the incident
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`
		Type NewIncidentDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident
type NewIncidentDataAttributesKind string

// The status of the incident event
type NewIncidentDataAttributesStatus string

// NewIncidentDataType defines model for NewIncident.Data.Type.
type NewIncidentDataType string

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the incident action item
			Description *string `json:"description"`

			// The kind of the incident action item
			Kind *NewIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the incident action item
			Priority *NewIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *NewIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident action item
type NewIncidentActionItemDataAttributesKind string

// The priority of the incident action item
type NewIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type NewIncidentActionItemDataAttributesStatus string

// NewIncidentActionItemDataType defines model for NewIncidentActionItem.Data.Type.
type NewIncidentActionItemDataType string

// NewIncidentCustomFieldSelection defines model for new_incident_custom_field_selection.
type NewIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId     float32    `json:"custom_field_id"`
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentCustomFieldSelectionDataType defines model for NewIncidentCustomFieldSelection.Data.Type.
type NewIncidentCustomFieldSelectionDataType string

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *NewIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type NewIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type NewIncidentEventDataAttributesVisibility string

// NewIncidentEventDataType defines model for NewIncidentEvent.Data.Type.
type NewIncidentEventDataType string

// NewIncidentFeedback defines model for new_incident_feedback.
type NewIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// The rating of the incident feedback
			Rating NewIncidentFeedbackDataAttributesRating `json:"rating"`
		} `json:"attributes"`
		Type NewIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type NewIncidentFeedbackDataAttributesRating int

// NewIncidentFeedbackDataType defines model for NewIncidentFeedback.Data.Type.
type NewIncidentFeedbackDataType string

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {
			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleDataType defines model for NewIncidentRole.Data.Type.
type NewIncidentRoleDataType string

// NewIncidentRoleTask defines model for new_incident_role_task.
type NewIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *NewIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type NewIncidentRoleTaskDataAttributesPriority string

// NewIncidentRoleTaskDataType defines model for NewIncidentRoleTask.Data.Type.
type NewIncidentRoleTaskDataType string

// NewIncidentStatusPageEvent defines model for new_incident_status_page_event.
type NewIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// The status of the incident event
			Status *NewIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// The status page ids to post the event
			StatusPageIds *[]string `json:"status_page_ids,omitempty"`
		} `json:"attributes"`
		Type NewIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type NewIncidentStatusPageEventDataAttributesStatus string

// NewIncidentStatusPageEventDataType defines model for NewIncidentStatusPageEvent.Data.Type.
type NewIncidentStatusPageEventDataType string

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTypeDataType defines model for NewIncidentType.Data.Type.
type NewIncidentTypeDataType string

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewPlaybookDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookDataType defines model for NewPlaybook.Data.Type.
type NewPlaybookDataType string

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewPlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookTaskDataType defines model for NewPlaybookTask.Data.Type.
type NewPlaybookTaskDataType string

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewPostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplateDataType defines model for NewPostMortemTemplate.Data.Type.
type NewPostMortemTemplateDataType string

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewPulseDataType `json:"type"`
	} `json:"data"`
}

// NewPulseDataType defines model for NewPulse.Data.Type.
type NewPulseDataType string

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name string `json:"name"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceDependencyIds *[]interface{} `json:"service_dependency_ids"`
		} `json:"attributes"`
		Type NewServiceDataType `json:"type"`
	} `json:"data"`
}

// NewServiceDataType defines model for NewService.Data.Type.
type NewServiceDataType string

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *NewSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type NewSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type NewSeverityDataAttributesSeverity string

// NewSeverityDataType defines model for NewSeverity.Data.Type.
type NewSeverityDataType string

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewStatusPageDataAttributesShowUptimeLastDays int

// NewStatusPageDataType defines model for NewStatusPage.Data.Type.
type NewStatusPageDataType string

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {
			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewTeamDataType `json:"type"`
	} `json:"data"`
}

// NewTeamDataType defines model for NewTeam.Data.Type.
type NewTeamDataType string

// NewWorkflow defines model for new_workflow.
type NewWorkflow struct {
	Data struct {
		Attributes struct {
			// Workflow command.
			Command *string `json:"command"`

			// The description of the workflow
			Description     *string   `json:"description"`
			Enabled         *bool     `json:"enabled,omitempty"`
			EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
			GroupIds        *[]string `json:"group_ids,omitempty"`
			IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name string `json:"name"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration.
			RepeatEveryDuration *string                              `json:"repeat_every_duration"`
			RepeatOn            *[]NewWorkflowDataAttributesRepeatOn `json:"repeat_on,omitempty"`
			ServiceIds          *[]string                            `json:"service_ids,omitempty"`
			SeverityIds         *[]string                            `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Wait this duration before executing.
			Wait *string `json:"wait"`
		} `json:"attributes"`
		Type NewWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Repeat on weekdays.
type NewWorkflowDataAttributesRepeatOn string

// NewWorkflowDataType defines model for NewWorkflow.Data.Type.
type NewWorkflowDataType string

// NewWorkflowCustomFieldSelection defines model for new_workflow_custom_field_selection.
type NewWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId float32 `json:"custom_field_id"`

			// The trigger condition
			IncidentCondition NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds *[]float32                                                     `json:"selected_option_ids,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// NewWorkflowCustomFieldSelectionDataType defines model for NewWorkflowCustomFieldSelection.Data.Type.
type NewWorkflowCustomFieldSelectionDataType string

// NewWorkflowTask defines model for new_workflow_task.
type NewWorkflowTask struct {
	Data struct {
		Attributes struct {
			// The position of the workflow task
			Position   *float32    `json:"position,omitempty"`
			TaskParams interface{} `json:"task_params"`
		} `json:"attributes"`
		Type NewWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowTaskDataType defines model for NewWorkflowTask.Data.Type.
type NewWorkflowTaskDataType string

// PageOpsgenieOnCallRespondersTaskParams defines model for page_opsgenie_on_call_responders_task_params.
type PageOpsgenieOnCallRespondersTaskParams struct {
	Priority *PageOpsgenieOnCallRespondersTaskParamsPriority `json:"priority,omitempty"`
	TaskType *PageOpsgenieOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PageOpsgenieOnCallRespondersTaskParamsPriority defines model for PageOpsgenieOnCallRespondersTaskParams.Priority.
type PageOpsgenieOnCallRespondersTaskParamsPriority string

// PageOpsgenieOnCallRespondersTaskParamsTaskType defines model for PageOpsgenieOnCallRespondersTaskParams.TaskType.
type PageOpsgenieOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParams defines model for page_pagerduty_on_call_responders_task_params.
type PagePagerdutyOnCallRespondersTaskParams struct {
	EscalationPolicies *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *PagePagerdutyOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Urgency  *PagePagerdutyOnCallRespondersTaskParamsUrgency  `json:"urgency,omitempty"`
	Users    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PagePagerdutyOnCallRespondersTaskParamsTaskType defines model for PagePagerdutyOnCallRespondersTaskParams.TaskType.
type PagePagerdutyOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParamsUrgency defines model for PagePagerdutyOnCallRespondersTaskParams.Urgency.
type PagePagerdutyOnCallRespondersTaskParamsUrgency string

// PageVictorOpsOnCallRespondersTaskParams defines model for page_victor_ops_on_call_responders_task_params.
type PageVictorOpsOnCallRespondersTaskParams interface{}

// Playbook defines model for playbook.
type Playbook struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The external url of the playbook
	ExternalUrl *string `json:"external_url"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string               `json:"id"`
		Type PlaybookListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookListDataType defines model for PlaybookList.Data.Type.
type PlaybookListDataType string

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string                   `json:"id"`
		Type PlaybookResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookResponseDataType defines model for PlaybookResponse.Data.Type.
type PlaybookResponseDataType string

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                   `json:"id"`
		Type PlaybookTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskListDataType defines model for PlaybookTaskList.Data.Type.
type PlaybookTaskListDataType string

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type PlaybookTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookTaskResponseDataType defines model for PlaybookTaskResponse.Data.Type.
type PlaybookTaskResponseDataType string

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                         `json:"id"`
		Type PostMortemTemplateListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateListDataType defines model for PostMortemTemplateList.Data.Type.
type PostMortemTemplateListDataType string

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                             `json:"id"`
		Type PostMortemTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// PostMortemTemplateResponseDataType defines model for PostMortemTemplateResponse.Data.Type.
type PostMortemTemplateResponseDataType string

// PrintTaskParams defines model for print_task_params.
type PrintTaskParams struct {
	// The message to print
	Message  string                   `json:"message"`
	TaskType *PrintTaskParamsTaskType `json:"task_type,omitempty"`
}

// PrintTaskParamsTaskType defines model for PrintTaskParams.TaskType.
type PrintTaskParamsTaskType string

// PublishIncidentTaskParams defines model for publish_incident_task_params.
type PublishIncidentTaskParams struct {
	// Incident event description
	Event    string `json:"event"`
	Incident struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"incident"`
	PublicTitle   string                             `json:"public_title"`
	Status        PublishIncidentTaskParamsStatus    `json:"status"`
	StatusPageIds []string                           `json:"status_page_ids"`
	TaskType      *PublishIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// PublishIncidentTaskParamsStatus defines model for PublishIncidentTaskParams.Status.
type PublishIncidentTaskParamsStatus string

// PublishIncidentTaskParamsTaskType defines model for PublishIncidentTaskParams.TaskType.
type PublishIncidentTaskParamsTaskType string

// Pulse defines model for pulse.
type Pulse struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`
	Refs *[]struct {
		// Key of the ref
		Key string `json:"key"`

		// Value of the ref
		Value string `json:"value"`
	} `json:"refs,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the pulse (eg: k8s)
	Source *string `json:"source"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string            `json:"id"`
		Type PulseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseListDataType defines model for PulseList.Data.Type.
type PulseListDataType string

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string                `json:"id"`
		Type PulseResponseDataType `json:"type"`
	} `json:"data"`
}

// PulseResponseDataType defines model for PulseResponse.Data.Type.
type PulseResponseDataType string

// PulseTriggerParams defines model for pulse_trigger_params.
type PulseTriggerParams struct {
	PulseCondition       *PulseTriggerParamsPulseCondition       `json:"pulse_condition,omitempty"`
	PulseConditionLabel  *PulseTriggerParamsPulseConditionLabel  `json:"pulse_condition_label,omitempty"`
	PulseConditionSource *PulseTriggerParamsPulseConditionSource `json:"pulse_condition_source,omitempty"`
	TriggerType          PulseTriggerParamsTriggerType           `json:"trigger_type"`
	Triggers             *[]PulseTriggerParamsTriggers           `json:"triggers,omitempty"`
}

// PulseTriggerParamsPulseCondition defines model for PulseTriggerParams.PulseCondition.
type PulseTriggerParamsPulseCondition string

// PulseTriggerParamsPulseConditionLabel defines model for PulseTriggerParams.PulseConditionLabel.
type PulseTriggerParamsPulseConditionLabel string

// PulseTriggerParamsPulseConditionSource defines model for PulseTriggerParams.PulseConditionSource.
type PulseTriggerParamsPulseConditionSource string

// PulseTriggerParamsTriggerType defines model for PulseTriggerParams.TriggerType.
type PulseTriggerParamsTriggerType string

// Actions that trigger the workflow.
type PulseTriggerParamsTriggers string

// RedisClientTaskParams defines model for redis_client_task_params.
type RedisClientTaskParams struct {
	Commands            string  `json:"commands"`
	EventMessage        *string `json:"event_message,omitempty"`
	EventUrl            *string `json:"event_url,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *RedisClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url      string                         `json:"url"`
}

// RedisClientTaskParamsTaskType defines model for RedisClientTaskParams.TaskType.
type RedisClientTaskParamsTaskType string

// RenameSlackChannelTaskParams defines model for rename_slack_channel_task_params.
type RenameSlackChannelTaskParams struct {
	Channel *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel,omitempty"`
	TaskType *RenameSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Title    string                                `json:"title"`
}

// RenameSlackChannelTaskParamsTaskType defines model for RenameSlackChannelTaskParams.TaskType.
type RenameSlackChannelTaskParamsTaskType string

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type ResolveIncidentDataType `json:"type"`
	} `json:"data"`
}

// ResolveIncidentDataType defines model for ResolveIncident.Data.Type.
type ResolveIncidentDataType string

// RunCommandHerokuTaskParams defines model for run_command_heroku_task_params.
type RunCommandHerokuTaskParams struct {
	AppName string `json:"app_name"`
	Channel *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel,omitempty"`
	Command             string `json:"command"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Size     RunCommandHerokuTaskParamsSize      `json:"size"`
	TaskType *RunCommandHerokuTaskParamsTaskType `json:"task_type,omitempty"`
}

// RunCommandHerokuTaskParamsSize defines model for RunCommandHerokuTaskParams.Size.
type RunCommandHerokuTaskParamsSize string

// RunCommandHerokuTaskParamsTaskType defines model for RunCommandHerokuTaskParams.TaskType.
type RunCommandHerokuTaskParamsTaskType string

// SendEmailTaskParams defines model for send_email_task_params.
type SendEmailTaskParams struct {
	// The email body
	Body *string `json:"body"`

	// The preheader
	Preheader *string `json:"preheader"`

	// The subject
	Subject  string                       `json:"subject"`
	TaskType *SendEmailTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                     `json:"to"`
}

// SendEmailTaskParamsTaskType defines model for SendEmailTaskParams.TaskType.
type SendEmailTaskParamsTaskType string

// SendSlackMessageParams defines model for send_slack_message_params.
type SendSlackMessageParams interface{}

// SendSmsTaskParams defines model for send_sms_task_params.
type SendSmsTaskParams struct {
	// The SMS message
	Content string `json:"content"`

	// The name
	Name         string                     `json:"name"`
	PhoneNumbers []string                   `json:"phone_numbers"`
	TaskType     *SendSmsTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendSmsTaskParamsTaskType defines model for SendSmsTaskParams.TaskType.
type SendSmsTaskParamsTaskType string

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// Environments associated with this service
	EnvironmentIds *[]interface{} `json:"environment_ids"`

	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `json:"github_repository_branch"`

	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `json:"github_repository_name"`

	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `json:"gitlab_repository_name"`

	// The name of the service
	Name string `json:"name"`

	// Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// The Opsgenie service id associated to this service
	OpsgenieId *string `json:"opsgenie_id"`

	// The PagerDuty service id associated to this service
	PagerdutyId *string `json:"pagerduty_id"`

	// The public description of the service
	PublicDescription *string `json:"public_description"`

	// Services dependent on this service
	ServiceDependencyIds *[]interface{} `json:"service_dependency_ids"`

	// The slug of the service
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string              `json:"id"`
		Type ServiceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceListDataType defines model for ServiceList.Data.Type.
type ServiceListDataType string

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string                  `json:"id"`
		Type ServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// ServiceResponseDataType defines model for ServiceResponse.Data.Type.
type ServiceResponseDataType string

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *SeveritySeverity `json:"severity,omitempty"`

	// The slug of the severity
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The severity of the severity
type SeveritySeverity string

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string               `json:"id"`
		Type SeverityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityListDataType defines model for SeverityList.Data.Type.
type SeverityListDataType string

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string                   `json:"id"`
		Type SeverityResponseDataType `json:"type"`
	} `json:"data"`
}

// SeverityResponseDataType defines model for SeverityResponse.Data.Type.
type SeverityResponseDataType string

// SnapshotDatadogGraphTaskParams defines model for snapshot_datadog_graph_task_params.
type SnapshotDatadogGraphTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	MetricQueries *[]string `json:"metric_queries,omitempty"`

	// in format '1 minute', '30 days', '3 months', etc.
	PastDuration        string `json:"past_duration"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotDatadogGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotDatadogGraphTaskParamsTaskType defines model for SnapshotDatadogGraphTaskParams.TaskType.
type SnapshotDatadogGraphTaskParamsTaskType string

// SnapshotGrafanaGraphTaskParams defines model for snapshot_grafana_graph_task_params.
type SnapshotGrafanaGraphTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotGrafanaGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotGrafanaGraphTaskParamsTaskType defines model for SnapshotGrafanaGraphTaskParams.TaskType.
type SnapshotGrafanaGraphTaskParamsTaskType string

// SnapshotLookerGraphTaskParams defines model for snapshot_looker_graph_task_params.
type SnapshotLookerGraphTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotLookerGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotLookerGraphTaskParamsTaskType defines model for SnapshotLookerGraphTaskParams.TaskType.
type SnapshotLookerGraphTaskParamsTaskType string

// SnapshotNewRelicGraphTaskParams defines model for snapshot_new_relic_graph_task_params.
type SnapshotNewRelicGraphTaskParams struct {
	MetricQuery         string                                     `json:"metric_query"`
	MetricType          *SnapshotNewRelicGraphTaskParamsMetricType `json:"metric_type,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotNewRelicGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotNewRelicGraphTaskParamsMetricType defines model for SnapshotNewRelicGraphTaskParams.MetricType.
type SnapshotNewRelicGraphTaskParamsMetricType string

// SnapshotNewRelicGraphTaskParamsTaskType defines model for SnapshotNewRelicGraphTaskParams.TaskType.
type SnapshotNewRelicGraphTaskParamsTaskType string

// StandaloneTriggerParams defines model for standalone_trigger_params.
type StandaloneTriggerParams struct {
	TriggerType StandaloneTriggerParamsTriggerType `json:"trigger_type"`
	Triggers    *[]StandaloneTriggerParamsTriggers `json:"triggers,omitempty"`
}

// StandaloneTriggerParamsTriggerType defines model for StandaloneTriggerParams.TriggerType.
type StandaloneTriggerParamsTriggerType string

// Actions that trigger the workflow.
type StandaloneTriggerParamsTriggers string

// StatusPage defines model for status_page.
type StatusPage struct {
	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *StatusPageShowUptimeLastDays `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Show uptime over x days
type StatusPageShowUptimeLastDays int

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                 `json:"id"`
		Type StatusPageListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageListDataType defines model for StatusPageList.Data.Type.
type StatusPageListDataType string

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                     `json:"id"`
		Type StatusPageResponseDataType `json:"type"`
	} `json:"data"`
}

// StatusPageResponseDataType defines model for StatusPageResponse.Data.Type.
type StatusPageResponseDataType string

// Team defines model for team.
type Team struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string           `json:"id"`
		Type TeamListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamListDataType defines model for TeamList.Data.Type.
type TeamListDataType string

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string               `json:"id"`
		Type TeamResponseDataType `json:"type"`
	} `json:"data"`
}

// TeamResponseDataType defines model for TeamResponse.Data.Type.
type TeamResponseDataType string

// TweetTwitterMessageTaskParams defines model for tweet_twitter_message_task_params.
type TweetTwitterMessageTaskParams struct {
	Message  string                                 `json:"message"`
	TaskType *TweetTwitterMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// TweetTwitterMessageTaskParamsTaskType defines model for TweetTwitterMessageTaskParams.TaskType.
type TweetTwitterMessageTaskParamsTaskType string

// UpdateAirtableTableRecordTaskParams defines model for update_airtable_table_record_task_params.
type UpdateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings JSON.
	CustomFieldsMapping *map[string]interface{} `json:"custom_fields_mapping,omitempty"`

	// The record id
	RecordId string `json:"record_id"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *UpdateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateAirtableTableRecordTaskParamsTaskType defines model for UpdateAirtableTableRecordTaskParams.TaskType.
type UpdateAirtableTableRecordTaskParamsTaskType string

// UpdateAsanaTaskTaskParams defines model for update_asana_task_task_params.
type UpdateAsanaTaskTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task id
	TaskId   string                             `json:"task_id"`
	TaskType *UpdateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title *string `json:"title,omitempty"`
}

// UpdateAsanaTaskTaskParamsTaskType defines model for UpdateAsanaTaskTaskParams.TaskType.
type UpdateAsanaTaskTaskParamsTaskType string

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateCauseDataType `json:"type"`
	} `json:"data"`
}

// UpdateCauseDataType defines model for UpdateCause.Data.Type.
type UpdateCauseDataType string

// UpdateCustomField defines model for update_custom_field.
type UpdateCustomField struct {
	Data struct {
		Attributes struct {
			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label *string `json:"label,omitempty"`

			// The position of the custom_field
			Position *float32                                   `json:"position,omitempty"`
			Required *[]UpdateCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]UpdateCustomFieldDataAttributesShown    `json:"shown,omitempty"`

			// The slug of the custom_field
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type UpdateCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type UpdateCustomFieldDataAttributesShown string

// UpdateCustomFieldDataType defines model for UpdateCustomField.Data.Type.
type UpdateCustomFieldDataType string

// UpdateCustomFieldOption defines model for update_custom_field_option.
type UpdateCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color *string `json:"color,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFieldOptionDataType defines model for UpdateCustomFieldOption.Data.Type.
type UpdateCustomFieldOptionDataType string

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// UpdateEnvironmentDataType defines model for UpdateEnvironment.Data.Type.
type UpdateEnvironmentDataType string

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`
		} `json:"attributes"`
		Type UpdateFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// UpdateFunctionalityDataType defines model for UpdateFunctionality.Data.Type.
type UpdateFunctionalityDataType string

// UpdateGithubIssueTaskParams defines model for update_github_issue_task_params.
type UpdateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The issue id
	IssueId  string                               `json:"issue_id"`
	TaskType *UpdateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateGithubIssueTaskParamsTaskType defines model for UpdateGithubIssueTaskParams.TaskType.
type UpdateGithubIssueTaskParamsTaskType string

// UpdateGoogleCalendarEventTaskParams defines model for update_google_calendar_event_task_params.
type UpdateGoogleCalendarEventTaskParams struct {
	// Days to adjust meeting by
	AdjustmentDays *float32 `json:"adjustment_days,omitempty"`

	// Emails of attendees
	Attendees               *[]string `json:"attendees,omitempty"`
	CanGuestsInviteOthers   *bool     `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool     `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool     `json:"can_guests_see_other_guests,omitempty"`

	// The event description
	Description *string `json:"description,omitempty"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        *string `json:"meeting_duration,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	ReplaceAttendees       *bool   `json:"replace_attendees,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  *string                                      `json:"summary,omitempty"`
	TaskType *UpdateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting *string `json:"time_of_meeting,omitempty"`
}

// UpdateGoogleCalendarEventTaskParamsTaskType defines model for UpdateGoogleCalendarEventTaskParams.TaskType.
type UpdateGoogleCalendarEventTaskParamsTaskType string

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentDataType defines model for UpdateIncident.Data.Type.
type UpdateIncidentDataType string

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the incident action item
			Description *string `json:"description"`

			// The kind of the incident action item
			Kind *UpdateIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the incident action item
			Priority *UpdateIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *UpdateIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident action item
type UpdateIncidentActionItemDataAttributesKind string

// The priority of the incident action item
type UpdateIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type UpdateIncidentActionItemDataAttributesStatus string

// UpdateIncidentActionItemDataType defines model for UpdateIncidentActionItem.Data.Type.
type UpdateIncidentActionItemDataType string

// UpdateIncidentCustomFieldSelection defines model for update_incident_custom_field_selection.
type UpdateIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentCustomFieldSelectionDataType defines model for UpdateIncidentCustomFieldSelection.Data.Type.
type UpdateIncidentCustomFieldSelectionDataType string

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *UpdateIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type UpdateIncidentEventDataAttributesVisibility string

// UpdateIncidentEventDataType defines model for UpdateIncidentEvent.Data.Type.
type UpdateIncidentEventDataType string

// UpdateIncidentFeedback defines model for update_incident_feedback.
type UpdateIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback *string `json:"feedback,omitempty"`

			// The rating of the incident feedback
			Rating *UpdateIncidentFeedbackDataAttributesRating `json:"rating,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type UpdateIncidentFeedbackDataAttributesRating int

// UpdateIncidentFeedbackDataType defines model for UpdateIncidentFeedback.Data.Type.
type UpdateIncidentFeedbackDataType string

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {
			// The Cause ID's to attach to the incident postmortem
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show workflow events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *UpdateIncidentPostMortemDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPostMortemDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident postmortem
type UpdateIncidentPostMortemDataAttributesStatus string

// UpdateIncidentPostMortemDataType defines model for UpdateIncidentPostMortem.Data.Type.
type UpdateIncidentPostMortemDataType string

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {
			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type UpdateIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleDataType defines model for UpdateIncidentRole.Data.Type.
type UpdateIncidentRoleDataType string

// UpdateIncidentRoleTask defines model for update_incident_role_task.
type UpdateIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *UpdateIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type UpdateIncidentRoleTaskDataAttributesPriority string

// UpdateIncidentRoleTaskDataType defines model for UpdateIncidentRoleTask.Data.Type.
type UpdateIncidentRoleTaskDataType string

// UpdateIncidentStatusPageEvent defines model for update_incident_status_page_event.
type UpdateIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// The status of the incident event
			Status *UpdateIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// The status page ids to post the event
			StatusPageIds *[]string `json:"status_page_ids"`
		} `json:"attributes"`
		Type UpdateIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type UpdateIncidentStatusPageEventDataAttributesStatus string

// UpdateIncidentStatusPageEventDataType defines model for UpdateIncidentStatusPageEvent.Data.Type.
type UpdateIncidentStatusPageEventDataType string

// UpdateIncidentTaskParams defines model for update_incident_task_params.
type UpdateIncidentTaskParams struct {
	AcknowledgedAt   *string   `json:"acknowledged_at"`
	DetectedAt       *string   `json:"detected_at"`
	EnvironmentIds   *[]string `json:"environment_ids"`
	FunctionalityIds *[]string `json:"functionality_ids"`
	GroupIds         *[]string `json:"group_ids"`

	// The incident id to update
	IncidentId      *string   `json:"incident_id,omitempty"`
	IncidentTypeIds *[]string `json:"incident_type_ids"`
	MitigatedAt     *string   `json:"mitigated_at"`
	Private         *bool     `json:"private,omitempty"`
	ResolvedAt      *string   `json:"resolved_at"`
	ServiceIds      *[]string `json:"service_ids"`
	SeverityId      *string   `json:"severity_id"`
	StartedAt       *string   `json:"started_at"`
	Status          *string   `json:"status"`

	// The incident summary
	Summary  *string                           `json:"summary"`
	TaskType *UpdateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentTaskParamsTaskType defines model for UpdateIncidentTaskParams.TaskType.
type UpdateIncidentTaskParamsTaskType string

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTypeDataType defines model for UpdateIncidentType.Data.Type.
type UpdateIncidentTypeDataType string

// UpdateJiraIssueTaskParams defines model for update_jira_issue_task_params.
type UpdateJiraIssueTaskParams struct {
	// The assigned user's email.
	AssignUserEmail     *string                 `json:"assign_user_email,omitempty"`
	CustomFieldsMapping *map[string]interface{} `json:"custom_fields_mapping,omitempty"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue id.
	IssueId string `json:"issue_id"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *UpdateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title *string `json:"title,omitempty"`
}

// UpdateJiraIssueTaskParamsTaskType defines model for UpdateJiraIssueTaskParams.TaskType.
type UpdateJiraIssueTaskParamsTaskType string

// UpdateLinearIssueTaskParams defines model for update_linear_issue_task_params.
type UpdateLinearIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue id.
	IssueId string `json:"issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state,omitempty"`
	TaskType *UpdateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title *string `json:"title,omitempty"`
}

// UpdateLinearIssueTaskParamsTaskType defines model for UpdateLinearIssueTaskParams.TaskType.
type UpdateLinearIssueTaskParamsTaskType string

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookDataType defines model for UpdatePlaybook.Data.Type.
type UpdatePlaybookDataType string

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTaskDataType defines model for UpdatePlaybookTask.Data.Type.
type UpdatePlaybookTaskDataType string

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdatePostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplateDataType defines model for UpdatePostMortemTemplate.Data.Type.
type UpdatePostMortemTemplateDataType string

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *UpdatePulseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdatePulseDataType defines model for UpdatePulse.Data.Type.
type UpdatePulseDataType string

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name *string `json:"name,omitempty"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceDependencyIds *[]interface{} `json:"service_dependency_ids"`
		} `json:"attributes"`
		Type UpdateServiceDataType `json:"type"`
	} `json:"data"`
}

// UpdateServiceDataType defines model for UpdateService.Data.Type.
type UpdateServiceDataType string

// UpdateServiceNowIncidentTaskParams defines model for update_service_now_incident_task_params.
type UpdateServiceNowIncidentTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The incident id
	IncidentId string `json:"incident_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *UpdateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateServiceNowIncidentTaskParamsTaskType defines model for UpdateServiceNowIncidentTaskParams.TaskType.
type UpdateServiceNowIncidentTaskParamsTaskType string

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *UpdateSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type UpdateSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type UpdateSeverityDataAttributesSeverity string

// UpdateSeverityDataType defines model for UpdateSeverity.Data.Type.
type UpdateSeverityDataType string

// UpdateShortcutStoryTaskParams defines model for update_shortcut_story_task_params.
type UpdateShortcutStoryTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The story due date (ISO8601 format).
	DueDate *string `json:"due_date,omitempty"`

	// The story labels.
	Labels *string `json:"labels,omitempty"`

	// The story id
	StoryId  string                                 `json:"story_id"`
	TaskType *UpdateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateShortcutStoryTaskParamsTaskType defines model for UpdateShortcutStoryTaskParams.TaskType.
type UpdateShortcutStoryTaskParamsTaskType string

// UpdateShortcutTaskTaskParams defines model for update_shortcut_task_task_params.
type UpdateShortcutTaskTaskParams struct {
	// The completion id and display name.
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description *string `json:"description,omitempty"`

	// The parent story
	ParentStoryId string `json:"parent_story_id"`

	// The task id
	TaskId   string                                `json:"task_id"`
	TaskType *UpdateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateShortcutTaskTaskParamsTaskType defines model for UpdateShortcutTaskTaskParams.TaskType.
type UpdateShortcutTaskTaskParamsTaskType string

// UpdateSlackChannelTopicTaskParams defines model for update_slack_channel_topic_task_params.
type UpdateSlackChannelTopicTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *UpdateSlackChannelTopicTaskParamsTaskType `json:"task_type,omitempty"`
	Topic    string                                     `json:"topic"`
}

// UpdateSlackChannelTopicTaskParamsTaskType defines model for UpdateSlackChannelTopicTaskParams.TaskType.
type UpdateSlackChannelTopicTaskParamsTaskType string

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *UpdateStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type UpdateStatusPageDataAttributesShowUptimeLastDays int

// UpdateStatusPageDataType defines model for UpdateStatusPage.Data.Type.
type UpdateStatusPageDataType string

// UpdateStatusTaskParams defines model for update_status_task_params.
type UpdateStatusTaskParams struct {
	// In format '1 hour', '1 day', etc.
	InactivityTimeout *string                         `json:"inactivity_timeout,omitempty"`
	Status            UpdateStatusTaskParamsStatus    `json:"status"`
	TaskType          *UpdateStatusTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateStatusTaskParamsStatus defines model for UpdateStatusTaskParams.Status.
type UpdateStatusTaskParamsStatus string

// UpdateStatusTaskParamsTaskType defines model for UpdateStatusTaskParams.TaskType.
type UpdateStatusTaskParamsTaskType string

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {
			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateTeamDataType `json:"type"`
	} `json:"data"`
}

// UpdateTeamDataType defines model for UpdateTeam.Data.Type.
type UpdateTeamDataType string

// UpdateTrelloCardTaskParams defines model for update_trello_card_task_params.
type UpdateTrelloCardTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The board id and display name.
	Board *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board,omitempty"`

	// The card id
	CardId string `json:"card_id"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date (ISO8601 format)
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name.
	List *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list,omitempty"`
	TaskType *UpdateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title *string `json:"title,omitempty"`
}

// UpdateTrelloCardTaskParamsTaskType defines model for UpdateTrelloCardTaskParams.TaskType.
type UpdateTrelloCardTaskParamsTaskType string

// UpdateWorkflow defines model for update_workflow.
type UpdateWorkflow struct {
	Data struct {
		Attributes struct {
			// Workflow command.
			Command *string `json:"command"`

			// The description of the workflow
			Description     *string   `json:"description"`
			Enabled         *bool     `json:"enabled,omitempty"`
			EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
			GroupIds        *[]string `json:"group_ids,omitempty"`
			IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name *string `json:"name,omitempty"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration.
			RepeatEveryDuration *string   `json:"repeat_every_duration"`
			ServiceIds          *[]string `json:"service_ids,omitempty"`
			SeverityIds         *[]string `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string                                 `json:"slug,omitempty"`
			TriggerParams *interface{}                            `json:"trigger_params,omitempty"`
			Triggers      *[]UpdateWorkflowDataAttributesTriggers `json:"triggers,omitempty"`

			// Wait this duration before executing.
			Wait *string `json:"wait"`
		} `json:"attributes"`
		Type UpdateWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Actions that trigger the workflow.
type UpdateWorkflowDataAttributesTriggers string

// UpdateWorkflowDataType defines model for UpdateWorkflow.Data.Type.
type UpdateWorkflowDataType string

// UpdateWorkflowCustomFieldSelection defines model for update_workflow_custom_field_selection.
type UpdateWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The trigger condition
			IncidentCondition *UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedOptionIds *[]float32                                                         `json:"selected_option_ids,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// UpdateWorkflowCustomFieldSelectionDataType defines model for UpdateWorkflowCustomFieldSelection.Data.Type.
type UpdateWorkflowCustomFieldSelectionDataType string

// UpdateWorkflowTask defines model for update_workflow_task.
type UpdateWorkflowTask struct {
	Data struct {
		Attributes struct {
			// The position of the workflow task
			Position   *float32     `json:"position,omitempty"`
			TaskParams *interface{} `json:"task_params,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowTaskDataType defines model for UpdateWorkflowTask.Data.Type.
type UpdateWorkflowTaskDataType string

// UpdateZendeskTicketTaskParams defines model for update_zendesk_ticket_task_params.
type UpdateZendeskTicketTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject.
	Subject *string `json:"subject,omitempty"`

	// The ticket tags.
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *UpdateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// The ticket id.
	TicketId string `json:"ticket_id"`
}

// UpdateZendeskTicketTaskParamsTaskType defines model for UpdateZendeskTicketTaskParams.TaskType.
type UpdateZendeskTicketTaskParamsTaskType string

// UptimeChartResponse defines model for uptime_chart_response.
type UptimeChartResponse map[string]interface{}

// Workflow defines model for workflow.
type Workflow struct {
	// Workflow command.
	Command *string `json:"command"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the workflow
	Description     *string   `json:"description"`
	Enabled         *bool     `json:"enabled,omitempty"`
	EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
	GroupIds        *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

	// The title of the workflow
	Name string `json:"name"`

	// The order which the workflow should run with other workflows.
	Position *float32 `json:"position,omitempty"`

	// Repeat workflow every duration.
	RepeatEveryDuration *string   `json:"repeat_every_duration"`
	ServiceIds          *[]string `json:"service_ids,omitempty"`
	SeverityIds         *[]string `json:"severity_ids,omitempty"`

	// The slug of the workflow
	Slug          *string             `json:"slug,omitempty"`
	TriggerParams *interface{}        `json:"trigger_params,omitempty"`
	Triggers      *[]WorkflowTriggers `json:"triggers,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// Wait this duration before executing.
	Wait *string `json:"wait"`
}

// Actions that trigger the workflow.
type WorkflowTriggers string

// WorkflowCustomFieldSelection defines model for workflow_custom_field_selection.
type WorkflowCustomFieldSelection struct {
	// The custom field for this selection
	CustomFieldId float32 `json:"custom_field_id"`

	// The trigger condition
	IncidentCondition WorkflowCustomFieldSelectionIncidentCondition `json:"incident_condition"`
	SelectedOptionIds []float32                                     `json:"selected_option_ids"`
}

// The trigger condition
type WorkflowCustomFieldSelectionIncidentCondition string

// WorkflowCustomFieldSelectionList defines model for workflow_custom_field_selection_list.
type WorkflowCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_custom_field_selection)
			WorkflowCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                   `json:"id"`
		Type WorkflowCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowCustomFieldSelectionListDataType defines model for WorkflowCustomFieldSelectionList.Data.Type.
type WorkflowCustomFieldSelectionListDataType string

// WorkflowCustomFieldSelectionResponse defines model for workflow_custom_field_selection_response.
type WorkflowCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_custom_field_selection)
			WorkflowCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                       `json:"id"`
		Type WorkflowCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowCustomFieldSelectionResponseDataType defines model for WorkflowCustomFieldSelectionResponse.Data.Type.
type WorkflowCustomFieldSelectionResponseDataType string

// WorkflowList defines model for workflow_list.
type WorkflowList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow)
			Workflow `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string               `json:"id"`
		Type WorkflowListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowListDataType defines model for WorkflowList.Data.Type.
type WorkflowListDataType string

// WorkflowResponse defines model for workflow_response.
type WorkflowResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow)
			Workflow `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string                   `json:"id"`
		Type WorkflowResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowResponseDataType defines model for WorkflowResponse.Data.Type.
type WorkflowResponseDataType string

// WorkflowTask defines model for workflow_task.
type WorkflowTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The position of the workflow task
	Position   float32     `json:"position"`
	TaskParams interface{} `json:"task_params"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The id of the workflow
	WorkflowId string `json:"workflow_id"`
}

// WorkflowTaskList defines model for workflow_task_list.
type WorkflowTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_task)
			WorkflowTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                   `json:"id"`
		Type WorkflowTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowTaskListDataType defines model for WorkflowTaskList.Data.Type.
type WorkflowTaskListDataType string

// WorkflowTaskResponse defines model for workflow_task_response.
type WorkflowTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_task)
			WorkflowTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                       `json:"id"`
		Type WorkflowTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowTaskResponseDataType defines model for WorkflowTaskResponse.Data.Type.
type WorkflowTaskResponseDataType string

// GetScimUsersParams defines parameters for GetScimUsers.
type GetScimUsersParams struct {
	Filter     string `json:"filter"`
	StartIndex *int   `json:"startIndex,omitempty"`
	Count      *int   `json:"count,omitempty"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCustomFieldsParams defines parameters for ListCustomFields.
type ListCustomFieldsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCustomFieldOptionsParams defines parameters for ListCustomFieldOptions.
type ListCustomFieldOptionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	Include      *string `json:"include,omitempty"`
	PageNumber   *int    `json:"page[number],omitempty"`
	PageSize     *int    `json:"page[size],omitempty"`
	FilterSearch *string `json:"filter[search],omitempty"`
	FilterName   *string `json:"filter[name],omitempty"`
	FilterSlug   *string `json:"filter[slug],omitempty"`
}

// GetFunctionalityIncidentsChartParams defines parameters for GetFunctionalityIncidentsChart.
type GetFunctionalityIncidentsChartParams struct {
	Period string `json:"period"`
}

// GetFunctionalityUptimeChartParams defines parameters for GetFunctionalityUptimeChart.
type GetFunctionalityUptimeChartParams struct {
	Period *string `json:"period,omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentRoleTasksParams defines parameters for ListIncidentRoleTasks.
type ListIncidentRoleTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	Include                            *string        `json:"include,omitempty"`
	PageNumber                         *int           `json:"page[number],omitempty"`
	PageSize                           *int           `json:"page[size],omitempty"`
	FilterSearch                       *string        `json:"filter[search],omitempty"`
	FilterStatus                       *string        `json:"filter[status],omitempty"`
	FilterSeverity                     *string        `json:"filter[severity],omitempty"`
	FilterType                         *string        `json:"filter[type],omitempty"`
	FilterUserId                       *int           `json:"filter[user_id],omitempty"`
	FilterEnvironments                 *string        `json:"filter[environments],omitempty"`
	FilterFunctionalities              *string        `json:"filter[functionalities],omitempty"`
	FilterServices                     *[]interface{} `json:"filter[services],omitempty"`
	FilterTeams                        *[]interface{} `json:"filter[teams],omitempty"`
	FilterCustomFieldSelectedOptionIds *[]interface{} `json:"filter[custom_field_selected_option_ids],omitempty"`
}

// ListIncidentCustomFieldSelectionsParams defines parameters for ListIncidentCustomFieldSelections.
type ListIncidentCustomFieldSelectionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentFeedbacksParams defines parameters for ListIncidentFeedbacks.
type ListIncidentFeedbacksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentStatusPagesParams defines parameters for ListIncidentStatusPages.
type ListIncidentStatusPagesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentPostMortemsParams defines parameters for ListIncidentPostMortems.
type ListIncidentPostMortemsParams struct {
	Include               *string        `json:"include,omitempty"`
	PageNumber            *int           `json:"page[number],omitempty"`
	PageSize              *int           `json:"page[size],omitempty"`
	FilterSearch          *string        `json:"filter[search],omitempty"`
	FilterStatus          *string        `json:"filter[status],omitempty"`
	FilterSeverity        *string        `json:"filter[severity],omitempty"`
	FilterType            *string        `json:"filter[type],omitempty"`
	FilterUserId          *int           `json:"filter[user_id],omitempty"`
	FilterEnvironments    *string        `json:"filter[environments],omitempty"`
	FilterFunctionalities *string        `json:"filter[functionalities],omitempty"`
	FilterServices        *[]interface{} `json:"filter[services],omitempty"`
	FilterTeams           *[]interface{} `json:"filter[teams],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	Include           *string `json:"include,omitempty"`
	PageNumber        *int    `json:"page[number],omitempty"`
	PageSize          *int    `json:"page[size],omitempty"`
	FilterName        *string `json:"filter[name],omitempty"`
	FilterSlug        *string `json:"filter[slug],omitempty"`
	FilterBackstageId *string `json:"filter[backstage_id],omitempty"`
}

// GetServiceIncidentsChartParams defines parameters for GetServiceIncidentsChart.
type GetServiceIncidentsChartParams struct {
	Period string `json:"period"`
}

// GetServiceUptimeChartParams defines parameters for GetServiceUptimeChart.
type GetServiceUptimeChartParams struct {
	Period *string `json:"period,omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowCustomFieldSelectionsParams defines parameters for ListWorkflowCustomFieldSelections.
type ListWorkflowCustomFieldSelectionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowTasksParams defines parameters for ListWorkflowTasks.
type ListWorkflowTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetScimUsers request
	GetScimUsers(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScimUsers request
	PostScimUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScimUsersId request
	DeleteScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScimUsersId request
	GetScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScimUsersId request
	PatchScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlert request with any body
	CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOption request
	GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFields request
	ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomField request
	DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomField request
	GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentFeedback request
	DeleteIncidentFeedback(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRoleTasks request
	GetIncidentRoleTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelIncident request with any body
	CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelections(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlert request
	ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowTask request
	GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflows request
	ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflow request
	DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflow request
	GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelections(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowTasks request
	ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetScimUsers(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScimUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScimUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScimUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldOptionsRequest(c.Server, customFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldOptionRequestWithBody(c.Server, customFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentFeedback(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentFeedbackRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFeedbacksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFeedbackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRoleTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRoleTasksRequest(c.Server, incidentRoleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleTaskRequestWithBody(c.Server, incidentRoleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentCustomFieldSelections(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentCustomFieldSelectionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFeedbacksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFeedbackRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentStatusPagesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentStatusPageRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostMortemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentStatusPagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowCustomFieldSelections(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowCustomFieldSelectionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowTasksRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowTaskRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetScimUsersRequest generates requests for GetScimUsers
func NewGetScimUsersRequest(server string, params *GetScimUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, params.Filter); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScimUsersRequest generates requests for PostScimUsers
func NewPostScimUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteScimUsersIdRequest generates requests for DeleteScimUsersId
func NewDeleteScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScimUsersIdRequest generates requests for GetScimUsersId
func NewGetScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScimUsersIdRequest generates requests for PatchScimUsersId
func NewPatchScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertRequestWithBody generates requests for CreateAlert with any type of body
func NewCreateAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldOptionRequest generates requests for DeleteCustomFieldOption
func NewDeleteCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldOptionRequest generates requests for GetCustomFieldOption
func NewGetCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldOptionRequestWithBody generates requests for UpdateCustomFieldOption with any type of body
func NewUpdateCustomFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldsRequest generates requests for ListCustomFields
func NewListCustomFieldsRequest(server string, params *ListCustomFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldRequestWithBody generates requests for CreateCustomField with any type of body
func NewCreateCustomFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldOptionsRequest generates requests for ListCustomFieldOptions
func NewListCustomFieldOptionsRequest(server string, customFieldId string, params *ListCustomFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldOptionRequestWithBody generates requests for CreateCustomFieldOption with any type of body
func NewCreateCustomFieldOptionRequestWithBody(server string, customFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldRequest generates requests for DeleteCustomField
func NewDeleteCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldRequest generates requests for GetCustomField
func NewGetCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldRequestWithBody generates requests for UpdateCustomField with any type of body
func NewUpdateCustomFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentFeedbackRequest generates requests for DeleteIncidentFeedback
func NewDeleteIncidentFeedbackRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentFeedbacksRequest generates requests for GetIncidentFeedbacks
func NewGetIncidentFeedbacksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFeedbackRequestWithBody generates requests for UpdateIncidentFeedback with any type of body
func NewUpdateIncidentFeedbackRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionalityIncidentsChartRequest generates requests for GetFunctionalityIncidentsChart
func NewGetFunctionalityIncidentsChartRequest(server string, id string, params *GetFunctionalityIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityUptimeChartRequest generates requests for GetFunctionalityUptimeChart
func NewGetFunctionalityUptimeChartRequest(server string, id string, params *GetFunctionalityUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentCustomFieldSelectionRequest generates requests for DeleteIncidentCustomFieldSelection
func NewDeleteIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentCustomFieldSelectionRequest generates requests for GetIncidentCustomFieldSelection
func NewGetIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentCustomFieldSelectionRequestWithBody generates requests for UpdateIncidentCustomFieldSelection with any type of body
func NewUpdateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleTaskRequest generates requests for DeleteIncidentRoleTask
func NewDeleteIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleTasksRequest generates requests for GetIncidentRoleTasks
func NewGetIncidentRoleTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleTaskRequestWithBody generates requests for UpdateIncidentRoleTask with any type of body
func NewUpdateIncidentRoleTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRoleTasksRequest generates requests for ListIncidentRoleTasks
func NewListIncidentRoleTasksRequest(server string, incidentRoleId string, params *ListIncidentRoleTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleTaskRequestWithBody generates requests for CreateIncidentRoleTask with any type of body
func NewCreateIncidentRoleTaskRequestWithBody(server string, incidentRoleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCustomFieldSelectedOptionIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[custom_field_selected_option_ids]", runtime.ParamLocationQuery, *params.FilterCustomFieldSelectedOptionIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelIncidentRequestWithBody generates requests for CancelIncident with any type of body
func NewCancelIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentCustomFieldSelectionsRequest generates requests for ListIncidentCustomFieldSelections
func NewListIncidentCustomFieldSelectionsRequest(server string, id string, params *ListIncidentCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentCustomFieldSelectionRequestWithBody generates requests for CreateIncidentCustomFieldSelection with any type of body
func NewCreateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(server string, incidentId string, params *ListAlertParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFeedbacksRequest generates requests for ListIncidentFeedbacks
func NewListIncidentFeedbacksRequest(server string, incidentId string, params *ListIncidentFeedbacksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFeedbackRequestWithBody generates requests for CreateIncidentFeedback with any type of body
func NewCreateIncidentFeedbackRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentStatusPagesRequest generates requests for ListIncidentStatusPages
func NewListIncidentStatusPagesRequest(server string, incidentId string, params *ListIncidentStatusPagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentStatusPageRequestWithBody generates requests for CreateIncidentStatusPage with any type of body
func NewCreateIncidentStatusPageRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPostMortemsRequest generates requests for ListIncidentPostMortems
func NewListIncidentPostMortemsRequest(server string, params *ListIncidentPostMortemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentPostmortemRequest generates requests for ListIncidentPostmortem
func NewListIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBackstageId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceIncidentsChartRequest generates requests for GetServiceIncidentsChart
func NewGetServiceIncidentsChartRequest(server string, id string, params *GetServiceIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceUptimeChartRequest generates requests for GetServiceUptimeChart
func NewGetServiceUptimeChartRequest(server string, id string, params *GetServiceUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentStatusPageRequest generates requests for DeleteIncidentStatusPage
func NewDeleteIncidentStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentStatusPagesRequest generates requests for GetIncidentStatusPages
func NewGetIncidentStatusPagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentStatusPageRequestWithBody generates requests for UpdateIncidentStatusPage with any type of body
func NewUpdateIncidentStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowCustomFieldSelectionRequest generates requests for DeleteWorkflowCustomFieldSelection
func NewDeleteWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowCustomFieldSelectionRequest generates requests for GetWorkflowCustomFieldSelection
func NewGetWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowCustomFieldSelectionRequestWithBody generates requests for UpdateWorkflowCustomFieldSelection with any type of body
func NewUpdateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowTaskRequest generates requests for DeleteWorkflowTask
func NewDeleteWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowTaskRequest generates requests for GetWorkflowTask
func NewGetWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowTaskRequestWithBody generates requests for UpdateWorkflowTask with any type of body
func NewUpdateWorkflowTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowsRequest generates requests for ListWorkflows
func NewListWorkflowsRequest(server string, params *ListWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRequestWithBody generates requests for CreateWorkflow with any type of body
func NewCreateWorkflowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowRequest generates requests for DeleteWorkflow
func NewDeleteWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowRequest generates requests for GetWorkflow
func NewGetWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowRequestWithBody generates requests for UpdateWorkflow with any type of body
func NewUpdateWorkflowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowCustomFieldSelectionsRequest generates requests for ListWorkflowCustomFieldSelections
func NewListWorkflowCustomFieldSelectionsRequest(server string, id string, params *ListWorkflowCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowCustomFieldSelectionRequestWithBody generates requests for CreateWorkflowCustomFieldSelection with any type of body
func NewCreateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowTasksRequest generates requests for ListWorkflowTasks
func NewListWorkflowTasksRequest(server string, workflowId string, params *ListWorkflowTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowTaskRequestWithBody generates requests for CreateWorkflowTask with any type of body
func NewCreateWorkflowTaskRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetScimUsers request
	GetScimUsersWithResponse(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*GetScimUsersResponse, error)

	// PostScimUsers request
	PostScimUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostScimUsersResponse, error)

	// DeleteScimUsersId request
	DeleteScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteScimUsersIdResponse, error)

	// GetScimUsersId request
	GetScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetScimUsersIdResponse, error)

	// PatchScimUsersId request
	PatchScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PatchScimUsersIdResponse, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// CreateAlert request with any body
	CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error)

	// GetCustomFieldOption request
	GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error)

	// ListCustomFields request
	ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error)

	// DeleteCustomField request
	DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error)

	// GetCustomField request
	GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// DeleteIncidentFeedback request
	DeleteIncidentFeedbackWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFeedbackResponse, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error)

	// GetIncidentRoleTasks request
	GetIncidentRoleTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTasksResponse, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// CancelIncident request with any body
	CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error)

	// AttachAlert request with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error)

	// GetWorkflowTask request
	GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error)

	// ListWorkflows request
	ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error)

	// DeleteWorkflow request
	DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error)

	// GetWorkflow request
	GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error)

	// ListWorkflowTasks request
	ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error)
}

type GetScimUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScimUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScimUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScimUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostScimUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScimUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostMortemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostMortemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostMortemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetScimUsersWithResponse request returning *GetScimUsersResponse
func (c *ClientWithResponses) GetScimUsersWithResponse(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*GetScimUsersResponse, error) {
	rsp, err := c.GetScimUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScimUsersResponse(rsp)
}

// PostScimUsersWithResponse request returning *PostScimUsersResponse
func (c *ClientWithResponses) PostScimUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostScimUsersResponse, error) {
	rsp, err := c.PostScimUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScimUsersResponse(rsp)
}

// DeleteScimUsersIdWithResponse request returning *DeleteScimUsersIdResponse
func (c *ClientWithResponses) DeleteScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteScimUsersIdResponse, error) {
	rsp, err := c.DeleteScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScimUsersIdResponse(rsp)
}

// GetScimUsersIdWithResponse request returning *GetScimUsersIdResponse
func (c *ClientWithResponses) GetScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetScimUsersIdResponse, error) {
	rsp, err := c.GetScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScimUsersIdResponse(rsp)
}

// PatchScimUsersIdWithResponse request returning *PatchScimUsersIdResponse
func (c *ClientWithResponses) PatchScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PatchScimUsersIdResponse, error) {
	rsp, err := c.PatchScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScimUsersIdResponse(rsp)
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// CreateAlertWithBodyWithResponse request with arbitrary body returning *CreateAlertResponse
func (c *ClientWithResponses) CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// DeleteCustomFieldOptionWithResponse request returning *DeleteCustomFieldOptionResponse
func (c *ClientWithResponses) DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error) {
	rsp, err := c.DeleteCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldOptionResponse(rsp)
}

// GetCustomFieldOptionWithResponse request returning *GetCustomFieldOptionResponse
func (c *ClientWithResponses) GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error) {
	rsp, err := c.GetCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionResponse(rsp)
}

// UpdateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldOptionResponse
func (c *ClientWithResponses) UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error) {
	rsp, err := c.UpdateCustomFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldOptionResponse(rsp)
}

// ListCustomFieldsWithResponse request returning *ListCustomFieldsResponse
func (c *ClientWithResponses) ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error) {
	rsp, err := c.ListCustomFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldsResponse(rsp)
}

// CreateCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldResponse
func (c *ClientWithResponses) CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

// ListCustomFieldOptionsWithResponse request returning *ListCustomFieldOptionsResponse
func (c *ClientWithResponses) ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error) {
	rsp, err := c.ListCustomFieldOptions(ctx, customFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldOptionsResponse(rsp)
}

// CreateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldOptionResponse
func (c *ClientWithResponses) CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error) {
	rsp, err := c.CreateCustomFieldOptionWithBody(ctx, customFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldOptionResponse(rsp)
}

// DeleteCustomFieldWithResponse request returning *DeleteCustomFieldResponse
func (c *ClientWithResponses) DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error) {
	rsp, err := c.DeleteCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResponse(rsp)
}

// GetCustomFieldWithResponse request returning *GetCustomFieldResponse
func (c *ClientWithResponses) GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error) {
	rsp, err := c.GetCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResponse(rsp)
}

// UpdateCustomFieldWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldResponse
func (c *ClientWithResponses) UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// DeleteIncidentFeedbackWithResponse request returning *DeleteIncidentFeedbackResponse
func (c *ClientWithResponses) DeleteIncidentFeedbackWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFeedbackResponse, error) {
	rsp, err := c.DeleteIncidentFeedback(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentFeedbackResponse(rsp)
}

// GetIncidentFeedbacksWithResponse request returning *GetIncidentFeedbacksResponse
func (c *ClientWithResponses) GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error) {
	rsp, err := c.GetIncidentFeedbacks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFeedbacksResponse(rsp)
}

// UpdateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFeedbackResponse
func (c *ClientWithResponses) UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error) {
	rsp, err := c.UpdateIncidentFeedbackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFeedbackResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// GetFunctionalityIncidentsChartWithResponse request returning *GetFunctionalityIncidentsChartResponse
func (c *ClientWithResponses) GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error) {
	rsp, err := c.GetFunctionalityIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityIncidentsChartResponse(rsp)
}

// GetFunctionalityUptimeChartWithResponse request returning *GetFunctionalityUptimeChartResponse
func (c *ClientWithResponses) GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error) {
	rsp, err := c.GetFunctionalityUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityUptimeChartResponse(rsp)
}

// DeleteIncidentCustomFieldSelectionWithResponse request returning *DeleteIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentCustomFieldSelectionResponse(rsp)
}

// GetIncidentCustomFieldSelectionWithResponse request returning *GetIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentCustomFieldSelectionResponse(rsp)
}

// UpdateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentCustomFieldSelectionResponse(rsp)
}

// DeleteIncidentRoleTaskWithResponse request returning *DeleteIncidentRoleTaskResponse
func (c *ClientWithResponses) DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error) {
	rsp, err := c.DeleteIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleTaskResponse(rsp)
}

// GetIncidentRoleTasksWithResponse request returning *GetIncidentRoleTasksResponse
func (c *ClientWithResponses) GetIncidentRoleTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTasksResponse, error) {
	rsp, err := c.GetIncidentRoleTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleTasksResponse(rsp)
}

// UpdateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleTaskResponse
func (c *ClientWithResponses) UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error) {
	rsp, err := c.UpdateIncidentRoleTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleTaskResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// ListIncidentRoleTasksWithResponse request returning *ListIncidentRoleTasksResponse
func (c *ClientWithResponses) ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error) {
	rsp, err := c.ListIncidentRoleTasks(ctx, incidentRoleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRoleTasksResponse(rsp)
}

// CreateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleTaskResponse
func (c *ClientWithResponses) CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error) {
	rsp, err := c.CreateIncidentRoleTaskWithBody(ctx, incidentRoleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// CancelIncidentWithBodyWithResponse request with arbitrary body returning *CancelIncidentResponse
func (c *ClientWithResponses) CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error) {
	rsp, err := c.CancelIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIncidentResponse(rsp)
}

// ListIncidentCustomFieldSelectionsWithResponse request returning *ListIncidentCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentCustomFieldSelections(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentCustomFieldSelectionsResponse(rsp)
}

// CreateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentCustomFieldSelectionResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentFeedbacksWithResponse request returning *ListIncidentFeedbacksResponse
func (c *ClientWithResponses) ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error) {
	rsp, err := c.ListIncidentFeedbacks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFeedbacksResponse(rsp)
}

// CreateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *CreateIncidentFeedbackResponse
func (c *ClientWithResponses) CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error) {
	rsp, err := c.CreateIncidentFeedbackWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFeedbackResponse(rsp)
}

// ListIncidentStatusPagesWithResponse request returning *ListIncidentStatusPagesResponse
func (c *ClientWithResponses) ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error) {
	rsp, err := c.ListIncidentStatusPages(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentStatusPagesResponse(rsp)
}

// CreateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *CreateIncidentStatusPageResponse
func (c *ClientWithResponses) CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error) {
	rsp, err := c.CreateIncidentStatusPageWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentStatusPageResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// ListIncidentPostMortemsWithResponse request returning *ListIncidentPostMortemsResponse
func (c *ClientWithResponses) ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error) {
	rsp, err := c.ListIncidentPostMortems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostMortemsResponse(rsp)
}

// ListIncidentPostmortemWithResponse request returning *ListIncidentPostmortemResponse
func (c *ClientWithResponses) ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error) {
	rsp, err := c.ListIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// GetServiceIncidentsChartWithResponse request returning *GetServiceIncidentsChartResponse
func (c *ClientWithResponses) GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error) {
	rsp, err := c.GetServiceIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIncidentsChartResponse(rsp)
}

// GetServiceUptimeChartWithResponse request returning *GetServiceUptimeChartResponse
func (c *ClientWithResponses) GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error) {
	rsp, err := c.GetServiceUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceUptimeChartResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// DeleteIncidentStatusPageWithResponse request returning *DeleteIncidentStatusPageResponse
func (c *ClientWithResponses) DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error) {
	rsp, err := c.DeleteIncidentStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentStatusPageResponse(rsp)
}

// GetIncidentStatusPagesWithResponse request returning *GetIncidentStatusPagesResponse
func (c *ClientWithResponses) GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error) {
	rsp, err := c.GetIncidentStatusPages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentStatusPagesResponse(rsp)
}

// UpdateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateIncidentStatusPageResponse
func (c *ClientWithResponses) UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error) {
	rsp, err := c.UpdateIncidentStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentStatusPageResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// DeleteWorkflowCustomFieldSelectionWithResponse request returning *DeleteWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowCustomFieldSelectionResponse(rsp)
}

// GetWorkflowCustomFieldSelectionWithResponse request returning *GetWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.GetWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowCustomFieldSelectionResponse(rsp)
}

// UpdateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowCustomFieldSelectionResponse(rsp)
}

// DeleteWorkflowTaskWithResponse request returning *DeleteWorkflowTaskResponse
func (c *ClientWithResponses) DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error) {
	rsp, err := c.DeleteWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowTaskResponse(rsp)
}

// GetWorkflowTaskWithResponse request returning *GetWorkflowTaskResponse
func (c *ClientWithResponses) GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error) {
	rsp, err := c.GetWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowTaskResponse(rsp)
}

// UpdateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowTaskResponse
func (c *ClientWithResponses) UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error) {
	rsp, err := c.UpdateWorkflowTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowTaskResponse(rsp)
}

// ListWorkflowsWithResponse request returning *ListWorkflowsResponse
func (c *ClientWithResponses) ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error) {
	rsp, err := c.ListWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowsResponse(rsp)
}

// CreateWorkflowWithBodyWithResponse request with arbitrary body returning *CreateWorkflowResponse
func (c *ClientWithResponses) CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error) {
	rsp, err := c.CreateWorkflowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowResponse(rsp)
}

// DeleteWorkflowWithResponse request returning *DeleteWorkflowResponse
func (c *ClientWithResponses) DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error) {
	rsp, err := c.DeleteWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowResponse(rsp)
}

// GetWorkflowWithResponse request returning *GetWorkflowResponse
func (c *ClientWithResponses) GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error) {
	rsp, err := c.GetWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowResponse(rsp)
}

// UpdateWorkflowWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowResponse
func (c *ClientWithResponses) UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error) {
	rsp, err := c.UpdateWorkflowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowResponse(rsp)
}

// ListWorkflowCustomFieldSelectionsWithResponse request returning *ListWorkflowCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListWorkflowCustomFieldSelections(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowCustomFieldSelectionsResponse(rsp)
}

// CreateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowCustomFieldSelectionResponse(rsp)
}

// ListWorkflowTasksWithResponse request returning *ListWorkflowTasksResponse
func (c *ClientWithResponses) ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error) {
	rsp, err := c.ListWorkflowTasks(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowTasksResponse(rsp)
}

// CreateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *CreateWorkflowTaskResponse
func (c *ClientWithResponses) CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error) {
	rsp, err := c.CreateWorkflowTaskWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowTaskResponse(rsp)
}

// ParseGetScimUsersResponse parses an HTTP response from a GetScimUsersWithResponse call
func ParseGetScimUsersResponse(rsp *http.Response) (*GetScimUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScimUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostScimUsersResponse parses an HTTP response from a PostScimUsersWithResponse call
func ParsePostScimUsersResponse(rsp *http.Response) (*PostScimUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScimUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteScimUsersIdResponse parses an HTTP response from a DeleteScimUsersIdWithResponse call
func ParseDeleteScimUsersIdResponse(rsp *http.Response) (*DeleteScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScimUsersIdResponse parses an HTTP response from a GetScimUsersIdWithResponse call
func ParseGetScimUsersIdResponse(rsp *http.Response) (*GetScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchScimUsersIdResponse parses an HTTP response from a PatchScimUsersIdWithResponse call
func ParsePatchScimUsersIdResponse(rsp *http.Response) (*PatchScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAlertResponse parses an HTTP response from a CreateAlertWithResponse call
func ParseCreateAlertResponse(rsp *http.Response) (*CreateAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldOptionResponse parses an HTTP response from a DeleteCustomFieldOptionWithResponse call
func ParseDeleteCustomFieldOptionResponse(rsp *http.Response) (*DeleteCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldOptionResponse parses an HTTP response from a GetCustomFieldOptionWithResponse call
func ParseGetCustomFieldOptionResponse(rsp *http.Response) (*GetCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldOptionResponse parses an HTTP response from a UpdateCustomFieldOptionWithResponse call
func ParseUpdateCustomFieldOptionResponse(rsp *http.Response) (*UpdateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldsResponse parses an HTTP response from a ListCustomFieldsWithResponse call
func ParseListCustomFieldsResponse(rsp *http.Response) (*ListCustomFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldResponse parses an HTTP response from a CreateCustomFieldWithResponse call
func ParseCreateCustomFieldResponse(rsp *http.Response) (*CreateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldOptionsResponse parses an HTTP response from a ListCustomFieldOptionsWithResponse call
func ParseListCustomFieldOptionsResponse(rsp *http.Response) (*ListCustomFieldOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldOptionResponse parses an HTTP response from a CreateCustomFieldOptionWithResponse call
func ParseCreateCustomFieldOptionResponse(rsp *http.Response) (*CreateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldResponse parses an HTTP response from a DeleteCustomFieldWithResponse call
func ParseDeleteCustomFieldResponse(rsp *http.Response) (*DeleteCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldResponse parses an HTTP response from a GetCustomFieldWithResponse call
func ParseGetCustomFieldResponse(rsp *http.Response) (*GetCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldResponse parses an HTTP response from a UpdateCustomFieldWithResponse call
func ParseUpdateCustomFieldResponse(rsp *http.Response) (*UpdateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentFeedbackResponse parses an HTTP response from a DeleteIncidentFeedbackWithResponse call
func ParseDeleteIncidentFeedbackResponse(rsp *http.Response) (*DeleteIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentFeedbacksResponse parses an HTTP response from a GetIncidentFeedbacksWithResponse call
func ParseGetIncidentFeedbacksResponse(rsp *http.Response) (*GetIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentFeedbackResponse parses an HTTP response from a UpdateIncidentFeedbackWithResponse call
func ParseUpdateIncidentFeedbackResponse(rsp *http.Response) (*UpdateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityIncidentsChartResponse parses an HTTP response from a GetFunctionalityIncidentsChartWithResponse call
func ParseGetFunctionalityIncidentsChartResponse(rsp *http.Response) (*GetFunctionalityIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityUptimeChartResponse parses an HTTP response from a GetFunctionalityUptimeChartWithResponse call
func ParseGetFunctionalityUptimeChartResponse(rsp *http.Response) (*GetFunctionalityUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentCustomFieldSelectionResponse parses an HTTP response from a DeleteIncidentCustomFieldSelectionWithResponse call
func ParseDeleteIncidentCustomFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentCustomFieldSelectionResponse parses an HTTP response from a GetIncidentCustomFieldSelectionWithResponse call
func ParseGetIncidentCustomFieldSelectionResponse(rsp *http.Response) (*GetIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentCustomFieldSelectionResponse parses an HTTP response from a UpdateIncidentCustomFieldSelectionWithResponse call
func ParseUpdateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleTaskResponse parses an HTTP response from a DeleteIncidentRoleTaskWithResponse call
func ParseDeleteIncidentRoleTaskResponse(rsp *http.Response) (*DeleteIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleTasksResponse parses an HTTP response from a GetIncidentRoleTasksWithResponse call
func ParseGetIncidentRoleTasksResponse(rsp *http.Response) (*GetIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleTaskResponse parses an HTTP response from a UpdateIncidentRoleTaskWithResponse call
func ParseUpdateIncidentRoleTaskResponse(rsp *http.Response) (*UpdateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRoleTasksResponse parses an HTTP response from a ListIncidentRoleTasksWithResponse call
func ParseListIncidentRoleTasksResponse(rsp *http.Response) (*ListIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleTaskResponse parses an HTTP response from a CreateIncidentRoleTaskWithResponse call
func ParseCreateIncidentRoleTaskResponse(rsp *http.Response) (*CreateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelIncidentResponse parses an HTTP response from a CancelIncidentWithResponse call
func ParseCancelIncidentResponse(rsp *http.Response) (*CancelIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentCustomFieldSelectionsResponse parses an HTTP response from a ListIncidentCustomFieldSelectionsWithResponse call
func ParseListIncidentCustomFieldSelectionsResponse(rsp *http.Response) (*ListIncidentCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentCustomFieldSelectionResponse parses an HTTP response from a CreateIncidentCustomFieldSelectionWithResponse call
func ParseCreateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*CreateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentFeedbacksResponse parses an HTTP response from a ListIncidentFeedbacksWithResponse call
func ParseListIncidentFeedbacksResponse(rsp *http.Response) (*ListIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentFeedbackResponse parses an HTTP response from a CreateIncidentFeedbackWithResponse call
func ParseCreateIncidentFeedbackResponse(rsp *http.Response) (*CreateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentStatusPagesResponse parses an HTTP response from a ListIncidentStatusPagesWithResponse call
func ParseListIncidentStatusPagesResponse(rsp *http.Response) (*ListIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentStatusPageResponse parses an HTTP response from a CreateIncidentStatusPageWithResponse call
func ParseCreateIncidentStatusPageResponse(rsp *http.Response) (*CreateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostMortemsResponse parses an HTTP response from a ListIncidentPostMortemsWithResponse call
func ParseListIncidentPostMortemsResponse(rsp *http.Response) (*ListIncidentPostMortemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostMortemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostmortemResponse parses an HTTP response from a ListIncidentPostmortemWithResponse call
func ParseListIncidentPostmortemResponse(rsp *http.Response) (*ListIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceIncidentsChartResponse parses an HTTP response from a GetServiceIncidentsChartWithResponse call
func ParseGetServiceIncidentsChartResponse(rsp *http.Response) (*GetServiceIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceUptimeChartResponse parses an HTTP response from a GetServiceUptimeChartWithResponse call
func ParseGetServiceUptimeChartResponse(rsp *http.Response) (*GetServiceUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentStatusPageResponse parses an HTTP response from a DeleteIncidentStatusPageWithResponse call
func ParseDeleteIncidentStatusPageResponse(rsp *http.Response) (*DeleteIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentStatusPagesResponse parses an HTTP response from a GetIncidentStatusPagesWithResponse call
func ParseGetIncidentStatusPagesResponse(rsp *http.Response) (*GetIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentStatusPageResponse parses an HTTP response from a UpdateIncidentStatusPageWithResponse call
func ParseUpdateIncidentStatusPageResponse(rsp *http.Response) (*UpdateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowCustomFieldSelectionResponse parses an HTTP response from a DeleteWorkflowCustomFieldSelectionWithResponse call
func ParseDeleteWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowCustomFieldSelectionResponse parses an HTTP response from a GetWorkflowCustomFieldSelectionWithResponse call
func ParseGetWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*GetWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowCustomFieldSelectionResponse parses an HTTP response from a UpdateWorkflowCustomFieldSelectionWithResponse call
func ParseUpdateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowTaskResponse parses an HTTP response from a DeleteWorkflowTaskWithResponse call
func ParseDeleteWorkflowTaskResponse(rsp *http.Response) (*DeleteWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowTaskResponse parses an HTTP response from a GetWorkflowTaskWithResponse call
func ParseGetWorkflowTaskResponse(rsp *http.Response) (*GetWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowTaskResponse parses an HTTP response from a UpdateWorkflowTaskWithResponse call
func ParseUpdateWorkflowTaskResponse(rsp *http.Response) (*UpdateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowsResponse parses an HTTP response from a ListWorkflowsWithResponse call
func ParseListWorkflowsResponse(rsp *http.Response) (*ListWorkflowsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowResponse parses an HTTP response from a CreateWorkflowWithResponse call
func ParseCreateWorkflowResponse(rsp *http.Response) (*CreateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowResponse parses an HTTP response from a DeleteWorkflowWithResponse call
func ParseDeleteWorkflowResponse(rsp *http.Response) (*DeleteWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowResponse parses an HTTP response from a GetWorkflowWithResponse call
func ParseGetWorkflowResponse(rsp *http.Response) (*GetWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowResponse parses an HTTP response from a UpdateWorkflowWithResponse call
func ParseUpdateWorkflowResponse(rsp *http.Response) (*UpdateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowCustomFieldSelectionsResponse parses an HTTP response from a ListWorkflowCustomFieldSelectionsWithResponse call
func ParseListWorkflowCustomFieldSelectionsResponse(rsp *http.Response) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowCustomFieldSelectionResponse parses an HTTP response from a CreateWorkflowCustomFieldSelectionWithResponse call
func ParseCreateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowTasksResponse parses an HTTP response from a ListWorkflowTasksWithResponse call
func ParseListWorkflowTasksResponse(rsp *http.Response) (*ListWorkflowTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowTaskResponse parses an HTTP response from a CreateWorkflowTaskWithResponse call
func ParseCreateWorkflowTaskResponse(rsp *http.Response) (*CreateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET
	// (GET /scim/Users)
	GetScimUsers(ctx echo.Context, params GetScimUsersParams) error
	// POST
	// (POST /scim/Users)
	PostScimUsers(ctx echo.Context) error
	// DELETE
	// (DELETE /scim/Users/{id})
	DeleteScimUsersId(ctx echo.Context, id int) error
	// GET
	// (GET /scim/Users/{id})
	GetScimUsersId(ctx echo.Context, id int) error
	// PATCH
	// (PATCH /scim/Users/{id})
	PatchScimUsersId(ctx echo.Context, id int) error
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Creates a alert
	// (POST /v1/alerts)
	CreateAlert(ctx echo.Context) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// Delete a custom_field_option
	// (DELETE /v1/custom_field_options/{id})
	DeleteCustomFieldOption(ctx echo.Context, id string) error
	// Retrieves a custom_field_option
	// (GET /v1/custom_field_options/{id})
	GetCustomFieldOption(ctx echo.Context, id string) error
	// Update a custom_field_option
	// (PUT /v1/custom_field_options/{id})
	UpdateCustomFieldOption(ctx echo.Context, id string) error
	// List custom_fields
	// (GET /v1/custom_fields)
	ListCustomFields(ctx echo.Context, params ListCustomFieldsParams) error
	// Creates a custom_field
	// (POST /v1/custom_fields)
	CreateCustomField(ctx echo.Context) error
	// List custom_field_options
	// (GET /v1/custom_fields/{custom_field_id}/options)
	ListCustomFieldOptions(ctx echo.Context, customFieldId string, params ListCustomFieldOptionsParams) error
	// Creates a custom_field_option
	// (POST /v1/custom_fields/{custom_field_id}/options)
	CreateCustomFieldOption(ctx echo.Context, customFieldId string) error
	// Delete a custom_field
	// (DELETE /v1/custom_fields/{id})
	DeleteCustomField(ctx echo.Context, id string) error
	// Retrieves a custom_field
	// (GET /v1/custom_fields/{id})
	GetCustomField(ctx echo.Context, id string) error
	// Update a custom_field
	// (PUT /v1/custom_fields/{id})
	UpdateCustomField(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// Delete a incident feedback
	// (DELETE /v1/feedbacks/{id})
	DeleteIncidentFeedback(ctx echo.Context, id string) error
	// Retrieves a incident feedback
	// (GET /v1/feedbacks/{id})
	GetIncidentFeedbacks(ctx echo.Context, id string) error
	// Update a incident feedback
	// (PUT /v1/feedbacks/{id})
	UpdateIncidentFeedback(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// Get functionality incidents chart
	// (GET /v1/functionalities/{id}/incidents_chart)
	GetFunctionalityIncidentsChart(ctx echo.Context, id string, params GetFunctionalityIncidentsChartParams) error
	// Get functionality uptime chart
	// (GET /v1/functionalities/{id}/uptime_chart)
	GetFunctionalityUptimeChart(ctx echo.Context, id string, params GetFunctionalityUptimeChartParams) error
	// Delete a incident_custom_field_selection
	// (DELETE /v1/incident_custom_field_selections/{id})
	DeleteIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Retrieves a incident_custom_field_selection
	// (GET /v1/incident_custom_field_selections/{id})
	GetIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Update a incident_custom_field_selection
	// (PUT /v1/incident_custom_field_selections/{id})
	UpdateIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Delete a incident_role task
	// (DELETE /v1/incident_role_tasks/{id})
	DeleteIncidentRoleTask(ctx echo.Context, id string) error
	// Retrieves a incident_role task
	// (GET /v1/incident_role_tasks/{id})
	GetIncidentRoleTasks(ctx echo.Context, id string) error
	// Update a incident_role task
	// (PUT /v1/incident_role_tasks/{id})
	UpdateIncidentRoleTask(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// List incident_role tasks
	// (GET /v1/incident_roles/{incident_role_id}/incident_role_tasks)
	ListIncidentRoleTasks(ctx echo.Context, incidentRoleId string, params ListIncidentRoleTasksParams) error
	// Creates a incident_role task
	// (POST /v1/incident_roles/{incident_role_id}/incident_role_tasks)
	CreateIncidentRoleTask(ctx echo.Context, incidentRoleId string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/cancel)
	CancelIncident(ctx echo.Context, id string) error
	// List incident_custom_field_selections
	// (GET /v1/incidents/{id}/custom_field_selections)
	ListIncidentCustomFieldSelections(ctx echo.Context, id string, params ListIncidentCustomFieldSelectionsParams) error
	// Creates a incident_custom_field_selection
	// (POST /v1/incidents/{id}/custom_field_selections)
	CreateIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Mitigate an incident
	// (PUT /v1/incidents/{id}/mitigate)
	MitigateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/resolve)
	ResolveIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident feedbacks
	// (GET /v1/incidents/{incident_id}/feedbacks)
	ListIncidentFeedbacks(ctx echo.Context, incidentId string, params ListIncidentFeedbacksParams) error
	// Creates a incident feedback
	// (POST /v1/incidents/{incident_id}/feedbacks)
	CreateIncidentFeedback(ctx echo.Context, incidentId string) error
	// List incident status page events
	// (GET /v1/incidents/{incident_id}/status-page-events)
	ListIncidentStatusPages(ctx echo.Context, incidentId string, params ListIncidentStatusPagesParams) error
	// Creates a incident status page event
	// (POST /v1/incidents/{incident_id}/status-page-events)
	CreateIncidentStatusPage(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// List incident postmortems
	// (GET /v1/post_mortems)
	ListIncidentPostMortems(ctx echo.Context, params ListIncidentPostMortemsParams) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	ListIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// Get service incidents chart
	// (GET /v1/services/{id}/incidents_chart)
	GetServiceIncidentsChart(ctx echo.Context, id string, params GetServiceIncidentsChartParams) error
	// Get service uptime chart
	// (GET /v1/services/{id}/uptime_chart)
	GetServiceUptimeChart(ctx echo.Context, id string, params GetServiceUptimeChartParams) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// Delete a incident status page event
	// (DELETE /v1/status-page-events/{id})
	DeleteIncidentStatusPage(ctx echo.Context, id string) error
	// Retrieves a incident status page event
	// (GET /v1/status-page-events/{id})
	GetIncidentStatusPages(ctx echo.Context, id string) error
	// Update a incident status page event
	// (PUT /v1/status-page-events/{id})
	UpdateIncidentStatusPage(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
	// Delete a workflow_custom_field_selection
	// (DELETE /v1/workflow_custom_field_selections/{id})
	DeleteWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Retrieves a workflow_custom_field_selection
	// (GET /v1/workflow_custom_field_selections/{id})
	GetWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Update a genius_workflow_custom_field_selection
	// (PUT /v1/workflow_custom_field_selections/{id})
	UpdateWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Delete a workflow task
	// (DELETE /v1/workflow_tasks/{id})
	DeleteWorkflowTask(ctx echo.Context, id string) error
	// Retrieves a workflow task
	// (GET /v1/workflow_tasks/{id})
	GetWorkflowTask(ctx echo.Context, id string) error
	// Update a workflow task
	// (PUT /v1/workflow_tasks/{id})
	UpdateWorkflowTask(ctx echo.Context, id string) error
	// List workflows
	// (GET /v1/workflows)
	ListWorkflows(ctx echo.Context, params ListWorkflowsParams) error
	// Creates a workflow
	// (POST /v1/workflows)
	CreateWorkflow(ctx echo.Context) error
	// Delete a workflow
	// (DELETE /v1/workflows/{id})
	DeleteWorkflow(ctx echo.Context, id string) error
	// Retrieves a workflow
	// (GET /v1/workflows/{id})
	GetWorkflow(ctx echo.Context, id string) error
	// Update a workflow
	// (PUT /v1/workflows/{id})
	UpdateWorkflow(ctx echo.Context, id string) error
	// List workflow_custom_field_selections
	// (GET /v1/workflows/{id}/custom_field_selections)
	ListWorkflowCustomFieldSelections(ctx echo.Context, id string, params ListWorkflowCustomFieldSelectionsParams) error
	// Creates a workflow_custom_field_selection
	// (POST /v1/workflows/{id}/custom_field_selections)
	CreateWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// List workflow tasks
	// (GET /v1/workflows/{workflow_id}/workflow_tasks)
	ListWorkflowTasks(ctx echo.Context, workflowId string, params ListWorkflowTasksParams) error
	// Creates a workflow task
	// (POST /v1/workflows/{workflow_id}/workflow_tasks)
	CreateWorkflowTask(ctx echo.Context, workflowId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScimUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetScimUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScimUsersParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "startIndex" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndex", ctx.QueryParams(), &params.StartIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startIndex: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScimUsers(ctx, params)
	return err
}

// PostScimUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostScimUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScimUsers(ctx)
	return err
}

// DeleteScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScimUsersId(ctx, id)
	return err
}

// GetScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScimUsersId(ctx, id)
	return err
}

// PatchScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScimUsersId(ctx, id)
	return err
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// CreateAlert converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAlert(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAlert(ctx)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// DeleteCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomFieldOption(ctx, id)
	return err
}

// GetCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomFieldOption(ctx, id)
	return err
}

// UpdateCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomFieldOption(ctx, id)
	return err
}

// ListCustomFields converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomFields(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomFieldsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCustomFields(ctx, params)
	return err
}

// CreateCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomField(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomField(ctx)
	return err
}

// ListCustomFieldOptions converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomFieldOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_field_id" -------------
	var customFieldId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, ctx.Param("custom_field_id"), &customFieldId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_field_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomFieldOptionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCustomFieldOptions(ctx, customFieldId, params)
	return err
}

// CreateCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_field_id" -------------
	var customFieldId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, ctx.Param("custom_field_id"), &customFieldId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_field_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomFieldOption(ctx, customFieldId)
	return err
}

// DeleteCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomField(ctx, id)
	return err
}

// GetCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomField(ctx, id)
	return err
}

// UpdateCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomField(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// DeleteIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentFeedback(ctx, id)
	return err
}

// GetIncidentFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentFeedbacks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentFeedbacks(ctx, id)
	return err
}

// UpdateIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentFeedback(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[name]", ctx.QueryParams(), &params.FilterName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[name]: %s", err))
	}

	// ------------- Optional query parameter "filter[slug]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[slug]", ctx.QueryParams(), &params.FilterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[slug]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// GetFunctionalityIncidentsChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionalityIncidentsChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFunctionalityIncidentsChartParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionalityIncidentsChart(ctx, id, params)
	return err
}

// GetFunctionalityUptimeChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionalityUptimeChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFunctionalityUptimeChartParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionalityUptimeChart(ctx, id, params)
	return err
}

// DeleteIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentCustomFieldSelection(ctx, id)
	return err
}

// GetIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentCustomFieldSelection(ctx, id)
	return err
}

// UpdateIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentCustomFieldSelection(ctx, id)
	return err
}

// DeleteIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRoleTask(ctx, id)
	return err
}

// GetIncidentRoleTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRoleTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRoleTasks(ctx, id)
	return err
}

// UpdateIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRoleTask(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// ListIncidentRoleTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoleTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_role_id" -------------
	var incidentRoleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, ctx.Param("incident_role_id"), &incidentRoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_role_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRoleTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoleTasks(ctx, incidentRoleId, params)
	return err
}

// CreateIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_role_id" -------------
	var incidentRoleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, ctx.Param("incident_role_id"), &incidentRoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_role_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRoleTask(ctx, incidentRoleId)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[status]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[status]", ctx.QueryParams(), &params.FilterStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[status]: %s", err))
	}

	// ------------- Optional query parameter "filter[severity]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[severity]", ctx.QueryParams(), &params.FilterSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[severity]: %s", err))
	}

	// ------------- Optional query parameter "filter[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[type]", ctx.QueryParams(), &params.FilterType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[type]: %s", err))
	}

	// ------------- Optional query parameter "filter[user_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[user_id]", ctx.QueryParams(), &params.FilterUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[user_id]: %s", err))
	}

	// ------------- Optional query parameter "filter[environments]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[environments]", ctx.QueryParams(), &params.FilterEnvironments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[environments]: %s", err))
	}

	// ------------- Optional query parameter "filter[functionalities]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[functionalities]", ctx.QueryParams(), &params.FilterFunctionalities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[functionalities]: %s", err))
	}

	// ------------- Optional query parameter "filter[services]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[services]", ctx.QueryParams(), &params.FilterServices)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[services]: %s", err))
	}

	// ------------- Optional query parameter "filter[teams]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[teams]", ctx.QueryParams(), &params.FilterTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[teams]: %s", err))
	}

	// ------------- Optional query parameter "filter[custom_field_selected_option_ids]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[custom_field_selected_option_ids]", ctx.QueryParams(), &params.FilterCustomFieldSelectedOptionIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[custom_field_selected_option_ids]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// CancelIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CancelIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelIncident(ctx, id)
	return err
}

// ListIncidentCustomFieldSelections converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentCustomFieldSelections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentCustomFieldSelectionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentCustomFieldSelections(ctx, id, params)
	return err
}

// CreateIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentCustomFieldSelection(ctx, id)
	return err
}

// MitigateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) MitigateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MitigateIncident(ctx, id)
	return err
}

// ResolveIncident converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentFeedbacks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentFeedbacksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentFeedbacks(ctx, incidentId, params)
	return err
}

// CreateIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentFeedback(ctx, incidentId)
	return err
}

// ListIncidentStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentStatusPages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentStatusPagesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentStatusPages(ctx, incidentId, params)
	return err
}

// CreateIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentStatusPage(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// ListIncidentPostMortems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentPostMortems(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentPostMortemsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[status]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[status]", ctx.QueryParams(), &params.FilterStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[status]: %s", err))
	}

	// ------------- Optional query parameter "filter[severity]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[severity]", ctx.QueryParams(), &params.FilterSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[severity]: %s", err))
	}

	// ------------- Optional query parameter "filter[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[type]", ctx.QueryParams(), &params.FilterType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[type]: %s", err))
	}

	// ------------- Optional query parameter "filter[user_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[user_id]", ctx.QueryParams(), &params.FilterUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[user_id]: %s", err))
	}

	// ------------- Optional query parameter "filter[environments]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[environments]", ctx.QueryParams(), &params.FilterEnvironments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[environments]: %s", err))
	}

	// ------------- Optional query parameter "filter[functionalities]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[functionalities]", ctx.QueryParams(), &params.FilterFunctionalities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[functionalities]: %s", err))
	}

	// ------------- Optional query parameter "filter[services]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[services]", ctx.QueryParams(), &params.FilterServices)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[services]: %s", err))
	}

	// ------------- Optional query parameter "filter[teams]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[teams]", ctx.QueryParams(), &params.FilterTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[teams]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentPostMortems(ctx, params)
	return err
}

// ListIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[name]", ctx.QueryParams(), &params.FilterName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[name]: %s", err))
	}

	// ------------- Optional query parameter "filter[slug]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[slug]", ctx.QueryParams(), &params.FilterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[slug]: %s", err))
	}

	// ------------- Optional query parameter "filter[backstage_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[backstage_id]", ctx.QueryParams(), &params.FilterBackstageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[backstage_id]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// GetServiceIncidentsChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceIncidentsChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceIncidentsChartParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceIncidentsChart(ctx, id, params)
	return err
}

// GetServiceUptimeChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceUptimeChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceUptimeChartParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceUptimeChart(ctx, id, params)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// DeleteIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentStatusPage(ctx, id)
	return err
}

// GetIncidentStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentStatusPages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentStatusPages(ctx, id)
	return err
}

// UpdateIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentStatusPage(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// DeleteWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflowCustomFieldSelection(ctx, id)
	return err
}

// GetWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflowCustomFieldSelection(ctx, id)
	return err
}

// UpdateWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflowCustomFieldSelection(ctx, id)
	return err
}

// DeleteWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflowTask(ctx, id)
	return err
}

// GetWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflowTask(ctx, id)
	return err
}

// UpdateWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflowTask(ctx, id)
	return err
}

// ListWorkflows converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflows(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflows(ctx, params)
	return err
}

// CreateWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflow(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflow(ctx)
	return err
}

// DeleteWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflow(ctx, id)
	return err
}

// GetWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflow(ctx, id)
	return err
}

// UpdateWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflow(ctx, id)
	return err
}

// ListWorkflowCustomFieldSelections converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflowCustomFieldSelections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowCustomFieldSelectionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflowCustomFieldSelections(ctx, id, params)
	return err
}

// CreateWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflowCustomFieldSelection(ctx, id)
	return err
}

// ListWorkflowTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflowTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow_id" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, ctx.Param("workflow_id"), &workflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflowTasks(ctx, workflowId, params)
	return err
}

// CreateWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow_id" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, ctx.Param("workflow_id"), &workflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflowTask(ctx, workflowId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scim/Users", wrapper.GetScimUsers)
	router.POST(baseURL+"/scim/Users", wrapper.PostScimUsers)
	router.DELETE(baseURL+"/scim/Users/:id", wrapper.DeleteScimUsersId)
	router.GET(baseURL+"/scim/Users/:id", wrapper.GetScimUsersId)
	router.PATCH(baseURL+"/scim/Users/:id", wrapper.PatchScimUsersId)
	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.POST(baseURL+"/v1/alerts", wrapper.CreateAlert)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.DELETE(baseURL+"/v1/custom_field_options/:id", wrapper.DeleteCustomFieldOption)
	router.GET(baseURL+"/v1/custom_field_options/:id", wrapper.GetCustomFieldOption)
	router.PUT(baseURL+"/v1/custom_field_options/:id", wrapper.UpdateCustomFieldOption)
	router.GET(baseURL+"/v1/custom_fields", wrapper.ListCustomFields)
	router.POST(baseURL+"/v1/custom_fields", wrapper.CreateCustomField)
	router.GET(baseURL+"/v1/custom_fields/:custom_field_id/options", wrapper.ListCustomFieldOptions)
	router.POST(baseURL+"/v1/custom_fields/:custom_field_id/options", wrapper.CreateCustomFieldOption)
	router.DELETE(baseURL+"/v1/custom_fields/:id", wrapper.DeleteCustomField)
	router.GET(baseURL+"/v1/custom_fields/:id", wrapper.GetCustomField)
	router.PUT(baseURL+"/v1/custom_fields/:id", wrapper.UpdateCustomField)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.DELETE(baseURL+"/v1/feedbacks/:id", wrapper.DeleteIncidentFeedback)
	router.GET(baseURL+"/v1/feedbacks/:id", wrapper.GetIncidentFeedbacks)
	router.PUT(baseURL+"/v1/feedbacks/:id", wrapper.UpdateIncidentFeedback)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id/incidents_chart", wrapper.GetFunctionalityIncidentsChart)
	router.GET(baseURL+"/v1/functionalities/:id/uptime_chart", wrapper.GetFunctionalityUptimeChart)
	router.DELETE(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.DeleteIncidentCustomFieldSelection)
	router.GET(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.GetIncidentCustomFieldSelection)
	router.PUT(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.UpdateIncidentCustomFieldSelection)
	router.DELETE(baseURL+"/v1/incident_role_tasks/:id", wrapper.DeleteIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_role_tasks/:id", wrapper.GetIncidentRoleTasks)
	router.PUT(baseURL+"/v1/incident_role_tasks/:id", wrapper.UpdateIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:incident_role_id/incident_role_tasks", wrapper.ListIncidentRoleTasks)
	router.POST(baseURL+"/v1/incident_roles/:incident_role_id/incident_role_tasks", wrapper.CreateIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/cancel", wrapper.CancelIncident)
	router.GET(baseURL+"/v1/incidents/:id/custom_field_selections", wrapper.ListIncidentCustomFieldSelections)
	router.POST(baseURL+"/v1/incidents/:id/custom_field_selections", wrapper.CreateIncidentCustomFieldSelection)
	router.PUT(baseURL+"/v1/incidents/:id/mitigate", wrapper.MitigateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/resolve", wrapper.ResolveIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/feedbacks", wrapper.ListIncidentFeedbacks)
	router.POST(baseURL+"/v1/incidents/:incident_id/feedbacks", wrapper.CreateIncidentFeedback)
	router.GET(baseURL+"/v1/incidents/:incident_id/status-page-events", wrapper.ListIncidentStatusPages)
	router.POST(baseURL+"/v1/incidents/:incident_id/status-page-events", wrapper.CreateIncidentStatusPage)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems", wrapper.ListIncidentPostMortems)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.ListIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/services/:id/incidents_chart", wrapper.GetServiceIncidentsChart)
	router.GET(baseURL+"/v1/services/:id/uptime_chart", wrapper.GetServiceUptimeChart)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.DELETE(baseURL+"/v1/status-page-events/:id", wrapper.DeleteIncidentStatusPage)
	router.GET(baseURL+"/v1/status-page-events/:id", wrapper.GetIncidentStatusPages)
	router.PUT(baseURL+"/v1/status-page-events/:id", wrapper.UpdateIncidentStatusPage)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)
	router.DELETE(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.DeleteWorkflowCustomFieldSelection)
	router.GET(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.GetWorkflowCustomFieldSelection)
	router.PUT(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.UpdateWorkflowCustomFieldSelection)
	router.DELETE(baseURL+"/v1/workflow_tasks/:id", wrapper.DeleteWorkflowTask)
	router.GET(baseURL+"/v1/workflow_tasks/:id", wrapper.GetWorkflowTask)
	router.PUT(baseURL+"/v1/workflow_tasks/:id", wrapper.UpdateWorkflowTask)
	router.GET(baseURL+"/v1/workflows", wrapper.ListWorkflows)
	router.POST(baseURL+"/v1/workflows", wrapper.CreateWorkflow)
	router.DELETE(baseURL+"/v1/workflows/:id", wrapper.DeleteWorkflow)
	router.GET(baseURL+"/v1/workflows/:id", wrapper.GetWorkflow)
	router.PUT(baseURL+"/v1/workflows/:id", wrapper.UpdateWorkflow)
	router.GET(baseURL+"/v1/workflows/:id/custom_field_selections", wrapper.ListWorkflowCustomFieldSelections)
	router.POST(baseURL+"/v1/workflows/:id/custom_field_selections", wrapper.CreateWorkflowCustomFieldSelection)
	router.GET(baseURL+"/v1/workflows/:workflow_id/workflow_tasks", wrapper.ListWorkflowTasks)
	router.POST(baseURL+"/v1/workflows/:workflow_id/workflow_tasks", wrapper.CreateWorkflowTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9eXPbONIw/lVQfH5bSeaVNJIsn29t7ZvDk/FOrid2dp99xikVREISxiShEKQdz1S+",
	"+68A8AAp8JREHcY/iUXiYnej0Y2+/jJM4iyIi1yfGhd/GdScIwfyP6HpY+KOsY+cse/h2Qx54wX0oMPf",
	"LjyyQJ6PEf+FXRNbyPXHcieTuBZmP1kL5AaOcfG78fLdO6NjfPj44dL42jH8xwUyLgzqe9idGT86JQON",
	"Zx4JFvJwV9dGx3j54T/RmB3j+vLG6BhfPrD/G8xwh11roxMsPEw87D9udBLqQz+gG5iCgUdg3EdOagIf",
	"0jujY0yJbZOHcbBQjhk+gJ4HH3PnCCEUkVZ2ojmezY2O4SALB47RMWzy0HwuAaicmcgCuQbrOF54ZOYh",
	"So2OYULXRLaNLKNjWMRF9eZeaU8k+EXuPfaI6yDXXxOSk7GngcsBBO31UelmdnAyavxINF7z6GvkCdIW",
	"Rd49NtEGxr1H3iYwt1aekgx7jyme4DXSWj6LQt+hs7CR0TF8RH2jY7jEc6BtdPixZwVsU9fazYXcg/rQ",
	"8wWbQD4yxZ/QvHPJg42sGf/pYB/PoHjlIUrse/6nzGOSpS1xIsK+xq+76BjgWQYb9pgQYiPoqsaIxIDs",
	"LpM4qnotol96OgtR08MLwQyNl3wICvw59EHYHvhzBB6Idze1yUPP6KjmG5seghFsk6fBwoqeUopnLrLG",
	"AUWe9JwGjgO9R+mJtCC5Hcex9CA6wKVHPoKO3ITa0Lwbm8RxoFsFOz8Y9r8F2EMWP0plMCe9yeQPZPqs",
	"N7Ss1CnGzt5c2SwGgE8EDLC1DP6bOQLsJcAW8OeYAjE8YMMD9jMcBPjEUHxOajDV2PJw0tuearAFoT5b",
	"bMLUsYNs7CI1kUbNQ6DPoesiO01qGWHVkgZKpnWhgxQvfijgn90XskxX/O1RS5mamQAjyTNcvlHRTMKA",
	"i+cQ7eQZmgsy4S6pMKloqEQoJ88lnpGmYcXsmV0RLSUGhAT3vE3iERttYnewcStsi5iC+TryRhaDsTEA",
	"tPh/jO9FfWsBlA1VDsmlZeWBT2ypCSF3DvTusoCE7uPHqXHx+19p5oV9fsTa2L0zvv7opN8ubPjIxuOz",
	"/vjayWAj3L2b2LPIIX9gNQKiDwS8jZKE+dcUd2ZNeuBz+LEAT4FLfABB9MlxSzXTkwCjnCceBvOx42kx",
	"BWQKoBsTTNyy3l5M41p9aHHUFkOBt2kKhgydRtSQR57s2C3e3VzbyAUp6w+wVQ9OrFP5Fosnzl07iY+1",
	"4k9A96GSp1h/OADgbSqfq1s8KPOhmoBDSXqBZytkRvDl8zswJUJQTEOjnLoEYJX4sZHnL4MjlDTHUIGO",
	"N9BHbB/yNuyRSkiCPlR8hCUUIWgD3qBjuIFtwwnbab4XIBUrS7R/hThwKb0F0PchUyCiU0V8WifBOLTt",
	"kIn/fx6aGhfGf/2c3Aj+HF4H/izfN/z4WgHRNpxkaSv7WWng3iGFkPEbemRA5diFMxVM76EdKFjSv9jj",
	"wq4ZYmDTR6NV+b5Qe1eA/zp8sy7QR/cElcBOSeCZOSxavIuAwlcDnqPZBfgTuRaidy8kgXEBZ8izAp8B",
	"hSzoDLmYnen32PSJRxZM9mLEapEZ16In9rnRMcJxuM4FXUbJf2AP1hcrw5eplapwH+pbhfvRhtQHomEp",
	"DYTA60iSprTlU/Plco2xjamCdURbP4fRQt/38CTwUQ26EGBRUoXqvPvi4m8BAldvSsG6LzS0dIyw1dAK",
	"0q8VfXVHBnwlrobduxooEs0VKMqsKOT7onk+aXmILohLUT55aarafapS4T4f52WGN9GqiVUh03PMT+zV",
	"rmCzQyY4bz5m7pUjJ7RWLhvFV4XXjBu4zPPMOb5HGbG8WCnYIeFdufry/aJoKYGEi07jcCOPLUjnEwI9",
	"qwQqSbt2b/92Va/Kg2I5dpRtJfwEPhmLuy9xhxRx4mL81LoOU6qwkTFkIzBVwjDvSxvcsknLrwTU+Kir",
	"dvGWDJ69dEPUhDYU3gfExuaj6uptudEGYHwIFJBIIGu6aM1OIGQZRmmHv52Sb13/hjKhbY8XiCzKbAAm",
	"cf3cSzYHUQpniGnxEwQ8BC0weQQ++u53fdK9J9hEKtBGkFoekL9RXc/NiYvGbuBMSoQX4CETLzC/6mV9",
	"gOhjVDACK5EiwakcCelVht/ZiUGoxoNrIjs25zVUX+Jrsk9Sqym06dJVUmjYErwsRN8yGP89fwQPkKZs",
	"LSC2if0j/x6u/FxOQBsNXIG616k7mDBQqYkrX2CWWXmlJ5E2J5ZSCsyyDZMdbpmV2cEsR7u0g1lp93Xf",
	"JUXbosb9EV9be/dHAhTNNf1cUC6zF+4ic4j3MgJlbdzL7C+2KvMsvlXGEHs+4xNj8a+HTOJZxcf3BFI0",
	"VtoPuGUSUgTE9f7Sx5sB9YkznmJkW3TswMWCvVga5jVvBngzELai4J/XHz9IUpUs+bCV5/Mz/j5XDFAf",
	"0QXAKcdVDKDU2oqQQKELxzSYiMUUy07cCS08EtYtRC6gxx2A2ApyDeO8DWBtQEKVlUEqf2pdq3fYDUQ+",
	"DyWiU/pjOrGrhATDUqRsHSMeYX/uwPXGEljqYq8IdR3jgXh3dAHNDShHGbpIZpLAW5c6TOJO7QC5plBQ",
	"S5yeXBNRn3itInFDwCymjgxY1kkiWethiEHRugBT0X2cS3zEPX4KURX5nivE4rA/4E0kCwmhvkM8HzlG",
	"x/ACl7Xhzn/3iHJvYyHdW8QMHOT60W8PLUjOjTq/4BRDjn3kLGz2GSp2/IlQH4iGIGrIFOeAIvAwR26o",
	"XbizePEdgKdMbWBQ7NXl3VlI1sVuDMFqGI5acXgXIdgjiwn5Pl7ABbfclO1GRuob2xzhoTMltoW8jUyw",
	"fuJY8PsWSFekjiU01KWPeB21CKSAMmbYnweTMaY0KKGJCbFy5FneGfD3iq9hu5hin3iPbXNa+dvqAlp8",
	"UzUgS19YgdnOCJnZaGxCG7kW9Mbc6avkcPR95FpI5dtz6UBsC3/LuFFnKYAi//rNhO54FiDq0zF277GP",
	"xsSfh7d9y47tUmuHWHj6OI59AQsbUxSOGz5Qd7DgIx0Hro/tsYOQr1R8+J0OfKSAtwNRu47hwO/YYeg/",
	"GnQMB7viRz/+4vBGssqd0ZLvooqs0XfTDiw0fkDoDoXhPcufFK5vbAUeVE/4XrQAUQuAXTAlngN9YOM7",
	"BJ4NwJwE3rMOeHbUBw52mVL7bA1BChS5VhggovQZcy0AXYAYfcX+YhGJsXMKTx/Zuv05ciKVXhBDRzVZ",
	"kXeVgHfi4lSLpyq3U85ud9CYTAtoC4tbvbCBhIlff714/97IG/NP4sYro9ynwPWR58LQh5Jf1r3DLgL/",
	"FjFeLx3kYRO64Bo6BBod4z22HuAjuKI25HLTr/ABYsxa2pDesRafoImn2AR8ic+/XIPboN8fnoDX0IUW",
	"fGF0jBv8RyAcSV56+E/C/3o9x/MAzgM+B/wT+jZktPyeBK4PsVsw2mvk+h60QbhU6Ul+n7cBtKAN/4Ae",
	"nw99xyYBrzH3i3lPGEg8rvBfs2/yzTl64Kt5RWaEX2pdQsrAVjDDlWth6ELwnDVlD95hh/X87wDzaIeX",
	"7AP9GEzS50APmpBxxreIeDPkkwc29TsIPsE/GXgD5PkEfMYm4Qt0fQxn7M8P6GFKAtcKEfPKgxTbmM35",
	"KkAuoeAl9jjHfesh5Iat+MfeYwsRgdtutC62xD+J6PAaLhD4F/IsBK54ZMxrSOHEhi6H9ptgYmO2xEsL",
	"u5PA4/HF7zCdcGb0jrgWEZh0PXLP1/Pl5jUnLQZDCzJB+xWyZx60EP/TE8O9Qp4rvsPH1Ib3/Eu8gFJk",
	"U/5RFlwIIn1NFsidwxkP03n3RzCx/xDk9R5aHr8r+AQ9zDp98uAsYLN8Jvz+6Bp68A90zyF5RxZ/8Gc+",
	"Me/mxGbr+hdGLh/p39Cj8IH9gagPYpKbhhT3v3DmoQn7I/CwOef4nSNXrNOcQy9cKMQe4ZvGgx6b61dk",
	"U+zesf3zT+QFFNpc7/gN2tjFLgMJ+/WI7/nakU88DsDPeMb+uyZT/vMG2jZ2Xb5e28U8uOcVnM0t3v2K",
	"+tCdBDYbKXiA2OeYdrlD13tCTR4/9YGtbIL52I/QmnM49MAn5COPMqSywYk9I+GabtDc41vi5SQAb+aQ",
	"d30F7wI2aEBNfmV/DR2xwW4m2MaUNfkP8tA97/gbFGu6vIM+8gTl8NXa0IET8eFsK8wx/0I6vxMM+/Wc",
	"oYQ9/I3Yd+KO+X3gTPijD+gBvEE273PtYfBP+AgfoGchFy0CvpTfoD93oGsFnGU5kG/5lwxEnJbnkPOw",
	"L17gfOPQgO6McPp9Bd3ZHdcFf4Uu4RiDd9Dj8//mQeqSR+hxoH4g94TiCRa/XiH8hzj2X8+JO/sm/v6V",
	"uDPwG+F/X3l3gc/b/hZAG4J3gbMIPIZx5PkcE9idwQXhFHMD8QKx2b/YELoTCH3Imn6kYuHXcLEgnMau",
	"EeHwvSF3j+z3f2A0y0sL2RDzzfYGeg9is3mYTqCLOJG6E+RxYL0N+O78lUwg90t8j+wJCTze7BPxfPCe",
	"cYgJ55SPlstZ5r9saOF7Qn0Oq/dwBi2Ob4aa19BGFnGxIF6bOMQNOcq1hywX3RH70RFrDMy7kEX9gv/g",
	"2IaOOYf+ndjXHp1D2w47/xsx+p/5HE+v59CfQyd89SG4C55Bm0wFcMQZdkPukA0D3uRrFUulLEHLsqtC",
	"Clw+uxWSlewkLZ/r5aK4RUxaQSkutMlzxSxqoTJUevh+T7Vp5DmYUkxchZj4iX221CJrgtjojQ2D+Ur6",
	"eBb/zbTxNSniYi0RWRd7FZZpMJEEW6LD7F9Yc6EeEX31appExGJqRP9WZDcJmAuj65LApjG2lPkQ8tX5",
	"VKaU+t2jGMGa3VK5Tup3X3j4Hvq5aioPNqo/apR1ZJxDhYWkFLvfNKSl2LOo7rVTNO+auMof2IPh5V4l",
	"22noCMfDzrnqnxNmHwWZs4bPqLgl6NWyZy+tuJSpiSu5spDSJMwvbwTRQn1IicNUAKzEussbqUcpzL0Q",
	"vQXYAtC1gIXpwoaP3PreMzqbMo/muyOEDcAdUudKEGYY5JVSRdSwnCqK8kaId21BJ9oV4QV4uJtz74Mf",
	"F6itlRWxl+VtvcL9dnlcskxCy5sksQsrgFmNNx04T9o94lqNS2r+tjf8rRoXaZF7RLyiGo9gygj0qnCJ",
	"NW3V3aJtRison4x24iySUaSmIwSdwmwn7XzCmqg5FswRv8YTGCqn4MzR2AYlH6Asu0f7IYXwJ7Av8qXC",
	"qjvFwaZHKJn6Y5G8sNJVWL5Pc3QblBvctIeXX+JVyeWXaFTzwiIH+OW3YCF4o2kL8OsSEcpZetEektJC",
	"GSQlcS1+/dqWlLmrPmUSVCuEykmQLcBUdOfmkoeKl5ZpD+9ljCXv20JY+SkaXbWVXZLv1AlYRAoqtG37",
	"ApLOieebgT+mPvEeSxR9nrgBFqRsTRrsHRlZAfcOzpVeiPcILCbWMX7x/Or649lJfxD6H71QcoVsDvBJ",
	"MDM6hjkXNu0pgn7gqSWPIu1frKRQ+yf5p1Cka+/CbkhRXiv7IAFOJ0XM5Q7a8WLrBtPsBavlDstlbFYc",
	"TYJNlKgrNPK1rXNQpkBc+aiM15P+zKoxML6HbJuMTVgWMbiLvI+nW8lLrgo9a2foi4F3Nf6by3mLTUyt",
	"if5RDPbyytmbXWC3EqXX5bUcffX4rCDNEC4F++8BTdD3aprkAlL6QPIIPlKv4lYHoVEWITQFOjVKyQKb",
	"xeASTUqxylsVoDHMljf2sXmHylURpyA/MRsAhG3U1qGdO1+zgt7CIxPh0yplZP8WIBrxvjx74I5d5hVd",
	"Z4SICtvkaMUzWtiZNaitT6dJrVxOCEMdK9x//EmIU40V8ZxEIpQ+tExGi3QJ9xO1icmLxJg2CdTsNg5F",
	"LjJoxcEdAUUAT5OrCVhk3NKMMkMxEl63xiclk/aOZNmRV1Qh2U6c7LMk2056WBVp4fx1Rm+LR0tCxRLg",
	"5+a++vcceWhpMIApiDt3lpIvjZl0KfHvcVh1iRc7y7ziRZgC5Sv5UjL7TmyWgnnUDaTZpAYqqs7BaHJb",
	"PScPbiPAiZ77DzX1nJVKY1XMHVWyGdadQkrs0XB1EYalJtL2q5loSvqQFvNNyeBbIZFRCRaWjg3Z/egw",
	"k1DJ6CQLdeIXk9gi3ccyjc/Rd8Bfq0AcDZgr9DQ/55ofHkuLSs6QlTdhbkkJtqh7uaxEJTBlkCnG7oTo",
	"WM8OFlNvZyNH372e/VxAbEXbOuz2ZHZ3OwnnngCWK6emk5fRNvAP4KysCudMVeOcE6xUudmGAiYvfW3J",
	"TtODNkx5WjLIDiQ+lWOwWjvFSitaVdphJcDNbrBU4a5DPK1kVLbBKA8Ji5W5pOcRj+bsFPGyYK+YxEKV",
	"uKiF/PAqs7Rp4oCfb4iqZmkKRyoncdU14lLh+n06QNKLr3CEKCJXi+oAUkpMzL4KPGB/LqrYRqXlyq+X",
	"qp1X2W9YPvZ4IiNxSZ6fXitbOC9ZZn48atkHLIKJjc1xKWZEu7UgqNrxXAqzHTig03HOrR3RadA0Z++l",
	"IM4yeLkDPtDU5WmctnFWHyA6qx7ZM+RH+RFN4jjYpxVL+kjh+EtVfcIBk3yIPK03VdX2mXjQNec5zkXi",
	"nQKOeRPUSzcAqV+QkO9X8gCm0AMTaN4xfj9FvjkHIZDA8yQp3LNBmI4vzM1nwUfK/wQOcf05+xv5Zu/F",
	"jhY+zkuskIaGIPKwLcDOAprsxJ48FleDr2I+XSbBCnnjI9JII7GAwm24ZgpnA26UwpUTaArfXwqXSHDt",
	"FL4IbIpo84wyKlhI7RvDQ+Ejqcm2Gtl6aFo71U17hC4qqNZcYO7uEORbxRu7bDPMfX8xNm1cGqqkzmP9",
	"683NJ57CWunyJHI0hxX/l97OEbTClMnpQf95/fEDcOCCwZ1PELZUzuEgf06snJWJl3IN2Le8Su2nj9f8",
	"vy/s3zeX7y5vLo2O8fHTzdXHD9dqH8AYLCVr/RYg7xHw5jxhZW9XuXxgmghZY+KO89Iu8O8J8y6YxELV",
	"nQIlqlJCU00SS4nCsiv8WlCIUqHamHcuebCRNStRupOGVW/9V79X8pFZNoBoJEZY/RKJyU/SRRK4evOM",
	"suNA3NFENzQSS2t+RaPMpra8ml/kZptcTyo92/I6bhB0Njl9Ks0b3Tp28qLY3vHn+ZPSHkCzC/DXrbGw",
	"oc9khlvj4tYg9Put0QG3xj3yKCburXEBbo1Bb3h+a/zIp9xkA4deYiWbIfElq7IbuGPZfcmQifdZpUvA",
	"tLCwjL7rUELYIOoyuflUaxANwNWbwiVUMQR4ZSjhbSoNVpQyMHwZ3QnVWWRRuR/2SjHmxi9l41pPNW5l",
	"YwYBOT8cMwLZvjdyHMopVgWwqENUipX8OkfsTRYnmdEjAYLHYnSMKbFt8jAOFqvEZVSbcY55sngHWThw",
	"eKzAg3LSCjmqZODx+g/KCcmC54jH7njhkZmHKDWiCrs2dwq1iKuOQ26ynzKL2Pg+SBKArroT2jNTKPdh",
	"8+vtqqDPKzUsL+MwTRdKdLdhwXgimK5q1YjXkfKPo8gO9Y8lmItXKPZjLL5B4Wwp7AFED4AtMCVe+JjH",
	"zTmB7eNwUn5UUJVbcJZ0q/r4ln1i3dT7kf+vChINQLwFJpcDiNV3QT6Iq28I9RAHzgVzSKNVhvjEqaI2",
	"x4wLua1XWI+HrS7gZaqIJWMR0ww8r2QxvBFyzc3U1O8Y95jiCbZzpfXkfUV5HYtiYTZ79D38s5QOIhjJ",
	"IGkooYq77fbZtviENcgqufSSu/14jwPnwQKtrbLcQ8Jobf45RciaQPNOVdqauI8OUenaV1T4D4V9Qdz0",
	"H8oqiqsyY3mNy5wrXkUWHXE31QUlzK/TKd4VDRficdQ56gw7g04/gTDjirM1BdBly7XCsISUtJAERw25",
	"aDTWFhhp/Blr2HlFqM7dfFGnA+eoMYpbZaoHid3a3LX1XbUGcNeB8oFvHTn9Qb26euHLJVJmI4ZZdp9/",
	"dO1HgKcgkqRftGH53hdr35w8jKGNPJ+OoygGRbXnOXkAotVSrMMyOcvVudjwGW/mceRalDNPaICkiQtS",
	"PnLzJ+W28NK5RKvVZorWWzZXBgyrTSpnRFLMJeRdELVaaYr0pW0ObSSqKwXY5ZOtZ/IZ4sV11dM+EO9u",
	"aiffu9aZfUjv8ibm79Y8nafMwyWmY+/W9ZFVLd7IArCqDb2CpTB/jdFhZ3lwyibkEU2UMaKvazCGK+Gx",
	"1iuf0MlreT2BZ2e5ZOFq1mlil7MYta9zyAf6GgTTYhTmiqbSKp6OANWu+nHQiK6thrQJ+j3WQOrDldho",
	"N9IWxpTKl7S2vBnZYRuG5pYP08Sjpuqn7kDcb4pitnDucVCtgQ/m4S+XA7IOB37GcZS2ergdDDYbMVxR",
	"CGF33DNDV8lSNtTQWzIcvq6bZASknKoWObNs3j1XzNOcd/Jwl+0wUEF4a9h3ecAu3Heh3n/4rJRjuHV+",
	"emDIrc1ZxYWIqHK3Bz41Yf4bGkzYUBNlGOMH3gZA246ue9jXUSB3WukmyljPpVP0kQll3CMq7t+5vZe3",
	"wlPMndId4mKfeOJNdPHO3djb6sS2jxXY4QCy8/w98vD0UXQIy03kXJbJ1JYb0CMhDWCLx/QwhVokGrsv",
	"i+XJMrd1n2TRCiRqaXiuLW29LZxvy9t/K/4wS8s48ANvGfWtHnxPAeu1T0Lfw7MZ8nID8RNvWOJacd7t",
	"6KNevntndIwPHz9cKhnfcuexIkw6yfASDsuUC57UJZrmmofRf/nA/l+e56t6pkzU84ZmyeSejca6ujY6",
	"xssP/4mg0ykZXTn2UmLCtY7Ora5rHzWjPW8O8Kk457V/Rraa01oGzXojbAgyGQeFDc0SZVdcN5CiqOP1",
	"D5wSdDcFlVggXu/akxvjDS087TG/zsVDe4xdaPr4Phy8/AuurssWLiK2ZPEwzrL7HTJZnJe0p9xyTjyH",
	"O+4nonyV4i6Z8xqpZwuJykiSbLATWjrjDMkJKa1ZyMG3+VpGsWaRu+gYnVidBUhSAJfSAIUSQZ4Ao16I",
	"6FQUl/dShM8Afw59ELbnslTkP9JTVRMKdQy5TE+oaRihF4L0O9wm8hMhbEkPoqQGySM5L7P0OJNIQx4i",
	"dDVKHmWdq6Ql8kL98pJDT5PkEb8SgZTi2dIawow9xHGgW4UCsvePMiqLxcAQ2fuU+ji5hBKC8bqtgOGw",
	"q1oB84bZJUMde7MFPZwvaB23kDkgztXB+JY+bGWbo7RV/fpgsFlXiaZjcw699G1GxQHusY+WUrONyYLO",
	"kItRSQ1dVSK3jN8iGxaEDcHVm0q5A0NZZCNp4VTp28qgUI7ZeMl1gLyAM+RZgf9YLeMsoia0RXnBBbGx",
	"+bicdzZZxnKi2Q0ha3lVG8DazlBEjDI1SVRGfbUUw7xLQJlUu4zq+GXo416A842gZGn+VrM5SqDZeoHf",
	"HCSXc43lhuWUc49Nn3iMNT1t3pzAYUXuHMtJ6c+ZYk8Io4oSxDkvXPTdr6SrLDx0X60+DbKnFRKHslad",
	"cMXh6OFqwtV+LchDOM7PKFpJRLOiS5ZPUqsptCnKciOpPq6DKIUzpM7e/ABpWh6L7y/+USlvTc4ubuTM",
	"uk5pzUVhjNXGIR0Nl7n/iAcAoRRfmqwSuVaOgvgpsCkCyLXYWMjHXPUTmbWNC7YA1A0ftpXLlSeJXlOq",
	"0HiMbJc0nO+Qwr3sNxQ7VvhwVqNQ67/kBE7KrhlKY9NHo32tn+m+bk7P1QEssoLnXF3wd9Hn830CnqPZ",
	"BfiTESG9eyFdziViWMeIhfSOIc4EdiR0+BawyIxfv07sc6NjhOOw3Uyhy8j/D+zBPH+JXJcUQfi8xeqk",
	"X8cROwJ/tUSEXyvwQRHK2T4TNGHQ+EagBhNscKMnVra2m7xouAr3ZlXwxYfbBr7kcqw7ibZ0vdhS7IkK",
	"9eXoKylD27wQuCrVX4KOXIn933PkoaXBAKZAKq6/nJqBeI5sTpDksOyrJGp86ZUcW5Z9J0TzgnnUDaTZ",
	"pAYqhlx6sMzJg9sIcKLn/kMtJ41CbYuN2BqVuFG9osubZEpRZe5N86bYHLW82+foO+Cva1YOb85DlgZN",
	"WEnVLKGV1qjMBFqXQKoXQV83nRTW5t4UfVQoUrsPpbqbCir1Cg2vG+Ml5XT3Cue6um5cXXdJH93L8rpN",
	"t1TtWqDr3lWtXRNuso5R5PFU7CYiWlXOxyQcHsaRPCYGnsLA9uMvTE/0mncA0E2uOIkLxHU8pOAB2TZ4",
	"HmaqmoliZgC5bA1WQdIqyaNK11t6qvWW8pdxFZHazeNio1V76hVEkYugCHfJxH+youPkU6jwVO2IfCQB",
	"eICuz75U9FgJk7qs1KplpWo56hkbL0y1erDkutyNd2uYhs7PO13oq0Y2soopyL7utmm1WlmxHbit1pXG",
	"nk6lsRWscw2rJW1sW1UtlrTu+xV52rwTWzQC4lZ/SrzoImOp6kpyR7oXNZ3iKcW1Lf8y9F2Mnfpo2rii",
	"Uxa+tUizcYWajVFpTjKNNRPlOnNr7FKpmFrIrxo7vjFc5xfTWPeV1Npqc+xjbY3Swhi1qKZGoYCNEY46",
	"keQuiYZt55XcXELIphfedbPgbZRYcpLg7RLFHHBePFVSu9okVDXn18boqELKrx2WUvIygBXZOaplBCs3",
	"Z+gkXzuZ5Gt1CbJJJqKN7U91BPpeeQtsJyB95RO+YvjsujG/sOHjhJDNn+u7ZDyNNMJx7gVx1ILfFEe+",
	"5xGoKtCUNs+uM+hi3RYvWmry2twq6gQ71CC4quYSacx1mTuiIbfIvQ5INdmqspCC5zbwKXmK+8hZ2NBv",
	"444ilN+XbMviRXIBHS0JPMyRCxCbwZ0BmC7VUi7KVxM4pLJ9MSjWJnaoAL0NfPNwLh0JqiNBtxAJ6qHp",
	"Or/OQ9OmX6fs+nTiXPlcIs717oy+qOjF8xSCU/mIW+DLUlrRPb4JKPXh31LEwAz782Ay9hCPbCLe43ji",
	"Qdecqz/sLfZ/DSYgaQ1Ea3kVfNMmaxA+nQ7EldwRl5eTL6AsL4aLLGVL8Qjx7cf5t5+dx24NrMywb8M6",
	"gLLhhgGVWU4hoDKL2SSgqkmUyYC7FH0Sp1nL82v5GDaIZgPYKoBjJfNPnHQsb85PrMWbwH9c46QrR9nU",
	"mCw6/S20YEKra+Zce1xHBaajhjwKoxY/a6qCRAlct3G6Jcmt9/p4Cz9jjQwiHlFBUQnQVD5a4dXZ8khx",
	"JKyHfWxyj5xqhtPmhMXn3kqAmGTM2bxDDvdepQh65nyM3Bl20Ri7Fvqu0HVZUyCaAtGUc3PsmnZgIfBI",
	"Ai9iPCnrmBt18hANbJ/2KoZeNaDmZNpqAhsPBVMJavwF+Bm8wZT9WX102UWJEB9544JY91Scu2jeA5ez",
	"Hrg1/mvwy/CX0eDWqPIhcwStGjOJ5vFM/f7J4JdhtZkEfpfneA/vloAEoGkiSjGHX6QR8u6VbNVz7lbN",
	"dSx1FffwZc3Bxjak/tiCj7RwWEDukQe+A94wZkBH/c5Jv3Pe/5o7aezsVf06PU1X67pRl7jIFniYj+Bu",
	"xgzwha3tsAtHW9OhE+UfbRtZUdr+FmQZkf5+Oa1MuAIQtuhVQVET9MefWu94WOYoCmW/ek23lCW1ejdl",
	"gGr17vkknWJHEohqJlkhnoU88DDHTLmTRgJ0TgLbAl7girsO4s9Zw/A1FwgUWZwWCHLfaO9xbAUient5",
	"3s+8WTIVbw+i9pXoKJyJFOU9CqchLnhA6I4dCnKNi2ujY7w3OsaN0TH+bXSMz0bH+MXoGF8qlfrI3LJW",
	"R2jWGl2jZ6V4yiJKWK42RlxUK8d8eoAfneJ+UuxO7a428mrPx29N63aiPnQtaBN3uefXHx3jAWLFVfO/",
	"IfaFthxRLZigKfEQQN+RGfjYnfU25x0cb8LtHTuHFhClLrSn4Lph5ZykWWeFck27EoaVLdWwDIxmoVIl",
	"1LJN+m3FcaRefrP4PEz7dkhIS+c8r8a8oWWNU4xYGqSUC1uWVCe7RieRm29CyJ0Dvbva3ZmIXr8TGcfl",
	"nWr19cw5vkfpFOu03hD8cnwcpt0dW5DOJwR6Vs1RAp+ElagE1JWFSGqPoq60UXuYnNz7ZeOY0LbHC0QW",
	"NakozCsEseezE3Qs/vWQSTyr0UAUunBMg4lItN90gKa9TeJO7QC5psBHkyEi6nKJj2JfrbpjeGQxId/H",
	"C7jgck6zlYSGQ0xp0Kw/ITMbjU1oI9eCXliNuM5AorLWGgZKr8giJm0OFTGGgxAT/5qMkMjZ9fv+gT3Y",
	"HCNS7xW2CGO90Gu+irB/tILG4zjY9AglU38s6v+tgBKXiOo+DWkiUhNd8rASdumceL4Z+GPKzc+rjNAU",
	"ub6HbJuMTdiM/z6gCfq+CibCDPZjH5t3qBEQ/yTEabSCGfIjnmcSx8E+bdLdhs27C3+gWt3mvr8Ymzau",
	"S3G1qqI1HayZTFKloFTTMRqKN5wxxKAh7pjLO6IUnYW8BoMloFnHaNJnrTqch2tSEjcc0XkzxuchC9Mm",
	"9OshFzpoBQrxAjeq+TqeI4/cBbW6U+Rawp+mfjex6LA+UL2eTj1sUhcu6Jz4sVQ58+Bi3myImQenTDZe",
	"YQibkDteTK3xCEy595CNzQaD+A+InSgP2PeRF4O/gTy6urYSDdRM2YjE4qbyedi/0YYN+zaUQ8PejSXI",
	"sP/K8lY0TnN5KztCUyRmGBhZYLPRMMKk3KBnU4Ev7F4kr31VBSpFb2tdLG4hXqnWkb90lyhnoIi+5tPA",
	"6BifhuyfI/bPiC018EluUomlQoFla1KPhMIVtlZBsu2alT/y0FdZyFpaYrbka7bC/8aLf7Zdg7IUXkra",
	"CrwZcs0UlYfOf8I2mUveWyCRytUya0rUubVtc6raqkhLUdd22xSYTyWFoNkVbC9jNTcTglTMPz9fPmuT",
	"U95m8+kGdjeqvGMIOaAYejakPhANK7rRdWSspCb5WoDbsY1pQcqhHOprUo8/hkjzUvxFQF0hBr9yAX5F",
	"RGhUJrgaDETzH9VErGj0QvTJtf0bWGyfCuYqi7DF6RNW5Xt1nfy2kythAxxKzNOIQfFTtXUuJQigOcGX",
	"gnjVRBP7zLQ4StvkXIeDzcqMrFLekNX52f4mClk/l+OLq8nlFGhqkdmpiGSFQ141XJXN0iz1yj5yQBW6",
	"W2GETwPTlbnjksluCcqhsUPNbMKXPE8mG8qofB3JW5d+cDS5cu1FxsPlWzl1sterVEZUWexUfUp+kb/V",
	"ryHCIPBYry4oAPK0s7ZWj4dQU16GbCrsuiS7XwpJHSNKCRuiZnm5arpVZrZaWQRZXyorqTptSbYT7tUa",
	"JT1QpAaqxpTlIrs/Kh1bOv/U/uefKso5sSbCihJVVCKqzWalWj1Z1Prl9GhRNUV1HkPVnmzOobGCiJYH",
	"zaYZtfZR3OYoa0W+3ltsVRaZVSGEy0Z83ioVKhat/OW7d1H8l7K4XLrnmJ91cv/6QWTZIRNO13zMCABK",
	"vBT1KIpfeymCvoA/h34cSCcHPsnhueFXCc5VISQ3exUrf4AK0bn+hcuim/AFVAulIuJA0qJyWoQWQFVw",
	"tr/kjLoD9lwZPDkGfls9X8rQ7dlCBxAAVOOhxF1zGR+iUWsOEKoVqgkyR7mrnA4k1K7aqzaflC8e514E",
	"/EoewAOkmepHoR74j0pBzrtaOLXE03cZzovFOIeaOpskSykFxy4yEIr/zGaxcS3oWd3B/wilWfwa/k91",
	"f7ZlzJRTRgSlToKncG0q3Oe4aS+Ba0KsHLmedwb8faXKU0ikcMorPRW9rqRuiM/IUTfEy6qgTgChRg8p",
	"iUj3kIkXOKdwUvEZTYzkWzoC0rmoUrrG53pYxftgyclKjJPjgZW8HEd5fZb9r7azx5ZWtp3Zd0A0WSaH",
	"HO/W737JtTb67vfKjfpsnHyydGiZ9Oj6uYXIrt9fR6sxauezUub6mRMXjUXGgEJRPNm2gPcBYZaBTsN7",
	"1wgY5Ww6vcRObE4M4aSGdE5W6up5Ntt2adFpqHUaap2Ges1pqLP3xjoLtc5CXTUvWgHx7YCDTASw1u7d",
	"C20nle5yCwDaPOP3Ht6+R6hr4/5937FW9WImP1H7rkt8h52ZvTqzzV/1TnDbMAdni+w2BMgqOzcfpqtk",
	"wt9Llhvirx2eu/+oq8x3y7NCKCAdJbtr9WrIQb6HzfG3AHnZAMjSG4wFzyafm54Yu0DUDAPPBsDBbuCj",
	"Zx3w7KjPE8vzP4FDXH/O/ka+2cvJuryThj01istpTUJzFoCFlJSfHGRXKGnnMZUCYS1MFWImN+eKRkxF",
	"xMgQXB9eijLZKPy3Yzb4qPz4sEH2G15+enP5P0bHePn58qXRMV69/Mz/vb58d8UdRF5dvXv36uPLz2/Y",
	"31/eveP+Ipf/uvxwM/7l8pI9/eXLhw+X74yO8evly5v3Lz+xv66ubz6+/fzyvdExwnE+XXF3k9cvb24u",
	"2RTXNy9f/3b5Zvzrx89X//vxw83Ld2Mx983LV+9Y039dfr65eh0+/rqPjLUeVaQQmEJXDpnkpitf+vA8",
	"Jx6KnYXdjhdPiKTQMrt+L57Csku7WydpK7qprrOk6ywdVp2l3cgxIUeFtHehIDG+FRTTYuiuVp5qHy8W",
	"JFS2crdwQFisesegrjK2jROxjbJiO3HfycsptMaaOCCaU3MeHJsWXttDNsTx1Qb/2VdUVeY1pYldiwKi",
	"q/lPKudYLfa5cjbZZW9VSNFYGTDI2BV7C0Q837K5TKrQQ8cOXCzYi6VhXsullcJWFPzz+uMH6RZU9mjn",
	"a87zcxCvQYL3NLTZVxcUwOPKR54nnBJXRYAtR1kM3NTa5I8sQqY6o68q2mRhI3UtrTUFOORhg+dOysNF",
	"ATTjLyuOisiZMBK5y1MrjfnaJAAVgNuEAUU7WcxUrGxtYkc0XIOoC9615ZCLCD0St9lNLMkLrICsOI6v",
	"BFvpYWvW6swWDFOPJpfjjDCSe5v37zny0NJgAFMQd+4shemMp8RzDKlonoNF9gjiLr2SQoyyr+Q0Kdl3",
	"4uKwYB51A2k2qYGKLZV6lc3Jg9sIcKLn/kNNPWe16qiVvESKN0MlDiYLLVtnZGEVxxYqMudeZc7R9/R1",
	"pmp9a+U7S4Mm7CcnAwUb8V7OQlFpjXXJIRxoO1QhpzxpjRo2Untb/pK1ySzpQRsgOpXEZhsIngauKfCj",
	"9FLcKxSnv2XXglWqUVT2GxoGGPgkjDFYZ4TB6p73NTFUZQfJQ+ItKQG5ZWpqBOHyzlEQ7vKlxkaVabHw",
	"PG1arKy+Oi1Dpa5CLeasplHHq6+qUpcX21zmeNYfAfU5o1AbFd/AR7HreEMQFucDE+4KAb9jh4HmaNAx",
	"HOyKH32FoAF9H7kWQvkbm0xB0qhTw1XQhO54FiDq03FYOY7489BBQmHXT1o7xOIMJ0pMWNiYonDc8IG6",
	"QykHqZTlMCqAmO//+D7EQlzaPnGItPEdAs8GYE4CL/SJFA6S9FmRE2SSxDEs0Kz+QA8tbGiicQqfCoM1",
	"cq2xIEplTJFrAeiG4fkhH49HBOIgYJ/nz5ETSyT3KVlEnqwotZcAeJJoq9pGL6qCm7PjHTQm06h2pWIt",
	"WByF0f5JEPbrrxfv31cTsjLFvzYu1UDzziUPNrJmJdaxpGFVMdSErolsu8yeKFpFNsUKwpUvqvUXDSoa",
	"VRyxVJJiRCZJU+DqzTOFlCKlsGwupqSEjPzV/CI32+R6uNEofx03CDqbnD5hWY8LlL+MOMPszeMCbXI9",
	"SVLM9CLe8ef5k1IR2PvXrbGwoc+4wq1xcWsQ+v3W6IBb4x55FBP31rgAt8agNzy/NX5UySMaXiqV7Ibk",
	"6qnKdoiyChUOmVxW1YlEzUVgGIK6SdTF4Sp5ouJ1FKp19aZwCeVf60OvDCW8zbqTWtZZZFXXL2nM/Ukp",
	"la2gCTmzHDPi2Uk7R5zRSywU4MISBQkS77CbQ8zsTcnoselclJmYEu6oGyzU/t5SwURV3iTxtuKMlcMc",
	"42zcCtIX7lapujVMxFROSBbIXUqQHYsnRsewiKtW85psv8wiVtg2MuFueQulbnVFpY02btmjmh7hRfJS",
	"fnJVxG1YBUT0ANhiUnj4GEDXAk5g+zj8Br5RqOrePHt+FNyjx1OKC3U2nY++i7HDe3UQWkfWmqgvBylb",
	"ppRY2d4oYeTUGijalhn1UkrSjSmeYDuXvSXvKzI47IqCgkZSfVCNk+qo5ovfMmanCFkTaN5tXil1ifvo",
	"EBXvvxI5MKOlgLjpP5QXB/KSlxEbj5JFa9xNJR/DHPV/joB4VzRciNhR56gz7Aw6/a/Lfvm16CIaesuk",
	"IdumN26IgQEt0CVes9clmkS6FFRzpWJf9K85eRhDG3k+HUfpm3JiS0SrpSRPy2pANnYlY8sYY2cB2aGY",
	"M0+U1wRE7ZY2TQpFOZMKn9ayuUSr1WaK1ls2VwYMq00qX9Qq5hJnAoharTRFWtTMoY3ksKMAu8L7eC2T",
	"z5CLg7xpo5DG6HvXOrOomaeemL9b83QexHbedOzduj6y6h0EsgCseqtRQRnLX2N0clkenMZlfug8L618",
	"zesJJTwaCVrSSbblM9UjNtrt6wq+wrU5pGSHXY8yXm2NtUiEDbkDtJFTN3iXCKRqKeGG10vh8HXvldZS",
	"uLg2xVQtz7pJspFDK/dPTw/dh2gwYUNFyZXjurDh/OmJPvA+ANq2HKFJgTxIpfjs+sdf9B1Pu5RgLrhE",
	"6gaLa2ns0E25ADRVyWrtyqXdsOXdWezFs2yor2srb2IJX7Mpe02W6DVYlHM9xqLti7nymxcPnGObXt9V",
	"QpUz8z4stK1y4kldItS10K7NzFrTWFpDC1nNchpjOXEbKjeZFvgLFlQ6LfYVjIWM0F2wgZy6xEbCJe6x",
	"N3QCFsFu161hhMOuItJlk0O1d178gT1YxV8XUopnrihXIkrLKAEkmiELsIbPqHDZ69WKTl5aaSnOhY+s",
	"9Fw5YTXfXmXXPE+dpKNooU4bWU0dwRa3J1qYLmwocvuz4dZetdoj7M/8iPKwAbhDj8rP8dCCeD7ySkkh",
	"alhOChXE4ZagU8SVk52ygg93r44Tt4yrgi1sYxdBr8om3v5O2q3NwIgL5dMd2gWyk7HbDuEVkBqDwoSQ",
	"zV8U7ZIbbWR1jyp+KpzGwxYg8Oy4MG4EqgoCh3bUVdUb3xUPT1rq4rm5VdSpQl6D4KpaRKQxG4i3Ue/t",
	"SLbR7Ad0s93aXXMKdltCn5QUwUfOwg6P6g1jMbz+XTJziheJd160JPAwRy5AbAZ3BmDadFh+E1xN1UwG",
	"jedtiFcFULeEXl52fOP4DIfLpAaOBwBh4rbS2AjkWjkG8E/sQwBiUiL0UZiiVYRqGRdsAahbnLd17bFD",
	"UUn+dUSmxGNku6ThrNQmf0Px2eTDmdJXUu0G+y85lYSya4bYRAYvMVqVLIAemq7z6zw0bfp1yq4rft2K",
	"4tPq5ENJ4Jl5ehV/FzM2vnmeo9kFuDujL1YNiBF7kbdYfTfWkr1CmDVhyaxrBR6c3C2vkw3n1mHdqxte",
	"XZZVl2XVZVnXWJZ1I1lTdF3W/a7LWuU0q15hcgM6RQQLlzxU9INIZ5NR1ZGI3rd1FVx+RR9p9yVJQer4",
	"Juz+TX3RDbkK7SubzkvuyiXgFhJkXtHTPROvDrsGajXGVr2I4yZY25x4vhn4Y8rFkWJTvWfO8T3MR7HU",
	"YO/YmhWgsVVgtWMCmBUgrv6B51fXH89O+oMwdc6L2sZ9MV6BcV+gI4/Fiu71E4alsb1hXhZ/QidFOVWI",
	"sW7u8704YPlVegkVLqAnfD6LsC8aCSLIpYA1Z25PoaYCp4pzsGe/qGoKuVTNvrFPFtgsoQjRdGOp8PMA",
	"s7xO9b7ib5TzyYCLviLqUAShooJ264513tn6eLq+na5vp+vbVRM1a1Xz2oSwKRZQyMaxC00f32P/kcej",
	"kkBxHX8lV92O8ksOGA4KqmwnzoASPDxfRJtEbu3pYJMk+c7XuselmKz88j3bbglm6hpoO+Bk0EZJtCpU",
	"XbVi1Abo2feQbZOxCctqLe2i5sTrS+cUf2Kv2loHh16etGrC3JpPpTTL+66k9eXqe8XqXmvFpaM6fcsr",
	"Z2924QpN2iF1tU2OvmqaZkRClRXNKFlDC/dnopz1ck2YKF1E2KJXLatsfTYdf2o9QXdZNqoVdtcwLq5S",
	"ZtXq3QsKwsmClQSimtVOiGchDzzMsTlPjQTonAS2BbzAFfZdnrE7fi1f+cglmBYI8hxa3mNByu3PvFkq",
	"3wi/mhLtew0ynVYHaNZ5tUbPSmV+ijCxXMKeuKhC4cqEhtID/OgU95NSzdTuaiOv9nzcX6Nup/wS/z++",
	"bqBGf5LTT5SUlQs/hYVljZCpS79DDxP5iVAEpAcRYSWP5MIt0uN0aFtqiDD3UfIom+1JWiKCTup3lPom",
	"ecSzIYiws+wawjufkLdXqXL1ALHipP43xL4wlcb58ydoSjwE0HdkBj52Z731ZAWJOc9W5ORo9m3l50zI",
	"lrhWATuPyD9plpD+1bXRMV5++I/RMT58/HBpdIzryxujY3z5wP5XphnYkaygdehjp5J1xotqxdG+Xl2z",
	"+PhN+8JLOEjrg9B9rHBWQcsap84daZDSQ8eykgwudToJbjYh5M6B3l3t7rwCde1OJJ3crHJfLt9nbt1p",
	"vSG4/xHT+qBFZmML0jnXd2uOEvgkPB0E1GMnpJVGSfyKVhrmHps+8diaao1jQtseLxBZ1KSisEpJeRHq",
	"qgPxMsE0mCzZAWsN0LS3SdypHSDXFPhoMkREXS7xURzvUncMjywm5Pt4ARdcrGu2ktzKWVX7l5ZyKhuo",
	"ck2oeiuyiEmbQ0WMERU4ajCC0g+sYt+c3Aj1e6+wRXKDu+v1j1bQeBwHmx6hZOqPhUy+Akpcwk/OpjRR",
	"6uVXdZx8l5q6IzRFbt7FdMXuD2iCvq+CiT+RayG2dGzeoUZA/JMQp9EKZsiPeB5T0LBPm3S3YfPuIvCi",
	"Vre57y/Gpo3rUlxYZ84nGTeERsJI3mDNZJK80dYxRkPxhjOGGDTEHXN5x0N0QVwLeQ0GS0CzjtGkz1p1",
	"OA/XpKQw0W0zxuchC9Mm9OshFzpoBQrxAje6hxnPkUfuglrdeXlAHrJQv5tYtIMoFZRQo6dTD5vUhQs6",
	"J34sVc48uJg3G2LmwSmTjVcYwibkDnmrjOCih7GHbGw2GMR/QOxEecC+j7wY/A3k0dW1lWigZspGWWXb",
	"iv0bbdjiHF0VezeWIKtGVVQdp7m8Vep3WnWAEmfFqsMs+8dU7NlU4Au7F8lrX+tdIG4vsUPBR+yB+/CO",
	"JbAKxJ85xlMGYBC26aldiWe0sDNr0KvrhJzGcI5DAUd+rvezmF2ZRCxLofFIaprjToLmHHp+KKWJtBOV",
	"KDbf/2C9DgOhma64tC1rk+ceox0OtMOBdjjQDgfa4WDPHA7CvoWc34bUL0gdvmGfBfmg5HwzdVylvqDo",
	"CK3sU5Bql+tvKtXBFCUyRSC7HRdqX+KiT965IOWJmQGyEjzq1TdA8jhygFU7BuT44WY8BGy7Ak8vo7Yf",
	"qtWriOyLi78FCFy9yZ5AeSPn7vV1Om8kHtYlKpnKB9m9qwFI0fxHNWUvGr0JacgyeQO/EU0VNaiiqqIe",
	"L6n1fbsGVNSB+YFvuTb31h5jrva2UPu5rarEb9axrZpOpB3btGObdmzTjm3asU07tmnHNu3Yph3btGOb",
	"dmzTjm3asU07tmnHNu3Yph3btGNb+45t6zGTRrd3ufmQrfILycxVoTxm+sZNus5raC/lo7VvOOPXiavf",
	"5ebUnlrdIXGf7+M5Sls1eB0MNqvd0XODuxl42H+8ZqAQMJsg6CFvDAOf15PgQOI+bPx58llMCTJ+/OC+",
	"AlOyDJ7/Ar8yUBAwQy7yGNeBLnj56Qr8hh5v3S746aeXpkkC1//pJ3Ab9PtHCPz003vowhnize7QI5Vf",
	"vY2G+YAeonF++unW/S/wz+uPHy7Yk+sFMvEUm9xocOt+5kUjAKYgoNidgZ9+ilr+9BN4ztZPL37++Q9K",
	"XLjAPeLNXgAqj3AB2Drj0TEFMN2AuxrMyQOAQEjTscMa+hYg6gtvIA+JKj4UTBCYIt+cIwsQDzjEwlOM",
	"rA53UxDDsEMWeckwXJ0Q+SMJRdG4tLe0MguFlaR9AhzsYgf/icCE+MKhTtg5GJ1GI/A52SvoMBywV4xK",
	"gO9BlzpMWrPABDHpzQ2/TXQRC6Q9cDPHFKDpFJsYuSaHMjTnGN2HxV9I4HN/Y484mEPfQ9CCE2xj/7ED",
	"pjb6jqMfxAMWpia5R17YIPN9IS0zPMbehvFLB1kY8qri4PlPP8HFwg6x8/O9a/XgAv8fhuGffnrBsYW+",
	"s2N/xhbEvrfH6Odl4M+R60dIZZ/5OQTTrftvxGcVHmKeBX69ufmU7cGzZbIX17wUSODPicfgz5PCxji7",
	"dTktmwsPCaIWP01ihb/NwLNBtxsRz9vLG3B7e+t2uyJlKXj2mrg+cv3uzeMCXYC8T32W6fUyXE9I06/4",
	"Pgb/+fjlc/fm42+XH6L2bPZoU7ANIWqu9Ezi/Hw/+DnyCxOL/jlZdfgg/iojzn9mhBuQYel+YHQMRjmC",
	"OfCf37s2mRHBp/24OTv0PTtkMHwtlCKfyssRT35mvfk/Xet4cnKKRqfDk1N4ND0+mkJ4fmQO+ubRyRSd",
	"n8CjweB4cty3jiaD037/rH9mInNyPBghZE7Q5NjsLUJuSxaIMQPjwjjq9XsDnunZn3O++DM1sfPzFxr6",
	"Ac4QFzXY2cMBe2UZF8Zb5F+b2BGNeJZo6CCf9/j9LwOzL/8WIJ7fWjjVGlNs+5yrJvxauJaJw0np2K4e",
	"ief9vOLZixW948ysed05Ky7u+ZWnEeXHMQfBsN9fZvtMBuMb1aOAmmQhWBKD3dgnd4j7QI/6g+WOIbOj",
	"wtM3cONtJDy6sHsPbcwG44NIZxeHberU+v0rW2tckcx4y93OhPf+78b166v37DT83mVEfA2dhY0Egmzo",
	"zngiXGTb4P+A14wOk/psRs7+BEDsnWc5myehm38IbP/9+uP7y/H1zeerD2/H/3r57ssl2znDkwSDosXV",
	"h5vLt5ef5SYcS4q3z+KVFO/6z5ef3r18fTl+dfny8+Xnsdj/XO0Iv/1zMHkE/wd8gD6+R/LHh/QJngUe",
	"fnbrxj9d5PP7UPkZ20WU2s9u3VuXQebv4Mvnq+e3xhYBdGu8YKthKwB/Bx+Qf3HBGHbPRQ/PA8/uzQn1",
	"O4D9tSCe/0K07AUUjSllH8A2ZfjwHnl4+jh2iIXA38HHBXKvr99dXPB//nX5+eqX/4w/fPxwyaaLSEWa",
	"8eLiLfKjaV/ETX6/NVIYuzW+gr+DZ0VoExOI/Qj+zll3Lxztefj/i1t3EfgURM167BAeT4j1KOP8A/sS",
	"Fc5N4lIfhDALsRuh8dZ48X/ZCkQb4fFIwd/BX4wMbw0H+XNi3RoX4JZtv1ujI54zODOOI96kCSFuxFDA",
	"GriBbUePoD8XfVoil2i9fDtRNjX/MvYsgyi2qAI83Rqs349b94cELw99y6IsBGEHRO7W4LmH6Asxrehl",
	"zgP3jgH59698LMAQ2yPu81su4t8acmfe+EW0atG1twjoPHzzf/myXmQHQq6VHicZgq+BEQ/4O3gVTKfI",
	"65nENaEvRqRiSNGQ2Khnk9lz1rznk2t+eD1/Ic0aTu2hbz3kWs9f/F+ZJN8SJUEuoHnH9AMHYpd1xg4j",
	"FfD81r31b42p4zNgsz8jrhT9xuRnTAIf2+wB5wTsA/k44gNZM8aqLv4OtsynxFo89K0Dxmw5nEg+oIdQ",
	"JH0e7SfGrDrAxfaLuEfvV5Hb/qVlPV8i004ZmcbjUHnmsJTza64D9N4QxlrClhaaIo9TziuG5dc2oeg5",
	"e+czrIeDCLD3PiNovbTt51HrcIip4/c+edj1bZdTe/aZEHo4Fb3gXX6IG64FoQrx6xOhKfkrI60ohY6F",
	"R+4x5czLQjZieg8TXmpKGJ8+Xm9CxGDDpmSMUso8DDlgh05rRlNP67hmRLeZ81qfqvpULdz15WdfSJxP",
	"+PD70ZG31M9/YeuHONfY4bV8Jr7hz+NT8crKuZdgGza5DcBWlSuJoquB0fJhK5YoLgfAhFd6q3fKvrl8",
	"d3lzuYFzVgxc76T9+W+nr7D1t9M3h3Hkxp+zQ2evoN2ndfoKUtzM+SvhWB/E+iCuwgvKT+SYYJ+0Qlpq",
	"Dmjt4FXcyc+Qv8Kp287tuT5v9c304dxM65NWn7RrP2n1vS/bbOZccfHLHu/EUZu6UG5ykfzy5vWvm7hJ",
	"ZuPqA3fHDlxOt0/sdpkRoj509aG7J4duRK9P/Mb5fiBn8lNdO2fCDPhzyWEWRDEjQIwD2DihPtpR3llf",
	"hR1Ear0rHzmG+gQ2hVskdyTM8YnkXtff+ekp+45nvMWjEKMJpGh8hx6NC85ykhdh1BG28t5wz8XMK/Gv",
	"EDrCV0kIkjRU8lAehQq/3rFPokdy5hRj2B8Ou/2T7vD8ZnB2MRhcDI96R8OTbv/0ot83MrlOjf8OMP0W",
	"QAd8CzAEENwjj/SMjjH1EJ1HAT6ZdS2/k5aXfplkqc1/K3VOxVIlvVKPpeZx0BFrapye9geT4+GoOxme",
	"nXRHJybqTqZo2j2dnB+fj+DR+ckRNDqGFDOVzCA9lMa/wy4beEpsm9fLF1EKScxU0j/1WBohyXZsiHiY",
	"TKxTMkLmhTRGOrhJ0SOLgqgCPPddNWRZ8or6CNwjG7MTywsY1iHbZjxtqhSBlEwiP5WmkOOJFBQ36h2f",
	"nsYUlwlOSgbPvIjHD8MrjNNTeDQ67Q+7R3B01B3Bc9g975+edAcDOJla5tSC05Mk/CCmBpktCWE7FuEr",
	"5TOVE/jE0SY8riG9d1QdIpcRyam1PjNCnkdCLSXGJRss8aP+QHwwJYHLwwZkz1ihFFX7YDGNiJFSfF7K",
	"4TaUauqa5yKer2L1kk4TMXYgODu44qhr1YyXPc4OQdXJ+yZt0Dswg14+orXao9WeylxBm/Zqmfay6eN9",
	"D6N7RFUqTkpEUKs4b5G/rN9QreBoBUcrODun4KQp7kkpOFzt0OrNY4blb0vDqeg1odUb7T+xh/4TWrHR",
	"ik0rio32pFibf0ScluBrx1gECk3pC5etGlqCROccSxDHJgNFDcGkmjCRTdYmERoTLn5oNW01Ne2lhHi5",
	"2J5Uc0orbAeosMl4D59KOF+vTWp4PnyaKlsEUK20yafPtjS2T1+2prEt9Q3poOtXyB/F+vGMYM/+iuTZ",
	"i79uOaXfGhe3alpngrp0mIkuITJ4LyEt8GYSqrOvGN/jzxhn4U8iPsafzvFszp8K0uTPGKu5ZTSk9dQK",
	"boeBWk+V6SNUU3OJZDX9NuzbC/WXW+Ov29uQzG451dyGpMZ+sX/U5HbLyOA2RXJx94jsohFC+oq6yOSX",
	"04STYfSOk2L0JibH6C0nyehtSJbRO06at5w4hW6yH36aX7av2qfpUcytJsdwGH0fsIH7gAcP+4yCnsoW",
	"ZV++mXsQsXi61WuRBXy0CbTYGOFyxNUI231PCckVPH+/JJdEIdTyLorSjKpTyKhePFHvYRt5vpw5My3q",
	"v8PUB2Gb7CUQe/cyelUhpyZ2TTuwkNEgieYCztDvIlvu10ZpNPkAFP+JvjbKpbnWWyxRPz1PuaKBaSJK",
	"a+pTaTxF2lOInRaTasYU9Y8Q23m52BhC/nb8SuD0b8dvcjOyhQ0Z7tTNnu279axleGnD3EEZ5lqnHm3z",
	"0za/XeBi2pxYIyFnWsZ4zU1EFEDgogchNoCpRxzAg6QtZIGwHEha4BPduFCxYUOfix7GfFlqs95gnWa9",
	"IntZ/2J00uv3B4m9LBwimwofupDvBG7poT8PjB8dxjByhz067/X7/XhY5N5jj7gOAwIT7jqGDSfIFpIa",
	"tzRG9/0d4x7aAYoERWTxm30mKoo6AKJ3zBf4yoyOyEKvXk3/LLsayTDEugNhhQEhoIxiI08GZLHF5ghZ",
	"08lw2j0/mw66o+lg2D3vj1B3dHx6Mhr1zcnoZJBYbEJJtrqJRsjURTYZQeXRN2zWCHOVToq/YcNLxxgN",
	"h80+JaKT3w2AKXCJDyAQSxeHriErGb8bJnSf+WCCwMSG7p2xtu+Kigg0syUl3AyGrGn9+k/VjL/xSbiz",
	"BiKxPLVFiH88bxWX5BQGHbWpKDLYY4sN8Hvy7mvnVmZp6gYJS+LjDvuD827/rDsc3QxGF4Pji+Hwf/ks",
	"ERstbiX4JZvlr1vGMbNr5Vwz9fAHW0QEoB+7YqIKsbP7eZZ32CgVArHw9lOQetQjIff4krL4elQm/VtO",
	"26k2X3mj7BbIbShthWg+JaFHs8dbolLrcGvcis1xK7ZHzneJbbL88odYaAL0H3tmNltz8mxpq2pD2YEY",
	"yjTbaItt7L8pL9z7a7Hdabprje5qJrLX5sX1mBfjtETVY3aFup4bpJtcQm3O37vkYmjUOzk7z14Mpa59",
	"hC9rwd1O/r1NvMOL726W15Goxf8dQIoBxQ62eUFc6LN/EeyVX+DIQ0YXOGfw+Ghk9gfd/uho2B0Nzs66",
	"Z2fnk27/6OQEDk6R1R/AFi5wdOCjMvBxczcfNUIbxV4/lKDG9Ndoq+nhWU11IKM2aoJaPEDbHLcSwhgK",
	"kyYMQkkv31ctbKPyVXsdvdK+apUNsRycm/BVi/EUSSwhdtr1VROr0L5qVYWituGlpa5Dkrrapx4t1mmx",
	"bhe4mJYb1+SrxlFX3VeNCxUt+KrxZW3fV+2sNzju5+R2uJljCjCDo/w8Fjp/JQ/AJ2AOXctGwAyoTxzk",
	"dafQxO4sjtL+R/ndobyG6O5wMh0NzkdTs3s2GaLuaDowu/BsOOhO4Mng9Kx/MjXPjpK7w1A0rH53KITU",
	"ortDQTba+Sv1KQLzu+/VZYabeP2aQg2vLkGUO+vVJZan9OoK5bZKQf474gUVfY32glrBCyoEYpFZmZNG",
	"owDQJ+/9k2w47f1zEN4/m98ue+/1EtH8WrxeWoC39vZo2dtD4LRBESohnxdVnUo0ua05fJz1+qNBjnZ1",
	"ZduBA+6xDxEIfPAtwJOAWtDpJRrWjQexi91ZuQp13hv0syrU0XF/enIEz7qT6bTfHZ0fwS48tazu8ekQ",
	"Tk9Gp6Ph0GpBhdKFdVSFdTanodQqnRNuvwNxwMh8jS6Xc3jlcpZQrO/r9X19BU6gS+Ssu0ROkQD2FvlP",
	"SfqSJ9ox6Us7vyqdXzcnflV3ftWyl3bD2Cs3DC11aalr3VKXdmLYZv2OIhlOtG7DHSKs0VHgEbErUmMt",
	"j4hIMqnnCnF6sqOSpC5GoCpGsEFPgy9bECS1x8EBCLx7WBRAex5sMF1/HeldeyBoD4QD9EBYd/L83XBF",
	"0Gnt1+mJwB2Yx1OMbGsc8p4mfgnLwxR7KfD2v7DmHyN1YqPaD7GJxwTnX15djl4yFadYHzru986OE31o",
	"QSgW3z4oU2aOh73BIPEtj5KQfub1vV3iAnSPXIx84GKKe7G6M5KSeqpwUke1We5erOgocKfdF5TuC8uQ",
	"kpWgLE1vwbFBtZsP5aq96Nu008MBOj0UI1xfxuvL+NpcQjtErN0horLk9xb5Byz2pXvuqdin/SbUfhNb",
	"kPtqeFRooU97WxyAt4UW97S417q4pz0xtuqJUVl4DP0ylPLj5n00FOd/Cx4b7Qmvg97p2dGS8HrDjjnR",
	"MzwMgHi1o9Kr9tVQ+mpsQXit4cWxKeF1sz4dilUrPTyWq+l0bsXGzj6MtuutcdHfFV+PPRG+99HzQ0VA",
	"RXbVvAT+vIMgqJyXMWHdhqT1tL1CGmsZ2kdkr3xEtrrB9t9/pIpetao3yXZRpD1NtudpUpabOtVUmaI6",
	"EVt1oup6iarlXbeJfNUZ3CkUjdaTV8tL0jmsm4j/OpW1vtVfWd7WGa21vWCH7AU6sfVeJraWMFgjv3Ui",
	"fbSR5Vpa49aTXR8f9U6HOaGdUeE9OLETw84ddhngfPTdN8IafJExQHwYmIZwTEwMQ9k+JEalc/LgMskv",
	"CgQdT4nnGJ3kN7Whebf0lBHB2CGejxxeVd8OZnw11O+K6bvR9CVGDfm7I4vFcMDRb3NI0zlecABG5ooY",
	"wr9zrUVh2Whs0qhqy9C5t9OfEpLfHiTflvf85tSeOpm4ZbrdC1OK2obCSaBqmGznVjAeXpI3zXp4Vd6Y",
	"TeU22HFDjM72vT7LS/F1o6C7RrFsovozp8O4OHSa1OIa0TE9ljXcazvOBvKKZ/mGNtwcnOFm3/fnQZmB",
	"6AbMPnuPYJ05fZtWpJ//SulY2Prxs6TKVbMvxb5qJWamj3EzbWxqZmwKvfo2bHOS8NlugEZVA9TPfzt9",
	"lSHbv52+iQhXm6caKUW7AlRtvDpY49XukJg2bWnT1t7wQ234WksITgaZteNxalrW4oDgBga2ViJzsma2",
	"wrCcwZbDcs7PhoqwnKMKMeVyz1RYjjoe52in4nG0KSv1KSH+9suU1VrEUEO7VvFBpwOI9kVF01YtHU+0",
	"/3aoMhrXViodXqTDi2pumicSbKTtRBu0E62U0LZqJtut1n07PuqdDI5zKnh8wBQDxAu+UUAs7PeMim6f",
	"lz5nouhbAP3AA4EPkI1nyLVwL5tjYrMOoMjvSgvpBn43Wki5J+iod3w2ynqC9nfdE1Tn4C3LwbtBP8vG",
	"aXcPMvWaTrT7VBLt6pRr2s5UU3bXqXVbSK1bKaeuFkB3VACVQVNXAP0rtO2Mymw7najlcVnL7cm0OsFw",
	"aYLhFnMmaIlWZxE+dJctLctqWXYDsqx2WtqVvMFVEwa3nyp461WdNySSy3mBczMCDFrJCCBWUTMxwKh3",
	"NBxqadzSCZNLEyZvMpL/y/aE8V2M6GfbWkf577J6sud5llcINuW0qTMB7HxGZ53KWWcE2Ns9fHheXZvK",
	"Fn3QVKDzUrfrKYbce+wR12HqRnHagFRLVbqAy3QDnSig8u2JBNpNJAjIYC5S6VL4ajclgLwiHfNfVUXa",
	"DtS0heiQLETboiFtgdIWqN3haNrCtaZ81BICq0fLS4JHC3Hy0hJ3MT7+uHc+PM8xUl1C6oPXhP37BvrQ",
	"RK6PvESEDWgXQep3B+wR8dnRihyIbSa8cUsRNO/G0MaQf2ryyJxD10VRsxJzkby+yFzUn5hoZJmD7hns",
	"97ujyTnsQmSddftH0+PRyeh42D+X7D4p8bO6UUcWiotsOjIJ6pj71KcIOtn9kHuUYgib0k9qBNnLJLuz",
	"liZ5kUpDUygtVrUpLcfV74hpKP2hOlJ+BYtQCpRF14icdprfFOaFiD75gPnsptVWmoOw0uzEvtp7E0p6",
	"c6zFcLIbiNEB8Fs0azSIf5d1iqLw96wmu0FXx0iv7JunFhxV0SvPhic5euUnoaS7PnCwix0IIF0gDxOP",
	"SeMBd4WMrCQesQIzzIG1MR3zpHd6no1QPx+Y5+bZybQL++eD7uh8cNI9OzLPuqdwcnZ0DE+n5ul2dEwd",
	"mK4KTG9HhasVl57iAQcSxKP8Jh2VfnhR6TmI1mYUbUapzBV0TPq6Y9LL5cK3yNdC4ZoMD8lad14o1JHd",
	"ysjudqTC6oHdWiTUTjt77rSjhUEtDG5GGNQuL9sM6i4XLUWf9pxnwpjuUv+Z3RVplf4z4DOaMa4xaNmR",
	"5qR3fDTYF3lWx0arYqNb8lP5sjVxVvurPAWJfA8jmbXfynbDjOtrINp/RfuvPGX/lXVHAO+NI4sOz12n",
	"H8t9Qw+WKOQa8BEKnViuwqaX9y1YLAqUucHF0VFvcJKU/ONLZ8tkJIkcYPH/gQNnLgbQNAMKXR8HTk9O",
	"l8X1qhM0OTdPJmfdSf8cdkdDZHXPzuGwOxwO+qfTs1F/dHbKoGGagedVXU6Rfje4OBr1TgajpFwhpniC",
	"ba5f8Ghiz4V2km/LPJvAETzvnp9Zo+5oYJ52J+ZxvzuCJxOr3z+fHlmnid4Xf5ughhqqX7pnofaXbqq9",
	"XJReLuldJemA0R4Cl/fb8XW5PyiTxr32bzl0/5Z7bczQxoxyifpe+7Rs2Kclc/DnurWkxESq5cSmcmK6",
	"8b7LidrxRen40qagWMP9RUuJ2uVlT1xetHyo5cONyIfazWWbbi6V7iVFt+V7yY37uqSFmy1XMMiVczlA",
	"YheN3bj7PDo6OhiZVju/qJxf2hRpa7jA3O+H80uGjpX+L/xV1ssl2UzhOGI77Y6zy712c1mbm0uWSors",
	"vIJacqy4EtUkY4eUo91ZamkX2pFlnxxZWt1B+++wcr8JV5V2caBdUtp1SZkiZE2gebeSV0o0SCXHlF/C",
	"xhu2OUCXuI8OYaL6FNoUdcq0s/Nev594fESfZFwY/0I2uEcuhg7w0CKwMHQtiACiFPXYR0Cfqc28SBz/",
	"czwPHOhy2f/CuCYOephDH1iYUuhjOsXIKlXBRv3e6flRJrzgdNI/OTFPJ110egK7o+nxqHs+Ghx3z6zB",
	"ZNifHp1Y6EihasUYbqJtRZ2rKVwxHWh/k0J/k2myBZbUrl9idLXtdZKwggMxKSx/kPY9OTzfExWWtXlB",
	"mxeq8QPtgbIxD5QSqVByQknOPC0TVlvMHsqE2rek2LekNaGwuoeJlgi1n8le+ZloWVDLgpuUBbW3yU54",
	"m5RIlmmHk9R9Y3s+J/Fxvnm3k/WJtRGsJHeUSJQ9KhZla91tHg/3+G5T+5MU+pO0JsZW9ypZrxjbjmNJ",
	"vGalb0n0NuteInborXExYp0itnArmPCOuJjstAy+z14mCckUmWhj0smx0oYkdCuI6FYmo9uEkJ60v0lN",
	"LUO7nOyly0m722nvnU/yFap1+Z+0jBDtidKyJ0rIDaCNfSwUG6XRgRfBzzbOqoCs0S9LbVS667cAeY+S",
	"8irKFhtFGmtH3XUBZ+h3UdD4q6o/dn00Q17JABT/iZp1n2LbR97vFEHPnH9t8gXhCOzXKv2pHcyK+39d",
	"SSGupvzIJPKYqwPRwDQRpTXVnhwajBSeLOVt4NL+WQEnTs/eYiVu3kwQAWvICTFuujxz3JKRT5V2jLCU",
	"7Z7tu13i6aFMG14OyvDyFAlYW5a0ZUnzcr4VtOmsiumMUIU+kxTOd9FDSqh8BFOPOGAhSjlZgFt/spqO",
	"6C5LnI8btnS56GGcWqbaxDXYSCGB18e/9F/3jTITV/+0d3w6zCkk8IUijwI6J4FtgQkCcGIj4BMALQtg",
	"HzmU/TCh5xsdOVHrGFtcuh9OB0fI6p92+0eDk+7Imky6Z33T6p71+xDBUR8NB0Mm8odK0UvFqNmyBMYf",
	"ZO7+v4SPsCUTJD/4yvBOZ8jFiAeG85OYa4yeFfiP8rNgYmNznCkHxh8C+WHlSghs2xsXBrSsLv+Ork+6",
	"7Du6Z+bkGJrmoDsYDa3uaHI27J6bfbNrjSZwgI6t6ejouNQcmMJUZA7sn0wGx2jY7x7B0zMG4lH33ERW",
	"F8Lp0eh0cgzh2SgxB2YVseq2wLSOWGQHTO/LkPg2bAO8cu+hjS3gkzvkbtzu1zFGw2GzTxGU/rthQveZ",
	"z3bUxIbunbG2BeMQEM1slAmDnWa45Ab19U8fryubJ9Oz76xtMrPOdRR9WOZV2RYpTnlrXPyevP2qrBrR",
	"uc3y7FtOEjti/MzCcHcsn4TunekzC80NJlJXUGpOyzTF3nKaTbX6WpiZvZNJD88p+Dai4X2yu3683vAt",
	"g7a6HozV9Snu5P03+Wa341rsvU+SFCoYmwU71dbmjVibG2Q/SGuERZkPli9nWqi4WPWi5KR3fpZ7UeID",
	"GPgAUho4yLUgoNjlpcOXb0WS+47PaIFsG/oA2vhbAB0+BF5QkbFZUZBxhXsN8abePYYXrq8brq8LA7/L",
	"11d+V3HeG56fZqs+no+G0Do67fYnR5PuqH806p6dwPPuiTk4HfbPT8zh+VbvKnQuBlUuhhavAuolYcjw",
	"pUMJvMv5LJ2Q4QATMuTiWhtMtcG0Dm/QyRnWnZyhitD6FvlaYj0UiVUG1r5IrDpThDJTRIsia40UEVpe",
	"1V6LB+K1qCVVLaluTFLV/m/bTB1RRe4Vvdr0pAtzRlRwptthiTvHmc6cI/OOBOvxoXudDLbkOsckGpL2",
	"nXsgnm1t1HtOSpDR5u1z/+hkz2R5nS1DlS2jTUe0L9sU5bVD2n45pOmcHNox7eAd077shB6pHdS0g5p2",
	"UNuqvq491TbiqabTomzYUS3OYUiZkun5ublS3iI/c/UR9wSiZ5nxL8rdR1+HzSvkUFkgD5PaNznrvfEQ",
	"2vNxd3hkXPQ78c+jvvTzpNs/Sf0cHKV+DtONh6fGRb9+nskQR4U6c5yFRGvJ1Yh2JzOtxOdLFvf/EDvi",
	"4POW1AeAtqc9BXtaDXLQhjdteNsIn9EWuq1Y6Iqk2GDhYwfVFmFFt4ry6xfeuInw2rqwetIdjIyLQV8W",
	"SI+zD06yD06zD86yD84zD5hYm34wyD4YZh8cZR9kVzrMrnSYXekwu9JhdqVDsdLqIrZMQFq+bi5fZ3bU",
	"jgvXMtafnmRd6eu1WP0kxOqKtKBlai1Tr5/DaIF6mwJ1nBXdDKhPnPEUI9saU2QjjtRVyrnnDFmpuPtr",
	"3vUX1vM66rjp+BF5tdgyLobHnSRpPHeSsk5PTiZn55PuyLJOuiNzMuyej6ZH3aPJsTk6h8fwbDBle5Ov",
	"GFljwb+SOJF7aAcMC5ffgYvn2OZsAX0LAtcPPID8XuyONVBVKcpBUZOaReqhqlUwykGrjg8uqtWeAzVF",
	"dSMV6bcfP1zKFw4kQKPyd+oI48OLMK6BfC37atl3Je6hY5A3ViC+lpwplYvXQubeCZk6pLew+PsOSJnV",
	"Q361iLm7Iqa+bdXCpRYuD0i41Heou1Bxvp6omq4/nyuttleLPke6aCHSuD2x+YadheLDgZgW8Gn3WWrW",
	"wbNFpeZ3QGiuHlzbitDcTmn6nC9Qht/y3ZkNh1Xs5Vvj4vf+rsTE7qPgv8+F6/MIqiieShBWTvySisBu",
	"YxJ70qGq69FudOzqXpa0b32j7X0EaW1dbl3F7ttHlQ7sbDewM0a1R2w09iG9W8lph40C2CiV/HQ+Exvd",
	"QHq3abNJQV6p4UX/tNc/PcnJK/XfAaYAC/cU0w8omEIT25j2jI6x8DARSoPhIAvz3Ens0+Ncrsi1Agqg",
	"Z86xj0yfAJ6eCbjIIb2SPEvDi/5Z72h0nMmzNDSPJydTeNLt9wcn3dHJZNqFcDDoDvpH1gihyXB0dK7Q",
	"LxPcNlEp497VtMi4ufbpKfbpifeKQldkOwPccIxtzXdH4giHZktRfJr20DlgDx0lvrXdRNtN6vII7Yez",
	"MT+cRG4odb2J5EaqBceSZe2n4Kj9dIr9dNqTHBv442ixUXvd7L3XjRYYtcDYksCofWt2wrem7OYy7U6T",
	"urlsz4UmJrE2vGaaC7834vZPlae+QPblvZKWpdej/dP+Xku52q+m0K+mPSG3gf/MmoXcdlxmkkUrvWTY",
	"mzpJ6sOdzJ/P8Wx+a+ya58xuy+v77CwjkVKRLZiT1Ar5hiMSi95zMrvlhKb9Z5roKdplZi9dZnZhux2O",
	"F02BorYux5mdQJj2pdmiLw3NzSX5DlM/FnOBaJvVNlkbWdil1dJGYte0AwsV5o3s5GSchDP0uxs4E+R9",
	"VfXHro9myCsZgOI/UUn31fJWNlHO8tSWOB9jLU1Fjb6shgIE1tpNVpgmwH+E1KBImxX0+8MThrC/Hb8S",
	"OP/b8RvR7urDzeXby8+Khgy36mbPDumCv0W4aePBwRoPWqUibZjQhold4mra6FHF6EGoQjh8zW/dKYDA",
	"RQ9pMQNMPeKAhUfusYUswG/ts3Kj6C5Ljhu2ULjoIW2eUFsmBi1aJs575yd5lon3jyAloclWCl4jGE7s",
	"xMAUSrbZToYsDi6NGL0qtWDI64wsGKMJPJqgwUkXnoyG3dHZ0OxOjgcn3WF/ej6dTIYmnJ7mWDCaGy8q",
	"2y1ACPkNmyyu3HtoYwv45A65GzdTdIzRcNjsUwR9/G6Y0H3mgwkCExu6d8baFoxDQDQzqSSsJMVGNqqs",
	"fPp43ciWQvfDelK9um+Ihqr2lF20nNBdspUQut/GkuZ1GSNKanRNuGeGko/Xm1XKtG3kMG0j29xdh2UX",
	"oZuwhGwVPRWsIILtaDPIJswgK0cTVw0k3m4syHnvLE/p5GdTjmr5kgd2MHHnntjBwocUEMcVYSKxJC8G",
	"KNYmB/3e2ckwo02e9EdHZwOr3z2Zjgbd0eDY7EJzMuieWoPpdAjPRmfH0y1qkzo+uCg+ePPKWvOw4MMM",
	"7dDBwE8mGFiHdWjrSR2pWIcAtxUCXC3692kLe6kF7Imwp2N6C2N6Ny/tNQzl1aKe9sHZVx8cLeRpIW9T",
	"Qp72YNmdsN2qEbtbiNbdfqBugbC67LzyRgra/RKH4lZzi5E6FLjHXItXUuPSi82T/tF+ybo6srcosrcF",
	"L5QvWxR1tTfK05HY9z2EV3ulbD98V0fuau8U7Z3SVEV7Sm4qOlh3k14qKVkfWz9U8eLVYnqT1DXlgb1R",
	"GlMd3NswuJdnXtpghG8ame1m23xWiy1mCPhvp29UJKyjgldQP3YNxNp4ceDGi90jOG1I0YaUPeWV2qiz",
	"HqNOBrO1TTwVAp9FGvgm8c4tZGVdinkuSMk6aDUl6+B8mGPp+RABNR3wLKVjnePZPEnGGrWvUm4gmTWy",
	"z0B0cjKFx6g7nU5hd2QeTbvnp6jfncCT6enx2WQEBye7k4hVRzWnPkVQwP5ENbeZKbZpeHONE1Hnkd1h",
	"+1M1FOrAaZ1l9vCCp2ttAG3J0jlodQ7adR4pTzNBrQ7N3ojRi8GoqjVLtC0yZN2ELbQRq74Ri82+UftV",
	"hL4ldzuBtS2ZrfiqtC2qtirSMty0gekgDUytU5G2Gmmr0S5xNW0KWnOGWo7C+hYbJoO0aa3hsl4Lhhpi",
	"E48t6JdffjE6JXabwVnv6HiUY7d5FcyACQOKLDB5BBDMAwe6iUj7KpixH8RnRytyILaZAMekQRuad2Ne",
	"NxqlHplz6LooalYSeyOvLLLtDPrnZ2fmZNA9Gk2Ou6M+HHUnx2jYtabw3OqfnU1PjqHCtiPE0AZmHS4g",
	"V7LocBLUxpy9TlErdugmtZUmNhxOvLtvmOHLrBwUVGCT4fxrp0OCwk/VdpZ12FkEMJs6v1e4BxT0pNPT",
	"lmhk2mxyeGaT7e6twzGYhBtkvVaQLSNH2z+2av9YJTUt1zWqpKaNNdwNJoCItM3+6PTVL2dVFM7hMC8l",
	"xBX1EfgWYAhg4APs3iPXJx7qJTrnDWI8AQGH2Db2MQSBayHgEre3SVX0vDccnWZU0fOz44F5Zh51R5Y1",
	"6Y6Oj8zumWUNupPB2fT8yBqNoNXfoiqq89sW5bfdvKbXLL+tYA2HlvQs/VU6v+0B57fNolrbXrTtpQZn",
	"0PltN5bftkBolPLbaolxXcaLZM17IjHqJLmFSXI3LzI2SJKr5UXtBrTPbkBaUtSS4qYkRe1EsxNJcgvk",
	"znSS3BbccbJJcvM9cnZX4n2PLBw44FMUPB2j8tNgswLt+fn5fgm0OhNuUSbcFpxdvmxRntVOL09FKN/n",
	"PLja+WXbWXBrqCHaCUY7wTx1J5iN5cDdfW8YnQF3A84wFeOAi0OADyj8N6f7FNs+8n6nCHrm/GuTL4hG",
	"4ErMSiMgJrD5j6uMwVqv0j+gyBtjayVYIvcee8R1GP2sspbo8IM29jFaEbTePTZzxoCeBx/LIYugs0p/",
	"M6A+ccZTjGxrTJGNTB9ZYyFujLFVPHSrsesbDFtXRaxvK1i9zchE3kwQAmvImU3cdHnmpCVnKpVahsyj",
	"SltGXFXahcyg0jfJm77K2JnNXe0TxSaO2778/Pnlf9RfyDZrhXZlm1I1xKEkHdD0r+m/Cf1rq/EhWo01",
	"N9DcoBk30O4F2r1ASxmar6ybr2g/lDUnc6mfx6XFHC4tpG+B5p1LHmxkzUJnDC4UGRB7PpzYaDyBFI3v",
	"0OPSCw+ZxLPG2Mp7E3j20ivxr7gDCl9R6EKRyl4aKnkojWJC10S2zT907CBK4Qxl3qW+IXk2eRwzhhK/",
	"IO7UDpBrojHjn9LE2Tfy7IU+NKPjXv9okPjQQB9aZDZ2iY8mhMjftvRKmsNCvmADyUdMPUTnIfvJgmn5",
	"nTRW+iU275Cf21W8lTrPsD8PJmNMaSCDJ/VYbk7IzEZjy8P3qeby4+XmDkI+dmfLHaIXUpc/sAeXliM9",
	"lJreYZdtWpd4DrSNjmHDCfc6+stY2NCfEs8xLowH7FrkgRod4x55VDCIQW8wNH50DBu7CHpLs6UeS/M5",
	"0PeR5xDqRy5OUifFS5n6Fa/lkbGPZzBND8mzDFGHLxR7gyzoDLlYckRL1rf8TpqfbQHPCvxHVU/FS7lr",
	"MLGxOQ69lsQzD1FiB6oV8jf3qe+MH2U+kzLW6/oYCigP2RNBxS55UK1T+VpaaSS9rM+fbjQsKEN/5cNv",
	"AQKIUAApDRzkWhBQZEkhJNeX/8rzrYvXajjcL8+o7G9H7YBJxhTdD7ojeIzOEDrt9uFo1B0dH426k5PR",
	"WfcImWf9k34fnZ9NSouhpL4yctEzT/vTweDc6qLTwag7MvsnXXh+1O8eD/rnw/NB/+j4bJC46IWfgyP3",
	"vDnx0qhhD8zAH1OfeI8yTtMvVF0yrDL9XO4gw0rukHou79n0m+VFp16nXnAMkHnXJV1KHOTPsTvrYtqd",
	"eDy1VsegPvSKz5jBWUxXUeN4g/xlwAm2sf84NqE552c+tBzsYuozYcadjZlsymRLQRLSr2F/1Bn2R0x4",
	"gqaJFv7Ygd4d58KRl274nLErGj0r8Ss9740GyZkYNfbnHglm8zGlxLiYQpuygQLP42Z5sSTjgi0ozFUg",
	"cwW+GYwLY4Lu/98Eej5xmWpldIwp9qgfosn4J/KQg+HcEFQ5GJ52Yss/HZskYHJTn50MSZ+3NrlHnhE9",
	"ZHsvlKnEDhxTtr5kJbwZRciVnhF3QqBnMUgzwU5ExIegWnhkim00XsyJT2Q6M7EzDpbZlUBpCB6K6P/P",
	"3tsuOW4jaaO3wtWJiTknolAmQfADFbEx67XbXp+1PR5390zstjoUIAhWcVoiyyJV7Rq/fe9vEPymSIpS",
	"SRSlyj92lwiSIJCZyMTzZCJZoxZpCbaspQw08q/BN7PYX4nFv8JAknNZSot+56+E8v++f6ukwYfyDQuY",
	"y/6/3cpNbimxS+UuyKiZ0M2qYNY/Hlis8HCzdBU/Vhzxlwpd9a8PShD+m/I2F3fFj5RC3OO1WC7DBWc1",
	"P7L6a0V9dnS47n/J+4pAPBZRXI3EGZejVobjX/UpZa5c7YtDt0RulsumQCqFlBVXF5/9+EHK/exu9uFt",
	"vA5XLLhR3on1+llhgat8yzb3D2IdP39Uth/T+fzUCuWDWtQzxFZpfZPvSg3vk8/jcL0IH6O2BbTtamVe",
	"/iUCV0Sftl3MxoXqLWG4avH+aj//M/SDznukFJZX888THhe6qTuImR5GBHMLOVg1kWZw3bS4wUxLldFb",
	"GkNED/5jFgOlQXcsVlE50x/+SJ/qakxVsW4gW/dURJgmEDNVC5nE1FWXa5S5WgvtvPZQCYNLDjszddOw",
	"GDIskyKiCQ8xi9hIGMJxDN3RbUcf/DBDVXVXdSzkmI6FiOc5iGLLQ8x2qKs6GFvCG/wwoWmubQmGHEO4",
	"iOjcQswQJrItx9A9gl2HDn+Y6eimiQ2KNEopIly3kG0zFTHNwYYQHiUaHf6Zuk1dS3MQZ0JDhMgT1lyK",
	"TJMbhrA0W9OG90x1TVOzbQN5WKiIUIERs1SMsOpaOnYc6qjDZ9MzhEMcGyOOLY6I7pmIckMgbjLXVB3d",
	"FgNEI1l0WzaDEgGtCGPSqrrRtS2nhol121Jt5Oieh4imOoiqhopcz9Q0G1umYLzsTO1Z5bxpGiECE2RT",
	"z0LEdDhipkGQrTmGzQ3X07DR9QzZw6f2vhFPeLquOwg7OkbENRiyPVdFpoNNYanEsA2jZaCyxxXds2zX",
	"oTwZZYG9pHsUOdQUyHE112Y65cTFPY9JeugJ4TqMf2qObWNTcPsTdOy4ptAxEoRTRCyqIRvbHjKEZVjY",
	"EcwiTvnu5uOKT7ANnXGNYyQVl3i2iqghCOKGy7Ghaa6DzZ7HyGz8dbh5bOmhaQvbSGyUMLCGiMMSaVRt",
	"RAVjFiaep6ukfHT2lFLLmG4Tziykm4Qjwj2MbN2iyNY0TjxXI5aNt+9O+lOM82MSx67CdSxWZe9yA711",
	"HEdl8OUJMdsfZOuucA2XI+LaGiIu9ZDtEIpcQi1i6Z5BPa3raEUWRf59U7wty9FcYbpIV5mLiEEs5IjE",
	"FlAsVMyx6ah40ANlqk22J7zdb8/hVHjEQZqBDUQo9RAlOkeqwS1PY5RjKqpRUPaccpEwhaaqjCMTYx0R",
	"4XqIejZPRM20bc1SBdfb7pd0x0bnDzteckDSE1QfbmyvVvfuPsxWm0jWIGZeLNZKuFbEbxu2VOJQ+SkM",
	"bhRsKf//JlASP1bJPVgFqZaqTrde8aloagdUKZ5+geKO8yITqW4mY0XLzX3zt09+4MrfktglbZXOzNbN",
	"2ZbQwneblyrLcxLmz2d3H8rrH28abPj2Jnk42nqxujo9tzdJN1+Tj/9yM09XjfaGtd2uln5I65B9oQxB",
	"0zw2KaSLMFjIgGeeR8zzJALcGqpid2U7U67Q3ealBj7SvFzdom1eq+xqbuXfVeCKKafhQdnp42Te7Th5",
	"TlqFjkQSaR06rkkrkV+TlqK4K7MWXQ+tWI2OJk3rMZdKWWv38WYrp6a/adWadDbatiqdTTPrMs/sy7xq",
	"YTpvqlua7r6mFqccndTqFPk9DcszL23PPLU+XUNfWqHO7KLSGnU0aVqljmY169TRpmqlunKZqtYKKpt3",
	"0wUhn/Pq8jnBcoPlvm7LfTUpw8cumQ+qD6p/5aoPpzKcKxH9BQcyDDqL4cRVdYE2ehTaqG7cYqCNTps2",
	"CozQi2KEahNkhOrGrYatDkbo15xvIrbaRErkr/yl/9tGKL9twkjZxHVSqHpCUqiKNJcz22EmYin/Q2DE",
	"TJUhgR3dE4ZpuZzu5I3VPrRkHenYNCRjhgtEHEKQzZmDdFXzNGowZleZJa+SFPokligIo3i9WaElc8K1",
	"H0ZshcTvO0mhjRVkNyk0WyqPxvLU1VtiWYexPPPlq4vm6Yml/yj+YxWu2frWD5s8z/9OOp5zPOlujuc/",
	"WBz5nF0syVM9LsmzNnO7SJ5/2/hMWQuf+yJw/UgRvyeCsln7ii+56zle/3exVDJJVkpJVsTvt0cmfJq3",
	"tk4PJnz2KdwwwmeLbFYYn4loKqW8tdM9G43ab+1ictJrZnJ6luNoJtWRZXgOIoZnIGZZHFHT05iFPduz",
	"7f2ZnLpNVYpVioitYkRUpiHqaBpSKVexJajLVHsw94+5pqlqnoc4MTAinmkhZuseclysYWZprkuMwQ9z",
	"depZKuHI4p6NiKN6yKGmhwi1PcfyqKpbZDiT03EMqlouEsxLHqFiZDOuIsF1TBnmhKts8MNsy2GuranI",
	"E4IhQgwLUZsRJFyuUdPF1CXu4IcRh3CqahpyNNdGhGOMbGJTxC0Da4IzlxMx+GEaZRTbjo6YbVuImKqO",
	"mENtRGxH9zC1bW4Np4VygZlrEII4dxkimq0jKghFjArh6IanC5uensnZR6F0MTUN23WQwU01EQwHUVcn",
	"SOXCsDzBBOFiAIWSY0MVBnYRtbGJiEFtxCzDQJptCtfWuKdb9tEplK2sxZNSB5lqMmxyFXFiUkQEs5DD",
	"KEOuQSj2OPVsl+5FHcTcZhSrJqJuYkBczUJUpS4SHmOaaesq5c5LqIPjcvfguMa+4xpPRXQ76JDGqztv",
	"B45mfA1HM8JZO1AMZyBsCwcyjnAg4+6zGAExAsQIECNAjAAxAsQIECNAjF4lYqQBYnStiFFD7gExAsQI",
	"ECNAjAAxAsQIEKOdiJHEcQAvem7ss50aMmoe4QN4ERyycW2HbABSBEjRCZAiKITfekplooSVQyrdrJy9",
	"vy43JboPFPx4M3vctEBPxXHvQ3Gn9IaRSuqn+wI7quoD2AVgF4BdAHYB2AVgF4BdAHYB2AVg13Cwq1kD",
	"X2H3zA+GVcJP2x49PcrQCYBdAHYB2AVgF4BdAHYB2DUc7MrWVoC7nqt7eyevA/7+PFjX5OqBX3elbyjD",
	"fR0Q6C+bV1mOG2o09hRfhMrW56xs/f7MED1UuH5tFa7BGL4yY3g9xaK3uCQTqBoN6vTa1GlAAeb3UH/5",
	"VPWXv0rnaHb3x3hUqV9TydmDK/WN7ORIXKl0RIArtQdXavZzYphXfuD+26zJmWpB5qxbk1YA4W06FZzj",
	"Due4H+scd+vWNNUSwwaOHnD0gKMHHD3g6AFHDzh6wNG7Wo5e4VZPu4h5EgtAEXNg6QFLD1h6wNIDlh6w",
	"9PZg6WWbt0DSq+4qB5Om6WXbyxfK1mvb/r0M2lg27sAeOz17rFVIgFq0m1pUyCgwjF4Vw2gfhblC+kkh",
	"9iOyUPYacqAonJei0B2LtZ4C8KMfxYUPuOi6u8kxSO7KvcRv5D3fJbe8rd7RRpH4bSPWzxWORMCXG1dq",
	"YCcx4qb91kd2Lz4Em5Uj1h/b7veDWNyL9Y4HRP6/xI7bP76IzrBnINM+/p2RQLThXETRns7/0ClvhgPt",
	"E32CqnV/3s8gtn/AXzLh+ve3f/3pzeLtu19/+Pn7xd+//vH9m3TTOJn/Pxn/mYrQn4xv03Y//Pzuzfdv",
	"fm1pmIhKe7M/X13lvPOPKdTuu+7afVOQMKgeCNUDL8UaQv3Cc9UvDKMWr/kbiflHClMC8XmXL6V463Cl",
	"PK7DJ98VriI3v7dIu/KBfZ7WiYm8gahQg9q/o53cqx2T3Ft7sSSEmhUsJMWELNN0bOog4romItzBiBJP",
	"R7pjcEKZwWzNSwyK7LVwF6nRLemvT2y5SSb5XbLQp+9T5PtK9k4b7NjlJh+AVnQ4+UNAjC4JyzgoJwY3",
	"fgie2NJ3lZSvcWpA42ZGMD7sUxwWiSRyyTQ9UoQfP4i1IudeCdcKi5WlYIkjFAilISqzo32Xn43XYRhN",
	"aWN26eWIodovf337EjinXYkmj+90aX877FO3YfPZnXozT83Odo2GLSM1n919UD9OGBnqGonpQEVhdLFY",
	"Uaeg9W7PNgRunorcPBe6zvzAbeGbF+J3SWjTX9+eL2AF/Onq8KcpKeFVIlhdmnRUSGtSszgAFEuNGKBi",
	"J0HF8oyhUVN3f8peukfubn7LSNm7+bBA/i6cdQB5lK8oj7I1t0SlRiFPLSmWkGcOeebHyzNXLaPMw2rL",
	"2539KmSijNwvTxYFxfN/F67ix/82g3xeyOeFfF7I54V8Xsjnbc3nLdyXqefzaqoK+byQzwv5vJDPC/m8",
	"kM8L+bzD83nLNR5Semu7zRPP6c3n7UKzerf3Ki4kpzcfd8jqPX1Wb4uQQE7vAJJFKaPAqnhVWb3DFeYa",
	"GRGl2I+Y1bvHkENO71nZCxluMPG649kdI1EXsjEB5gIwF4C58NqZCzpV+5gLl1wcuh8Gr4HMO4dmG38G",
	"TgdwOo7H6dBNs4LFAakBSA1AagBSA5AajkRqyJfvqXMadKoDpwE4DcBpAE4DcBqukdNQfLlqU1dlSFOZ",
	"jYjwNGRTS0cOYZbreVx1vDblqDwyNY7AjTg6N6JwFYAacUHVzrNZu1BixPbu1YUQI7JhB17E6XkRLTIC",
	"vIgBvIhCRIEW8apoEcP15RppEYXUj8iK2GPEgRVxPlZEuYny5avm5sLuOudKeouS3tJX3Pxr2fCHrB2U",
	"NN+/pHlldk5Zx7w5pU3vXklnUkmn8pxFy0vRTWxcVXihZPlhXvwURhQKll9vwfJpyBeUK4dy5ZdhCaFY",
	"+XGKlVeQwhNULa84TPtXKC/94jHrklcEeoRi5FMk9qZQg3AXcTiEbavdYf3W1NQOjtPPDTGoXr0QPm29",
	"OLxlqZpjYIIcbJuImFwgxxMeshxqUMJ0auqJZO9PkU0+cbY3KfZx7YdbHLAxiFI5XJN41jW6SHPG8ytH",
	"5IBsydze/IWcbWDrDsOGZSFicIqIZlqIOgZGXBeC69y0Xd3cCf7uj7BVI9ZBRfkrN0Al/vqnFJL3YcZZ",
	"8OdYcYTiLFnwaVaG8os1+9zWYKpl+KsKNMZOw8E197u9welX3K/2thVuzGaoWVK/MvXNS4kpl78l5lL+",
	"kttn+euDf/+QVuWXOid/S+znRKHL7smFWvzHqcVfG9M+zCAXxY7q0FWR7GgiRTO/JsUzv1KIaH5VimlR",
	"eDoV1fyaFNfLQ1BPXb+/T1UAUL226v0XrrZXBuT26d5x6/1f+rzDGQFTwZOXYh3vQJKzNm3Q8dfJJQCL",
	"99nkk6N5CnS4mKY8SPs6/WFC+K/sECC/RwmCRh5LwHxfDeY7umQB2gto79StH+C808R5v45jxh8y50eJ",
	"w2riyxCoN70/92NPje7Kbp6gfNOHrfIQPUCpekfIrWnTWlmitBCOCNx6FnwtR/DDx7JsTlr2IU/9kn+V",
	"liMrBrOjcsBWP6qZ3izyK8UoWJz8V7DbHRnljUcW4BozdMJVDalEx4hoto1smzpI1U2TaZZwVa2SjZo5",
	"0onMLf0gTTGUSf9ZdvfdV199/vz5NpuEbXNFPaqqnHEkuPAQIR5BDvYs5FnYVj3NM1TNzC3YlonSWi2S",
	"pmYVA87chUD8HpeAr3gqqwksvbN2bTj02R9/yatXCWzuFVD2WdWTRJjHwv3SDk8V8Uu71w7xyYGRrQr7",
	"mSJ07dhfTirJjtEur328mVfNdnuD0izL52JVo0i1ESbvNHKnGXcY/698S74e9LdK14TkLX/MZ5/EVl+3",
	"zwP/knQiH6Avl4A5ZjMHaOML0MZsEHv3q1M1yO8oVaHYVu7f0K6qhTyVtt7mo2zUVI/OhhU1yd/XqgT5",
	"2wt1GdQ6U5t5qjjzVHU6vqvrSN4vaUfLQf8CeOgANQYk9EqQUDApY5mU68ZqM7twFJQWZHI0mQQceSI4",
	"clkxakBGcta4Lxf5Td4EkOX905Dl+J40AbmYwS1CcDZx0wGd064C6HyMKHjssQTQ+bWAzuNLFoDOADpP",
	"3foB6HwJycVSLvZPK5ae0pgZxbKfI+QS9yfp6vqtYZbF2tNOpcma+YjU81xN4VBuOjZyVMoQwcJFNmUY",
	"YayplmcTldhWMtRc1nYf+Nr+pM5G4yc/8tMK9rO7mfg9FuuALQtwmbku03TNQQxTHRGTqYiZjCBu6wbF",
	"lmFgT++pZrt/zmbq3g/K1kxFE/I065+SilxblmY2tBeWoyme2qu8HjEYOxI+mwr99DMy0362ArXy0hbC",
	"WViI7DmpjbiIdMr8WwHaPEYiZTaafZu/qQR17YCWklQ+O5MmyHYcJsmA7l1bnuMYWnXVAFeuGsdNQxxl",
	"WgDjmQjGUztzYwDMU7bvQ3q+q7QCsGd/sCcf5ZPiPdWp3IoyyhmcDupTdBiAn2PECGcYTsB+Xgv2cxbh",
	"AvgH4J8LsIGAAF0CApSLxv4gUO47jYkD5b0do6xsEAbPq3Az6CBf7U6nt7ZlFLhL0dEUHqqOFUtPDCb5",
	"PxcPmxUL5HFsd7O/i/WzErHYjzxfHiG7A+2pvjVHdYRQbY15DqKWjhGxTQvZjs4R5ZbuEFtQHbedkVc6",
	"ygcAO4UrPwjbKYQO4J3ap5RSc0EQjlfK9mnjqyMBOYWcTx/LKbraCufkV5uITmpW5omJmZdmbJ7asQtA",
	"dSpfDcDOMYCdckD7tjsLcerY8czEap4K1rwqWvNSuADiGSDWgPJcG8ozropdNd5T0ZPjQj4jzxGAPxMB",
	"f9KoAD2ye4H2SvZJb1SSG4ck/ryVzX9h9wIAocMAoXTAF0nfRsgEap3erRAmnVUlmdbpZQhtizaARscI",
	"Qc45roAevRb06LxSBjASwEiXZBUBT7rijKLSdx4TTtryN8+cYoTvNOMW28YeKUYYMw+buoWw6XmICMtD",
	"NsEmwpwaFjVsygyaTH4YJ55AtHGSqXOkfGQz3lPmcqs/BcDiB08iiv37FMzKL6Qj6bvSg3ZVbpqqayBb",
	"NxxELGIgWxgmsqnJDaKZrk1I4kr3IVyNDuQIF6e6YTFDR5SYGiKGbiHH1QjSXdWjpmGrGtdaEK6t6T4I",
	"6toOUgZhXlu3Afg1OLepRbouBh7bijLHCzKPBJhtL/vTR862VX14RlRD2lpLUOYnz9XsoLx729LOZ3ce",
	"W0aXAL1tTzVgcMfB4FoE8uDcg6aA9lXHqh5kVBfW/GktAjuviCwAevsoCyB714bsXbDiXjVM2KZ9x8UL",
	"L3nmAXwcGXx8XLJnJww/yUPeo6/+8N0v6VbJUsRie9PkW/m7wpToUXDf87mSP0BJHqA4z4rcn6nvmaR3",
	"/ZK1fJcedn/Mwzj226wg9Fa1Kmdx1L7w72Lpx0rkx0oQRvF6s1J+2/jRrYx+ok9JEJOs84qIldDzfO77",
	"kSKiSOw6JgPfGeqtaquNHQHNorajOwK5nFFENFtHDrUd5NicCRfbzHJ4uSNQn6w9NgFqN/bG/bWWSioG",
	"pw71fw5jxQs3gauEa6Uan0/rhIZC9msiXwmLcwFX3snpOUIk/O2bH9+8ezMwFm6ocrL0JCvOhcOdHV81",
	"ofgulYvXBTimgnnkoKVzqgHyA8hvD8uw24ksxPdVg26tVLJfRbz2xZPcDN5y8hY9Tt73Iq56eNErdPFq",
	"b70QF086XuDgPTdEfzwfr0mpAwdvag4e0MnAtQPX7kJcOyBTDSFT7c+h2rT4iu+lN7TvbmB619Zu4Om4",
	"U6nTtqgJ1QlOBD6ih/ou3XwrflIyv7N0UWWL8tedfqmt2pfll+bfBp5pVdHGc0t/eX9Gt/SkZJt6f1v5",
	"NcmVJr2mMqn1g1WnQY+Zvhv9y+biaDANUemDUaXIdKCoVdFpOWntssgq76cQGwAp5ZJIKeOp0cVTR3ZE",
	"Pi/kiIw4EQOYHO+ByHF8IseOJPGyWVtK+C+Vq5AIPjjALNTqBGnf1Qlrevtjp3QXfYFs7X3dckjEhp3z",
	"F3nHkGMNu/IT2ZWH9OnJ7fgPyHAutg4HJznnbsYIqc15586eyGxot4ahlonM2dGDi8SHupNGuuKgvXvw",
	"I8WXTJnst3Jn+b/Cz0ocKg8scJdC4ZsoDldijTzG/eC+SLP8y27acLVDRalclRANWw4yXVdFRFUd5DgO",
	"QcQ1Xao7glJM5awt5SBFD/6j/HYRPPnrMFjlxaTSEUq8e4kIaMwkmOqIE1tHRMc6srFNkKsy5tiqg13L",
	"KxGB2rOkly7zum1btzTTQ65qMEQs20SOp3FELEyJa3HGVKvrGYkk56aXLf3YFy2dVHVCTeF5yDOFg4in",
	"ckRV20C2ZXFi6ZgbpAJbNB9X9NMWlFqaqiNNpyoijmohxkwPUVVzbNsgqu46PY+R9Kl1uHms9lAiBmL9",
	"5PO2jps6dTjVKeKGqiKiOxqyXUMgylRd45pqYUst31g8p+ix4zBXx5aOLI9QRHTCkYOxhQSjlukR02Eu",
	"abs/7VXiyTUGVIaODXjnIGRnCKgDWeP1T8k6PP2E8MdyEThJ+LlHsnchpJOHljpQpWTOt7K20zFv/lxd",
	"eLZuSbX5uT3Lu2JTO9LAU9PQfrFq6TpeIO1ey6WJAWGQAn4c7GvHNrGU6a7swUy2Oy7XZLzrEVVZ78w+",
	"bMp8d5piRfY7G23rQGfTUhfamrz6NPSaPQQw76rAPLALL7MLVwNVRkcGJ0GwXihYkER/Luz1JfnzQ1Ln",
	"z5pTZWi3OrWHbY2lf+ZR+d82YSSdBKaswqWIYp8JhQX+yh+QNo9vidnMqXJt3dEcw0LCNAxEHMERcwRG",
	"lAnPYti1sS722P/q33jaZ69nIpstkLffl7d/qq2Mg7L1ry6PC3L0X0OOPuRwAVo8MDyAzPwRMvN3J+W/",
	"Rt+x+lbwHYf5jlAQoLcgwFg0TPAcgcJ4bRRG8BnBZzyBzwgEwEmk/A/J9h830//sSf77uL17sAlzD2Yf",
	"GiG+1WzYRt3PFYYaBH01CE7GCHt/Hk8YmGGvhRkG1RGAIQYMsSnVfoCyD8AUA/tw9UyxU9WzAAk7PWUM",
	"qnWchjFWhKS++6VR/mVYKQ8lzsptd9fzyAtyQ02P/Wt6yLqFJyzsUUzfeCWm/zzQVFdE80/Wtw3hhBog",
	"B8WdExlTQNiuFmGbjIQBxgcY36VYQ0AZj4IyVuZzb7hxQA2T9MSSfeuXjFBivFrDpKe+uDZqfXGNdtUX",
	"/zkfy+rPRW3x/OqQuuLlO3JQ0RQOpbZqINfUNESo6yBH1QVymWqZKhe2q2lnrCsOdSjqdSjklF9OGYoR",
	"Cp8fUJBi51IGxdAnGnFBkQgokH45ZRQGiDOgZ1A0/bUWTR+iH1dYRx2S+Y8KzYRRvFiF61isFrFYPS5Z",
	"Fm91IzHJyp3eobwr7mjFY4qG1XaAygxHZVom5xTgTMeMFlFH2+WRgZo2MQVMZnCEcN7hA/jlquCXcwsT",
	"IC2AtEzQxgGocqTa7S3+xh4wyJbTOQYY0iJ75y/uTm41zaxgIlIeZnceW0ai8Hd/em4b790ZVtWH52CI",
	"QblKmImRhqmNCFcpcpglECPU1RzGuKXjChjSGnrsgYm0ece90EjLDYCQ1D8llYoLQEhKmY1LmT11xLIP",
	"WtIm3dMFRtp624qPZP5jAx+RpmWeIt9TQUXaPwkAkJcAIK1j2rchKMWlc0MwFZt5KTivHPno0kIAOa4D",
	"5Di9+lw+utGuA8cBMkYYf0AwpoBgHFCauC3q7K1S3B5onq34BrlVsb4r2nu/XLKVsomVyA9iJQqXm5gN",
	"qCxn3GpW81QuW+ccu9hBrsUNRISOkWNwHVkOEZondIFN7YzBXtt0QqHgtkLB7eH/qUOp/coHt+r4tRSE",
	"6/04KCt8hWWFd8w4ABwAcOxvJ6Dc8LHLDQ93Cb8X8WvyB6vPvmB/EIr/thb/PY9DuEdJYPAGgUlztUwa",
	"8APBDzyxHwg8lHOWEB7uVWbVhMdmtOR1hQeTWibn1raTWpT3WYXbAf4tVbXL92+hom9bRd/zuLd71Pk9",
	"mXsLFJIr9cUvsZwuUElOWWn28MgCKCVAKXkFlJKjF2edBrcE6paehlqyIyc2P5qkwktuz4n9IWuYuJk/",
	"Fe2uJCe243bPX8Zi/SESbM0fPh7yBfkTZADyoidkxYtf8oyk9Uvu30RivfDdF41l9Uyal/SlcYDNy4Y2",
	"Pdim9RlsvWbPu0dWsFX//WNkXee6XNsAOUHWdYfNyAPR3FJU4tUzZl2PmUknm6UikTSUZqNouv3msqU0",
	"D4NaZmZgSNtEAoe0y9R60DdV1XfIsxtqOuwTU3Us2n79669f/0/7FyZq19buitLeQX5fofwCWnqlaClo",
	"86vUZsDDAQ+HVR7sQtMuAOPhkB2tIkdq97ZWtNe+Vtru1OzX/DmzRE50/qDJ/4s//sg7fVsyCZT/o7gs",
	"Fsmq8Kf/QX9aoT+589mXLwpSKs0lnv3lS/q4r/LnzYP689O/ongdBvfpLz8K5m4es9uqFzqe5KxrT3pk",
	"gRLFz0vx7/MZD5fh+k75fyxmm5TN008T38qJcYQSPwiF+2u+WUUxC7iIlPiBxcpSuEocKrE8UTn7mrw7",
	"jyyovq3+7uKvnd/4ndyNHuETPycf5DE/+6bP4fqTwiJF/P4oeCzcI3/WtyIW0mSN8WkP4Wc5g8W+z2cW",
	"Ka7swdE/7NcwjBXONpGITvhpv24ChSkG+vzwHCksYMvnyI+SadsEiYMWs8CVX5zEUVlvlNCrDcKRv/sn",
	"P/bvpUVRkpevhaS0n3aC/5GIbBSLx0hxfVd5DjdKzD6JZBzk+59EXTX/cuRv/lFEURKGLQVbB/GpP/Sz",
	"lFyxXP5FkX/zcLN0lQf2JJT7MBCKI+JYrLOLYhmJYlBk//b7+NnNDjqYqt8aNi7oYMXWrWRscaE5hqYz",
	"RAzTQgQLDVFqqsjituc6hiM8rM1uZqtUZrJ3pOfUZxNX/Sl6CNdx7Sz7h/DzouHzLPzVI0v0uSAMJo3S",
	"g+Dbr+UeUPvV2F+JpR+I1h8XTL564af4VFuLexH4m45rUczWa+EuwmD5XBDo6k2yc/na7o7XzF8Wl2K2",
	"7pok7c4wbglVi0nKeWM/Midcb1aKiBU3kTflt42/O/ekMeNyPorgIBZRXI0OGOfhJojrbs8yfS8SMZLv",
	"Rb9t/ILlp3FNE1y3kWFqKiK6piJH5RRpnqDYsjRmUFKy/Nqggn1Yfq1QQx/Lr+0GSGNpT2NpwVfOAK8M",
	"i1uvMHsFklaufxsWclVgb045wB7Ahs20U1RqS2fuZvTlqHRs/5w8R6XNHxojRwU2n2DzCTafYPMJNp9g",
	"8+kVbD61bg5d9u5TJc9vMzAtVDVuTdh6qm09QYZpW4bpeXaeDsowvYDE0lZJbz+7NZGXZmZpKlPyV3fN",
	"vDj/MTMZzeZVg9y8VjHMW2+pmqcsaaf5c2q1ui6mxrLz1vQ8v/aLVUvcaLNl4RvXu5aQRrPGItK4ypZi",
	"HUcLFseMP1SvSrdr4btJrz6U4/Vxevm9kNZ7nLTedmXtPTJSKm1HHlymvPnVVIErF3Ml7ri9pswdbapK",
	"3dWLmnLPC/metyt4T4NMyfsekZ+x2dWgpuzb7bYVfrtNp9JvN20q/naLpvLXWpQGYC5NQG1sP0KW9r5b",
	"6ZCcfUnJ2WAMwRjuZwyvKdf+6Cn2oE6gTnuqE1RMGJlfvllGu84Pz9q0nhieX4JDwocfEp6M2Sny04t5",
	"KkqjpT+MnIMuXwpHfQ/e0xh5vIDcdVXkrtGlB3hjwBubghUDStqRTu+WU7fHed1J8zGO6JbvOfuZ3Oat",
	"pdpl+eLsEXUombmun4ZQyfVEJWZfbhKD0fFY9U6nt6paYtzVxF3pnUlKRTI6tqtypu1kNhjmrWFplSrL",
	"8ty0Ch+hUXtYrD2xFoHrR4oI/JXCw/V68xj7iv8YyfNEJMCNPdsVzHCR65kuIpbGEaPURI5DhO2Y2GMu",
	"rvAoooVE0Gd3aul3r0N3I+1l4ouHceIuiBXzl8lnfpTy6ad9IjezaMn4pwVb+kzOdHI9/Yk/sCAQy+K3",
	"zX3t0cgglmU4Nkaq7WBENIcgh3ALOdTBnDNXpZ6ZuMWCrSTXA2tkZ0Xp6oAmvvaSOWkP/ph9Es8yZpHQ",
	"983siS03IvfchStB7kRkvVrrB1Zpyl0Ta8TmDjeEQ7Bm2p6g1HMdQ2W6SYSGHayajEvLnz7AX7F7UXnE",
	"Wtz7Ubx+rtrh9J9frZ5RFvjfpS+SHcr3AtJggvFPUczuhRyPVEQKmVOJ9Z/f2YNkzjQHy9zfNr4iZIqy",
	"wuLfNiKRsns/ftg4i7WQchCunxfOmgX8YXY3W7EoFuvWNqlspe+49+Ml2/2ERpvqEx7EOvy0WbDHx9rP",
	"UgF0j2kO1xwkGNcQ0S2OHNfRkUY41oXt2RaxOxTg08YR60DEIlq44nEZPifKXXtDpiLfylQqFvgrXwnC",
	"QJG0h9t2dQkfo3sR+NVZS1bKtbuJn6u/FVpl3MweN87S54vaZGSUpL30LeW/yH6iIAyQ7OcBWlWIjBTK",
	"3IH5ZCeq1EMMUu2m0ayejJgMsJI+Y2cPSnueE3kc7OieqWrIdjFDxKAMMcFMpNkkucA1m+uVSvFpVL1H",
	"aXgZ8PdRddIlOFO3E3NzfsgO9I/DTyI4OR/nZkYwPuxTivn9MOMs+HOsOEJxliz4NDtan/1sLA6jD5Vu",
	"1GPmEx1/4+WXv74dTBKSL51uuXnZvVYaUPrxWwyddKC3fk7XsRaSys286ki1N2jwiLCqUaTaCJN3GrnT",
	"jDuM/1e+JXfe+lulTkHylj/myTrd7KtcrGs/fvkoaUne/jflQ/plKlycbD6nQ74Jo8srqp8OYh8klilH",
	"FxqVKUnX5YqytIEuslFTaTobtmBsraqRv71QokGtM2Wap5oxT3Wj47tSHdm++OVjBuN5x3lQOXVfLoz7",
	"kp5Zf/ytRmC7XM9RBGB8Lsr4XD7XJLMgxzm/AaT3sqR3ALUjXbSA23FMbkd/1cDWY7TT7Yjug7MLBOBs",
	"hwqatRSx7BG1Pfd0i6uxsV7dxy33aOubo9VdqU3wKQg/B/07U9v9KbcI3kSxLJckloLHm0h5Cpebx5jF",
	"YnU7ZKuqfGi+VWXpQmPUNZBHLYqIaTBkq0Qg4qqqplq6rjp4hK0qqGDUWsHodPtAe1QpSrX+WuoT1b8G",
	"yCvXR16BmkTALVH2sgFA/Zh2NaI+/zE7InsEEkl+KnY3j+QCPNYKFURTNU1ng2B5Wx0My6fwc+THimCK",
	"iOKC/KF7mu7YmomYqZqIaEQgR2U6ck3doZph645L+skfUczuE9HZwfww9kWis+cix9EsS3dcZDvMQwSb",
	"OqJUTf5UuW6pmoct6wCAuhi8L0PCheNxKSxzH/5O9Ohzn8V+pDyG63UoqRVsE18Cq8J0LVPFuol0S7cQ",
	"IY6DbN3UETN0h3FdJ1yK+YtYFT+HUbzerJTfNr6yYveBr/DN8pEdi1dhHo9XEaQ9Rb9tfCR7imRPD+Er",
	"tTIrXhzD7sOusG4tYk0zZIXKJ22VT07IXHh/hogVGAzAYLiCvYULrCMCcAwwGS6lisce207AaABGAxgh",
	"YDTstzUJ1AagNkDVitMxG8r9t766FUWrtsoVb8uLV1K7ouP29DzOD8lfHw/pf3Z/tNzcv+T+6i5p/3PG",
	"qMGRW8ATVOGoSF2+qVLI2riVOPKenO2M3UQCBh0qu9zcD2lXlaHW9pdeC+T1zRgQOq6J0PEa5Rc4K8BZ",
	"AUsOFVmOWJElE57hNVkyB3OEqixZ10aoy/JyWoV+p6m3pmVUaBXVMX+zZFHsR4Kt+UO9BsvCd6XfLnQq",
	"PIMQxExBEfEMG1HuuUjzdM+yDSKoUBOfvpdw4Qc9dItZajUefvtq9YzSRnntjtkOGkb+3FYSRvO5S1Z9",
	"bg9nR8hB4emooMd16LYwJmb/DB+C/ygNXjK0oaj+0ORUzGyL6ExzMNI0lyFiqwLZhOrIIsQ0VWpbjvBm",
	"TdbF7Je/0f+2fkjmuY1tMftF/qhUfyy4OQtXPIrAFQF/zqfT1kzsWdxCuq06iGgUI4ZVG2mcmqpKPGZp",
	"ePZxX/7G9oghlWLdYaaGHFsQRDyhItuyTeRRZjPiYEpVZweXoiG7OZeCarrlasJF2NZsRDRmI0fVCRLU",
	"Sr7H1DSHl1yKIhQdzqbIR6+PT5GbJ6hXUfuUVIOmX6yitAOn2J/Yo2BFLp6TJXzkHWylfGTRUo34UJmw",
	"5qVtA9ZsUbOy27wPufZtPbViL5vXKga4eal9OdrdKl1+Wtq1LEK7W7U/rYUA87FCmqmbdXl1InSSUlqg",
	"JMYLiCTFMPbBX1LAOsCbqop1NGlRxo6WdaXsxMBS5ex6W1VJO9pUlbWjSYfSDm6dqVt3+zYlHty6/+mt",
	"YOLHGhjZUOx5rtqvu+hGdQkCkspVkFTAwIGBqxu4i6fBlFbqKPwX0BDQkIaGQPGQM1FsivIhaU7a9tb1",
	"t/L3avpnvj/UngCatq/uWJ8uJ/MYe8gqvbUp7tpDjhVvc++zWGGcbyK22kTKk1j6Mg9ve0f54zSS83r2",
	"f2uZhb9tWOQXNUs2K1kr/IUpdN1Zc137tnvvyD5WvgHJb0DlN6DkG3ZvvuJbYuiNzddB+8djbb5mKaKQ",
	"zvZcs0En3dv89s2Pb9692XN381oqsWx9z4T2udL5f13snVQYT7TdADVZgN+i7GkNdrvohci+agbI8Dp8",
	"/Y709yIGLxq86Al70bVJn6QXDXUMW+sYntaNHl7LEHxooL9fIP0dvGfwno/vPQN5+pw1Dft98bT9ODTs",
	"rK5hLxP7wvz/cZjYO+KCGmeaBWH8INZ7crJ3xA1dbziQnd1dX3GWOGJhnaH9OVwv3ZdytHkXR5sO52gX",
	"ldjG52ofBxnQiDHlmAYK3bUVujsx6/n9WUIaYD8D+3li7GcopwcsaKBAvWoW9Pvz7qsAGxrY0GDogA19",
	"djb0scsCgqqAquxPi4bCg6diRX9V2al7YOu4sxrh96IoC6cU9yjpPd2sjh/ylt9kDQfUKXwUaz/cewv8",
	"uJvH6ZaZgbAuty7zP3W18qeJVLP2p6bX/sT1xtia3anDd8sa89K/a5ZX+oPdsl2COpFyhsWy2pznv6TS",
	"f71lAff/cuAXXDW/YA85ACICEBGOa1mAsXAWxkKrJ7p5jP2V2MMNTW/Y6YO+l80OcUBHdzhNpJHZnaZW",
	"nUqj+YPZ/MFq/mA3f6CNHxLXtP6D1vwBN3/Qmz80e4qbPcXNnuJmT3Gzpzjt6XA3uSo04CMf4iM3tGhy",
	"DnJ1hl+Rdzzos8E1vm7XeKAQgF8MfvERbQo4xed1ihNTHPu7T4Yp2rWfDVO5fCWnw4xzqooct+fTHKtS",
	"mZPS0Sp+HNvVyl88XoH3y/fTxh8zcPKuy8k7hwSBhwge4lSsGbiXRztiI3VV9jljI71jlEM2sled/pSN",
	"vU/UMG51lXTkcf2Xf/+g/LL2w2yc8moIanuxg+Iz72Yr4fqb1WzvfB51d75OtcN5vo5u6cxgKkM64w4i",
	"mqYiWxU24hxTzTJtzyRWNV+n8DL3ydjJfOH+lJ1MCuEohQs9SqGwCacJSfY6TSF/8YQzivIuHiOnKB98",
	"+TtPnsvZUl7ZThaaTJJMOQBwSMCL0mOKgTwhGbaQsPx6IWV5iy52K9Str6k65GpcSa7GBWjdFaQPlKpz",
	"pLyBS5g2qPA9Opc9F4uDanxnkUt/ke9KyHy6+iQHxLAatTti2B8eo81K8VePwvVjhT2Ktc9WCg/X681j",
	"7N+WUe3bN3/XThXXRuJJQ6ru2JwxC2mcC0Qsy0O25zCEHVslhq0ahmPtDn/NW6I2S/Bhw6Kuzgxky2oq",
	"qsUQcz2MiOUaqmuYjsPNUcNfKGbdXsz6xNHlnvWsC3NxNdX4tr4IalpfY03rlmkGUAdAnYEWAepaH7+u",
	"da/zKOnn4Dme23OsfutkPUco4NxRwPnEruM+NZzBbwSe0YXyjMBjBI/xFB4jsHTOW8u51//MizmPwvcp",
	"qjn3UX6m6/T+JN3UNtLPyVzcR23Irqemk6n7rlCot71Q76k5Ne/P5LoCt+b1euUXWYIWODbTroq6X5QC",
	"XBvg2gDXZnD4BqQbqB95fM6N9NHRI7sXSDxJF3t/7k1eoklJn6YkT1Pk03rZOHk9ybfyrl/Y/anPDe0L",
	"K/GdRm4pKU8Ekv1PnHjhKuJ3seZ+LF8rVkroeT73meImoixuK0fkpCfQYMw8bOoWwqbnISIsD9kEmwhz",
	"aljUsCkzaBmMRhsnGV5Hbjx4bBmJmyR0Wg/uaRFn+cGTiGL/nsXpKTzphcVjelKSjFxclZum6hrI1g0H",
	"EYsYyBaGiWxqcoNopmsTksQ0feEsTsJZrDehGGKprkqIijzP44gIXUeOZtvIs1zP4SqxtDQMzBPBsxGr",
	"djKVwNn+hTW3n9Ib8XbfBsyfVuZPt4ZXouJcn5VUoZVEo5U36ZSOTg7atmvXAvZ0fxmQha6QLNQ33QAB",
	"AQS0p4UA8tCxyUM9zkQnnWjb9Y3A970Q37fagevyfYG71MpdmoLzuwe9CTxfoDtdON0JfF7weUf1eYH+",
	"dE760977x+kjOvaPT06N6vagxiBLHeLHSz+kcsz5xbjsxNZ17GELqa7uIMKwhxxTdxDTTDtx4C3qGgNc",
	"duOWGuQqXXagbLVRtqbgse/B6jqNx35SdlePPrTSveSlLVJXXeG3D1lPG2QvrBiL6gHtFXs0zwzSVAhg",
	"FxGvXCARrE/4+rgNqRB2MRcawth5gGgmlGVnqoLZOIy0Kpzzini+bp7YgeEd8MUuiS92DUp6+XSy3WHx",
	"C2llVzHNwDo7G+tsx8EY6fHfSkUgOk7IqAFpcETG8CMyKqp2glMyavOn5PNX5NGUkdfoB2ZURBCOzDgg",
	"pIFDMwDdean7D8dmAHA0HeAIDs64yIMzSgdmj7MzxoKM5OkZZQ9HOECDLZfh50Uk2Jo/LERw7wdi4Qeu",
	"+D1H7HYk19u3qkm7kuufa5vl1Ys3MxEwZ1kCg14YxmK9KJL7te/wd0Sb3czu2SJeM/7JD+4l/iQXisws",
	"l81V1dS+w4kvLz3IAmqShx7+KwwS4/H+3TcVkKLeud0p+fUP/SycyI/F4nHtPzH+vEgczaxr+aVo85gY",
	"p7ZLxU85umSownMdW0PEclxEhKciB7sWosTROGZYaIxXcvur4c0e2f0V3703wb+iInCwR+1Tsg5P/2SP",
	"7UDqhHHUPqd8VNbP6dYiqOhXKzwlxWCPcgRVa9W8VjV8zWudxnmemc35LHoIPy/Sw11bf1wsWRQvXPac",
	"dF1Xb+aZhSwbZ4Y4+2F6YBicNfLCOghVae7bY02l+vBk3pqUd7SpSXtHm26pnxdSO69LfteFivTPM/mf",
	"FxpQuynXgnmpB6/8BJSaBgLOdi11GcAaHGoNrgneO9rZLCBOB4sTnBhzRhzxkDNjKnFx77ExYxWoeOne",
	"jXVLTbV97ybdrzj3Hs0vYu2JtQhcP5KVFgI/9pU4jNlKWbH7gK1ud+/b0Fu1Uv3xyPs2pokdT3UpsjVM",
	"EXFsjGzbtZHnubbncp2agp1l3wbqUrTVpRh1V+TQAhTXmIAHRSdeSdEJSL0DBHV4EAKFJk55Ss1Od/V7",
	"EYOvOiVftf6Rr8VXhToSrXUkRnVWDyoYAZ4q0AgvkUYIPir4qKfxUYGEd9ZzcXZ6vNnROCNXgNjJ6LsU",
	"T7vJ6Pu2vKi8L8pFTIvZV+nYToafrWqvzvuGkhBtJSHG5c+9P5vzDTy618Ojg3ISwKcDPt35q1hA/Qrg",
	"1YFVuFJe3dHPYQK5OiXBDup0HJFfFwu22lGgI23SVpLjXXYFinEM3l5KBvMUVTjyScrj3XRqxi24IfsA",
	"lTaGxnkjDxdgY9eEjY0uPIC6Aeo2ARsGeN6RimokMze8mkbiToxQRyPp1AgFNAqg6o1pYAPPduFrWLtV",
	"bbMDX3vzJNbP8YMf3Ct+4K1ZFK83PN6shbIWywzFyhzRH2rXy4LrYsX8ZeKcJX7dkvFPC7b0mfz28if+",
	"wIJA5M36cbFah8ty6LbmMtVFpudqiBBPQ46qcsSxyogrXMKtCpx1vw43j/sAWdKz7UOwpMRBcYrap6SC",
	"Mf3aFHGq/0ePLvYoQyGXmsniZqm6tCJmmbM3CDCbCAQlxxpqOLwIc8ok4jQnsb/6UgeZhAIWcyVYzOm1",
	"5eIhi0zkjwJRjDDckCp/jq38A3LkpV/elxxfBH8nPPNq34hMvaWm3ZdblIVc3yYP3qwUtonFSlmFy6Uf",
	"+0x5CpebxyR2kCk+JwvD8K1KaSMMMw1Xcw2PIl3FBiImsxDDjCPV1LEwCCYed04ehkGueVuu+aminL3S",
	"ylM1vpIsnfrHQCL59SWSN2cYcALACXbbAUgdP3bqeI8X972IwYU71IWr9nJSLhykYLemYJ/KhxuebQ0O",
	"HHBILodDAq4buG5Hdt2AgXHOjOoeRzBtPAKXI0ui7qZzTNbzrNI5cgdkm8jxNndNTkrhsIk5RccTso/b",
	"so9PxpB4P77fCUyJy/ePLzBLFxgTJ0xm3cPZB+YEMCeujzlx7CzPaVAoIBnyiAyKz+H6k7cMPy/4JorD",
	"1cLzxdJdRGIppNofQq7Y8che3sU/snu/kbd+l9z5Nr/x1Jv51d4moQfGN7N7EfibaFF8kgxJHM2mXhKD",
	"EE11ETE0gZijY6R5gmFmeR42jdnNzA+474ogXvAwcP1suL7++X8SsyG/SbiL1NgvfFcGSHnMo5llRLNr",
	"gvaIdXY8qjcMag5Ex9wCyaKNZLFj1CoxVJ/8j8/L2GkcrmTHf/B3Apvj+tgce0w+oAWAFrzIegAH5Ngc",
	"kMOcze9FDJ7mZXuawAVp5YJMyNUcTh8BP3O6fiaQTsDDBA/zijxMoKqck6pymL+aPmeny3pydssu72IE",
	"4ssovvMPb6/ZdQY2SxubZdjgjelAD+fBjOJAn5Qis+sLWskz27orn/XDW9m6RX/ns7sP6seJ8GguMRq4",
	"QIrNTsnqg7NbJCx/7g9vizvbJG1eyNqr5uAcJ/YBes4l0XMmoHEXz9/ZO+R7IbVnCnMG3J8zcX9iFn16",
	"CdNHSR4wiNfzjkWfTo2u9CRCaHeadqsTvUiEeAyjLObTEsc++rSQewPyQQ7nadaCXIXvZn/Psm/FSlky",
	"R+bnPomlEgn3dnYzyxsX6RKBq7BAkUkSyYvWIl3Y8kzfaOP8U/BYNv1t4yubWPEDxdvc+/HtLOtLvs0g",
	"AneRPygOZfHEzaPv+klnZOHEvrwK7U7Dt4RWDmyuhckWpqagNkaUuzoinKuIeZwgSoVpUM3hGBtFMgbT",
	"DF0Vro64aZuI6B5H1BQMebbADsbMsZjeEhVL+TokBpaj0Bfx1loC+6iXfSS1tCV+fSdn52zcotT4XBvC",
	"U/8q4A1dMW+oOdWA4QCGs4dlAE7QyThBPW5phQEEPuk5fNL6N1+vTwo8pV6e0smd0gNYSOCRAsPoQhlG",
	"4IuCL3pSXxTYQ1NgD/VtuNa5QoVzOx43SK7oIzCBDvOp8U6fOqfHTH1PV7PtV+A/A1mpjaw0mvt8AAfp",
	"eO7zOIwj2d9WflFuNeazO/VmXrUb2bNyhZYPZK67YClJz4/FKn1iFPn3gXAXcbjYRGK98N1mtZ/HtR8m",
	"sy9/X4afU+5SOuVDKwPd5Cdwy1+TICF9dBjFyZsLfDb2V2LpB6I4lLpoUq/WNU8kZT7b7uxWuaIvH79M",
	"jU412UDnkslTqZL0kQAKZZmn6jKvK0z5/EJp8pc0Fad4S4vydJQWKZQov54oUkE8yJTp8FPnM+XKr0oF",
	"K17dqWS1s987FG2eqtpcKlvH2ztqqqSqB+yyPeNe4JJdJJcMDNBkDdD1kO3a90OORa0DEZ6uCAP38Dzc",
	"Q7kD0wrt/uhHsVI2a25zJZf/Ubnativ320asnyvbcumZ7bO+vbib9lsf2b34kJ7m/rHtfj+Ixb1Y73hA",
	"5P9L7Lj944s2zfbciunaqYg2nIso2nNzYmvCmpsSJ8Hz/rzbrI94Wv+frwQtHHHIAIm8RiRyVAEClBNQ",
	"zonYMkBQhyCoYdTi8H0jAb1IYUogPpcIh7cOV8rjOnzyXeEqEgts+oLpnbmbcWK4MxCfC6yzHebUjnvS",
	"x2rFAjd1X2VwhGIRxTtO/NDuNOuWWlbfWXMiYM6yxKdF8OSvw2CVhF9ZqYObWW5a2NKPn8ufZSHo8s8y",
	"bHt+FOXPmev7Lu3uWjwKFi/Ek1g/L9xNOn15X7KLyQ8fZm9nN7OfZjezd7Ob2T9mN7NfZzez72Y3s/eJ",
	"/xiJ9ZPPK2+JkifWehctN/fy5A753njt39+LdQXwbS+X9uOPrdUgFox/CsLPS+HeZ2Od9rilpSviNMGt",
	"t1VlnIsqbS3NaiPf11DORV+D4qd1KF3uzp7VprHviZ98KZCySkbL5ZUf+/ds50CsRRQun3a1yua7rzu5",
	"BPS2idl6Z48KcLj7MXm00/mMJz/yHX/HpLHlwg8Yj/0n2a7xsGR4ZeAUhOsVW86qGpZ2UTQVr3irn1/K",
	"xb6IMNOWpULINxQPyGH2AcyDumH5zPxsSHNCgWNxwgysIWoQjojr2IhilSCb68SglsAqJdIeLKUJiB78",
	"R6mWRVi63gRRaRBlxZUG7aB68csWN+EgWsIQRoKSmdwTkxF+CJ7Y0neVOPwkgmkREMo1+nO52p4kzv/l",
	"r2/3ZR5Ek+caDD8DKFnD9kD/My+h+XOinM3fWtfhjkbywof57O189vFmnnsMNfZAjSBRW2qzMajYIfmW",
	"3OTI9+S2KH1NaShTPUvfWreLactMnxoNcuOYtslMfqNN1VIm7ZIvqTWo15L5+scfZUd7LX216kzHcrmj",
	"SYW90d2o4jnsely2Iu5oVlvwdz5SrsM7WtW8lh1tpeOy660FD+aPLzu+QXo3PQ1LD6CnUcWF62nVcAl7",
	"WlZdoZ5mFVeou1XNaZDNvkidrLntueinmvxRlkEq/ePtq1uue9sDCo97+2IRCTQuTYwUFE2JBhRGF8sD",
	"OvzwH7mgHY4e5gtcx2W50HVca1/w+htnDT4k/5UVTD7Kq/kC2EQlt0Db+kJYjml1Mcx7UCyIeR+KRbHo",
	"wtbCWPSosTgWd+QL5HbDYpEs2uYL5Xbb2mI5ryyX/UVfkkUz/5j+hbOlTEzXAjqsaQNl7m9cXVAHPj5f",
	"WIc1ry+wQ1+RLrTDWtcX3GH3pAvvwN5UcP9kXZoPWYT7G1cW4v6G1cW4v2VzQe5vXVuU+5tWF+belvXF",
	"eZ4vz/PtBbqidrnl+ZjVR6os1J2tthfsngeWC3dno3IBb2tyYQTDv749GZ4FnMKr4xSCMwPODDgz4MyA",
	"M/OKnJmrIStHR6Ynw2oIqyGshrAawmr4mlbDAXkPaVANiQ9HTnx4Sb3lIaWWT13SLuelpeSVnWQ025wE",
	"Ge3bTfDJX386Bx/NLV4NlDSgpAElrZ2SNoCAZt/ahPQQ0DRLMNUyONI0rCLiUo6o0CmigmpctSljWLtQ",
	"AhpUOO+rcH4qLtpBhc2vroIklDN/DeXMoXok5FUN3ICEIuYjFDHfXb98rECvTEAqIxkI+yDsg7APwr4x",
	"wr66MXlVYR8cItB7iMBYtUYg6IM6HddWpwPCPQj3ThDuQZWLSZwTMOSIgHGPBxjjZIBriFjfF6cQjB6x",
	"lgcgQMQKEStErC8AKg3TeJ0RKxzb0Xdsx8mKZrw/T8B6lcUzhtSmOLjABpTSgFIaUEoDSmlcYCkNOFrn",
	"VZTU2CdV5Wg5OpCFA1k4kIUDWThQYOOVneAFh3dBoQ1wccDFARcHXBxwcaDsxnTLbpzqeEBYJGGRhEUS",
	"FklYJKEaB5xCeo5iHF/xTRSHq4Xni6W7iMRSSI0feETpouvuvpNLv5H3fJfc8rZ6B5xmuv9ppu3jf8pD",
	"TnumvEnvaJ/oM52HWriwXRIPB6Yejoqef0whU+O6MzWmIGGQKwK5IpdiDSFb5VzZKnuc89rhS+1//Gub",
	"pzXikbAd3zHGSbHVF/vu7A7rN7N7EfibqOxdekKjZlMPM46IprqIGJpAzNEx0jzBMLM8D5tGK/e+oOWn",
	"3yXcRWqW8xSSktg+2+KadzrLB1DQO1z9Icz0LjmDox23jnbsEuURo5tDToHcufZMnunepSqtBPiG2mf8",
	"8Q4OdkYPblHf+ezugzpdrulXnUMC57odgYTaKXF9mFRT8kpYpgeyqOyCt0nhvJBDOHdoqAYAX+rK+FKT",
	"1MYrRPC7VeqoyP40pxMqv58PbKqEY1++2s7Y3Q02KWnbPmjpXdYCoKT9oaRkdE8JHBXT1wyk0kk7IyxU",
	"kczEQNZlE2ChgwKYiYwpwEJXCwtNRsIAFgJY6FKsIcBCR4GFqtDCCfEh6TLtjwYlDtWY6E/SyzGwnv4q",
	"ZtotIbQoPJTzpmd3OPE4o0+Vel4O52nNI7ki3s3+SyyXYTrMv0odnt3M8ibZhL8VgauwQBEr5icu6ONa",
	"pPY+L8YUbZx/Ch53PE12IBcGEbiL/DlxmHjCsYji/8i+P7EfswF1luqfW8e6LExNQW2MKHd1RDhXEfM4",
	"QZQK06CawzE2ZjluZdq2YTBhIc0mJiKmiRGjhotMG+tUcxn1VLsF2Uq9+QNwLDkWg+opSekHjGoLo5ID",
	"c8pA6lAEqneZmz4CJbvZijc1CxWV9iR7Vq7f8oHMdRcsRWf9WKzSJ0aRfx8IdxGHi00k1ilqVSuP9Lj2",
	"w6LqzjL8nKJWRQWboZWdKrWAkhgufXQYxcmbS363vxJLPxC1WkyySbRk/NOCP7AgEEuJkP0xn213dqsE",
	"1ZePX6YIpPWKJABpxwHS0sHs29ltS2OqKFH5/EKR8pc0lal4S4tCdSRWFYqVX0+Uq9gzruSgHJZL1sgK",
	"kkpXvLpT8ZpZXm3KN0/Vby4VsOPtHUlyqToCnjjUEACeeG14IhilyRql64JVd1iW48KqINXTlWpAl0dD",
	"l7+ktd3zLboknL3r0Nek/f8NAAD///BNDPOraQoA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

