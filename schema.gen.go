// Package rootly provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package rootly

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemCondition.
const (
	ActionItemTriggerParamsIncidentActionItemConditionALL ActionItemTriggerParamsIncidentActionItemCondition = "ALL"

	ActionItemTriggerParamsIncidentActionItemConditionANY ActionItemTriggerParamsIncidentActionItemCondition = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionNONE ActionItemTriggerParamsIncidentActionItemCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionGroup.
const (
	ActionItemTriggerParamsIncidentActionItemConditionGroupANY ActionItemTriggerParamsIncidentActionItemConditionGroup = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionGroupIS ActionItemTriggerParamsIncidentActionItemConditionGroup = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionGroupNONE ActionItemTriggerParamsIncidentActionItemConditionGroup = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionGroupSET ActionItemTriggerParamsIncidentActionItemConditionGroup = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionGroupUNSET ActionItemTriggerParamsIncidentActionItemConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionKind.
const (
	ActionItemTriggerParamsIncidentActionItemConditionKindANY ActionItemTriggerParamsIncidentActionItemConditionKind = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionKindIS ActionItemTriggerParamsIncidentActionItemConditionKind = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionKindNONE ActionItemTriggerParamsIncidentActionItemConditionKind = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionKindSET ActionItemTriggerParamsIncidentActionItemConditionKind = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionKindUNSET ActionItemTriggerParamsIncidentActionItemConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionPriority.
const (
	ActionItemTriggerParamsIncidentActionItemConditionPriorityANY ActionItemTriggerParamsIncidentActionItemConditionPriority = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityIS ActionItemTriggerParamsIncidentActionItemConditionPriority = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityNONE ActionItemTriggerParamsIncidentActionItemConditionPriority = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionPrioritySET ActionItemTriggerParamsIncidentActionItemConditionPriority = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionPriorityUNSET ActionItemTriggerParamsIncidentActionItemConditionPriority = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemConditionStatus.
const (
	ActionItemTriggerParamsIncidentActionItemConditionStatusANY ActionItemTriggerParamsIncidentActionItemConditionStatus = "ANY"

	ActionItemTriggerParamsIncidentActionItemConditionStatusIS ActionItemTriggerParamsIncidentActionItemConditionStatus = "IS"

	ActionItemTriggerParamsIncidentActionItemConditionStatusNONE ActionItemTriggerParamsIncidentActionItemConditionStatus = "NONE"

	ActionItemTriggerParamsIncidentActionItemConditionStatusSET ActionItemTriggerParamsIncidentActionItemConditionStatus = "SET"

	ActionItemTriggerParamsIncidentActionItemConditionStatusUNSET ActionItemTriggerParamsIncidentActionItemConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemKinds.
const (
	ActionItemTriggerParamsIncidentActionItemKindsFollowUp ActionItemTriggerParamsIncidentActionItemKinds = "follow_up"

	ActionItemTriggerParamsIncidentActionItemKindsTask ActionItemTriggerParamsIncidentActionItemKinds = "task"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemPriorities.
const (
	ActionItemTriggerParamsIncidentActionItemPrioritiesHigh ActionItemTriggerParamsIncidentActionItemPriorities = "high"

	ActionItemTriggerParamsIncidentActionItemPrioritiesLow ActionItemTriggerParamsIncidentActionItemPriorities = "low"

	ActionItemTriggerParamsIncidentActionItemPrioritiesMedium ActionItemTriggerParamsIncidentActionItemPriorities = "medium"
)

// Defines values for ActionItemTriggerParamsIncidentActionItemStatuses.
const (
	ActionItemTriggerParamsIncidentActionItemStatusesCancelled ActionItemTriggerParamsIncidentActionItemStatuses = "cancelled"

	ActionItemTriggerParamsIncidentActionItemStatusesDone ActionItemTriggerParamsIncidentActionItemStatuses = "done"

	ActionItemTriggerParamsIncidentActionItemStatusesInProgress ActionItemTriggerParamsIncidentActionItemStatuses = "in_progress"

	ActionItemTriggerParamsIncidentActionItemStatusesOpen ActionItemTriggerParamsIncidentActionItemStatuses = "open"
)

// Defines values for ActionItemTriggerParamsIncidentCondition.
const (
	ActionItemTriggerParamsIncidentConditionALL ActionItemTriggerParamsIncidentCondition = "ALL"

	ActionItemTriggerParamsIncidentConditionANY ActionItemTriggerParamsIncidentCondition = "ANY"

	ActionItemTriggerParamsIncidentConditionNONE ActionItemTriggerParamsIncidentCondition = "NONE"
)

// Defines values for ActionItemTriggerParamsIncidentConditionEnvironment.
const (
	ActionItemTriggerParamsIncidentConditionEnvironmentANY ActionItemTriggerParamsIncidentConditionEnvironment = "ANY"

	ActionItemTriggerParamsIncidentConditionEnvironmentIS ActionItemTriggerParamsIncidentConditionEnvironment = "IS"

	ActionItemTriggerParamsIncidentConditionEnvironmentNONE ActionItemTriggerParamsIncidentConditionEnvironment = "NONE"

	ActionItemTriggerParamsIncidentConditionEnvironmentSET ActionItemTriggerParamsIncidentConditionEnvironment = "SET"

	ActionItemTriggerParamsIncidentConditionEnvironmentUNSET ActionItemTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionFunctionality.
const (
	ActionItemTriggerParamsIncidentConditionFunctionalityANY ActionItemTriggerParamsIncidentConditionFunctionality = "ANY"

	ActionItemTriggerParamsIncidentConditionFunctionalityIS ActionItemTriggerParamsIncidentConditionFunctionality = "IS"

	ActionItemTriggerParamsIncidentConditionFunctionalityNONE ActionItemTriggerParamsIncidentConditionFunctionality = "NONE"

	ActionItemTriggerParamsIncidentConditionFunctionalitySET ActionItemTriggerParamsIncidentConditionFunctionality = "SET"

	ActionItemTriggerParamsIncidentConditionFunctionalityUNSET ActionItemTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionGroup.
const (
	ActionItemTriggerParamsIncidentConditionGroupANY ActionItemTriggerParamsIncidentConditionGroup = "ANY"

	ActionItemTriggerParamsIncidentConditionGroupIS ActionItemTriggerParamsIncidentConditionGroup = "IS"

	ActionItemTriggerParamsIncidentConditionGroupNONE ActionItemTriggerParamsIncidentConditionGroup = "NONE"

	ActionItemTriggerParamsIncidentConditionGroupSET ActionItemTriggerParamsIncidentConditionGroup = "SET"

	ActionItemTriggerParamsIncidentConditionGroupUNSET ActionItemTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionIncidentType.
const (
	ActionItemTriggerParamsIncidentConditionIncidentTypeANY ActionItemTriggerParamsIncidentConditionIncidentType = "ANY"

	ActionItemTriggerParamsIncidentConditionIncidentTypeIS ActionItemTriggerParamsIncidentConditionIncidentType = "IS"

	ActionItemTriggerParamsIncidentConditionIncidentTypeNONE ActionItemTriggerParamsIncidentConditionIncidentType = "NONE"

	ActionItemTriggerParamsIncidentConditionIncidentTypeSET ActionItemTriggerParamsIncidentConditionIncidentType = "SET"

	ActionItemTriggerParamsIncidentConditionIncidentTypeUNSET ActionItemTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionKind.
const (
	ActionItemTriggerParamsIncidentConditionKindANY ActionItemTriggerParamsIncidentConditionKind = "ANY"

	ActionItemTriggerParamsIncidentConditionKindIS ActionItemTriggerParamsIncidentConditionKind = "IS"

	ActionItemTriggerParamsIncidentConditionKindNONE ActionItemTriggerParamsIncidentConditionKind = "NONE"

	ActionItemTriggerParamsIncidentConditionKindSET ActionItemTriggerParamsIncidentConditionKind = "SET"

	ActionItemTriggerParamsIncidentConditionKindUNSET ActionItemTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionService.
const (
	ActionItemTriggerParamsIncidentConditionServiceANY ActionItemTriggerParamsIncidentConditionService = "ANY"

	ActionItemTriggerParamsIncidentConditionServiceIS ActionItemTriggerParamsIncidentConditionService = "IS"

	ActionItemTriggerParamsIncidentConditionServiceNONE ActionItemTriggerParamsIncidentConditionService = "NONE"

	ActionItemTriggerParamsIncidentConditionServiceSET ActionItemTriggerParamsIncidentConditionService = "SET"

	ActionItemTriggerParamsIncidentConditionServiceUNSET ActionItemTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionSeverity.
const (
	ActionItemTriggerParamsIncidentConditionSeverityANY ActionItemTriggerParamsIncidentConditionSeverity = "ANY"

	ActionItemTriggerParamsIncidentConditionSeverityIS ActionItemTriggerParamsIncidentConditionSeverity = "IS"

	ActionItemTriggerParamsIncidentConditionSeverityNONE ActionItemTriggerParamsIncidentConditionSeverity = "NONE"

	ActionItemTriggerParamsIncidentConditionSeveritySET ActionItemTriggerParamsIncidentConditionSeverity = "SET"

	ActionItemTriggerParamsIncidentConditionSeverityUNSET ActionItemTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionStatus.
const (
	ActionItemTriggerParamsIncidentConditionStatusANY ActionItemTriggerParamsIncidentConditionStatus = "ANY"

	ActionItemTriggerParamsIncidentConditionStatusIS ActionItemTriggerParamsIncidentConditionStatus = "IS"

	ActionItemTriggerParamsIncidentConditionStatusNONE ActionItemTriggerParamsIncidentConditionStatus = "NONE"

	ActionItemTriggerParamsIncidentConditionStatusSET ActionItemTriggerParamsIncidentConditionStatus = "SET"

	ActionItemTriggerParamsIncidentConditionStatusUNSET ActionItemTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentConditionVisibility.
const (
	ActionItemTriggerParamsIncidentConditionVisibilityANY ActionItemTriggerParamsIncidentConditionVisibility = "ANY"

	ActionItemTriggerParamsIncidentConditionVisibilityIS ActionItemTriggerParamsIncidentConditionVisibility = "IS"

	ActionItemTriggerParamsIncidentConditionVisibilityNONE ActionItemTriggerParamsIncidentConditionVisibility = "NONE"

	ActionItemTriggerParamsIncidentConditionVisibilitySET ActionItemTriggerParamsIncidentConditionVisibility = "SET"

	ActionItemTriggerParamsIncidentConditionVisibilityUNSET ActionItemTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for ActionItemTriggerParamsIncidentKinds.
const (
	ActionItemTriggerParamsIncidentKindsExample ActionItemTriggerParamsIncidentKinds = "example"

	ActionItemTriggerParamsIncidentKindsNormal ActionItemTriggerParamsIncidentKinds = "normal"

	ActionItemTriggerParamsIncidentKindsScheduled ActionItemTriggerParamsIncidentKinds = "scheduled"

	ActionItemTriggerParamsIncidentKindsTest ActionItemTriggerParamsIncidentKinds = "test"
)

// Defines values for ActionItemTriggerParamsIncidentStatuses.
const (
	ActionItemTriggerParamsIncidentStatusesAcknowledged ActionItemTriggerParamsIncidentStatuses = "acknowledged"

	ActionItemTriggerParamsIncidentStatusesCancelled ActionItemTriggerParamsIncidentStatuses = "cancelled"

	ActionItemTriggerParamsIncidentStatusesCompleted ActionItemTriggerParamsIncidentStatuses = "completed"

	ActionItemTriggerParamsIncidentStatusesDetected ActionItemTriggerParamsIncidentStatuses = "detected"

	ActionItemTriggerParamsIncidentStatusesInProgress ActionItemTriggerParamsIncidentStatuses = "in_progress"

	ActionItemTriggerParamsIncidentStatusesMitigated ActionItemTriggerParamsIncidentStatuses = "mitigated"

	ActionItemTriggerParamsIncidentStatusesResolved ActionItemTriggerParamsIncidentStatuses = "resolved"

	ActionItemTriggerParamsIncidentStatusesScheduled ActionItemTriggerParamsIncidentStatuses = "scheduled"

	ActionItemTriggerParamsIncidentStatusesStarted ActionItemTriggerParamsIncidentStatuses = "started"
)

// Defines values for ActionItemTriggerParamsTriggerType.
const (
	ActionItemTriggerParamsTriggerTypeActionItem ActionItemTriggerParamsTriggerType = "action_item"
)

// Defines values for ActionItemTriggerParamsTriggers.
const (
	ActionItemTriggerParamsTriggersActionItemCreated ActionItemTriggerParamsTriggers = "action_item_created"

	ActionItemTriggerParamsTriggersActionItemUpdated ActionItemTriggerParamsTriggers = "action_item_updated"

	ActionItemTriggerParamsTriggersAssignedUserUpdated ActionItemTriggerParamsTriggers = "assigned_user_updated"

	ActionItemTriggerParamsTriggersDescriptionUpdated ActionItemTriggerParamsTriggers = "description_updated"

	ActionItemTriggerParamsTriggersPriorityUpdated ActionItemTriggerParamsTriggers = "priority_updated"

	ActionItemTriggerParamsTriggersSlackCommand ActionItemTriggerParamsTriggers = "slack_command"

	ActionItemTriggerParamsTriggersStatusUpdated ActionItemTriggerParamsTriggers = "status_updated"

	ActionItemTriggerParamsTriggersSummaryUpdated ActionItemTriggerParamsTriggers = "summary_updated"

	ActionItemTriggerParamsTriggersTeamsUpdated ActionItemTriggerParamsTriggers = "teams_updated"
)

// Defines values for AddActionItemTaskParamsPriority.
const (
	AddActionItemTaskParamsPriorityHigh AddActionItemTaskParamsPriority = "high"

	AddActionItemTaskParamsPriorityLow AddActionItemTaskParamsPriority = "low"

	AddActionItemTaskParamsPriorityMedium AddActionItemTaskParamsPriority = "medium"
)

// Defines values for AddActionItemTaskParamsStatus.
const (
	AddActionItemTaskParamsStatusCancelled AddActionItemTaskParamsStatus = "cancelled"

	AddActionItemTaskParamsStatusDone AddActionItemTaskParamsStatus = "done"

	AddActionItemTaskParamsStatusInProgress AddActionItemTaskParamsStatus = "in_progress"

	AddActionItemTaskParamsStatusOpen AddActionItemTaskParamsStatus = "open"
)

// Defines values for AddActionItemTaskParamsTaskType.
const (
	AddActionItemTaskParamsTaskTypeAddActionItem AddActionItemTaskParamsTaskType = "add_action_item"
)

// Defines values for AddRoleTaskParamsTaskType.
const (
	AddRoleTaskParamsTaskTypeAddRole AddRoleTaskParamsTaskType = "add_role"
)

// Defines values for AddTeamTaskParamsTaskType.
const (
	AddTeamTaskParamsTaskTypeAddTeam AddTeamTaskParamsTaskType = "add_team"
)

// Defines values for AddToTimelineTaskParamsTaskType.
const (
	AddToTimelineTaskParamsTaskTypeAddToTimeline AddToTimelineTaskParamsTaskType = "add_to_timeline"
)

// Defines values for AlertSource.
const (
	AlertSourceAsana AlertSource = "asana"

	AlertSourceDatadog AlertSource = "datadog"

	AlertSourceJira AlertSource = "jira"

	AlertSourceNobl9 AlertSource = "nobl9"

	AlertSourceOpsgenie AlertSource = "opsgenie"

	AlertSourcePagerduty AlertSource = "pagerduty"

	AlertSourceVictorops AlertSource = "victorops"

	AlertSourceZendesk AlertSource = "zendesk"
)

// Defines values for AlertListDataSource.
const (
	AlertListDataSourceAsana AlertListDataSource = "asana"

	AlertListDataSourceDatadog AlertListDataSource = "datadog"

	AlertListDataSourceJira AlertListDataSource = "jira"

	AlertListDataSourceNobl9 AlertListDataSource = "nobl9"

	AlertListDataSourceOpsgenie AlertListDataSource = "opsgenie"

	AlertListDataSourcePagerduty AlertListDataSource = "pagerduty"

	AlertListDataSourceVictorops AlertListDataSource = "victorops"

	AlertListDataSourceZendesk AlertListDataSource = "zendesk"
)

// Defines values for AlertListDataType.
const (
	AlertListDataTypeAlerts AlertListDataType = "alerts"
)

// Defines values for AlertResponseDataSource.
const (
	AlertResponseDataSourceAsana AlertResponseDataSource = "asana"

	AlertResponseDataSourceDatadog AlertResponseDataSource = "datadog"

	AlertResponseDataSourceJira AlertResponseDataSource = "jira"

	AlertResponseDataSourceNobl9 AlertResponseDataSource = "nobl9"

	AlertResponseDataSourceOpsgenie AlertResponseDataSource = "opsgenie"

	AlertResponseDataSourcePagerduty AlertResponseDataSource = "pagerduty"

	AlertResponseDataSourceVictorops AlertResponseDataSource = "victorops"

	AlertResponseDataSourceZendesk AlertResponseDataSource = "zendesk"
)

// Defines values for AlertResponseDataType.
const (
	AlertResponseDataTypeAlerts AlertResponseDataType = "alerts"
)

// Defines values for AlertTriggerParamsAlertCondition.
const (
	AlertTriggerParamsAlertConditionALL AlertTriggerParamsAlertCondition = "ALL"

	AlertTriggerParamsAlertConditionANY AlertTriggerParamsAlertCondition = "ANY"

	AlertTriggerParamsAlertConditionNONE AlertTriggerParamsAlertCondition = "NONE"
)

// Defines values for AlertTriggerParamsAlertConditionLabel.
const (
	AlertTriggerParamsAlertConditionLabelANY AlertTriggerParamsAlertConditionLabel = "ANY"

	AlertTriggerParamsAlertConditionLabelIS AlertTriggerParamsAlertConditionLabel = "IS"

	AlertTriggerParamsAlertConditionLabelNONE AlertTriggerParamsAlertConditionLabel = "NONE"

	AlertTriggerParamsAlertConditionLabelSET AlertTriggerParamsAlertConditionLabel = "SET"

	AlertTriggerParamsAlertConditionLabelUNSET AlertTriggerParamsAlertConditionLabel = "UNSET"
)

// Defines values for AlertTriggerParamsAlertConditionSource.
const (
	AlertTriggerParamsAlertConditionSourceANY AlertTriggerParamsAlertConditionSource = "ANY"

	AlertTriggerParamsAlertConditionSourceIS AlertTriggerParamsAlertConditionSource = "IS"

	AlertTriggerParamsAlertConditionSourceNONE AlertTriggerParamsAlertConditionSource = "NONE"

	AlertTriggerParamsAlertConditionSourceSET AlertTriggerParamsAlertConditionSource = "SET"

	AlertTriggerParamsAlertConditionSourceUNSET AlertTriggerParamsAlertConditionSource = "UNSET"
)

// Defines values for AlertTriggerParamsTriggerType.
const (
	AlertTriggerParamsTriggerTypeAlert AlertTriggerParamsTriggerType = "alert"
)

// Defines values for AlertTriggerParamsTriggers.
const (
	AlertTriggerParamsTriggersAlertCreated AlertTriggerParamsTriggers = "alert_created"
)

// Defines values for ArchiveSlackChannelsTaskParamsTaskType.
const (
	ArchiveSlackChannelsTaskParamsTaskTypeArchiveSlackChannels ArchiveSlackChannelsTaskParamsTaskType = "archive_slack_channels"
)

// Defines values for AttachDatadogDashboardsTaskParamsTaskType.
const (
	AttachDatadogDashboardsTaskParamsTaskTypeAttachDatadogDashboards AttachDatadogDashboardsTaskParamsTaskType = "attach_datadog_dashboards"
)

// Defines values for AutoAssignRoleOpsgenieTaskParamsTaskType.
const (
	AutoAssignRoleOpsgenieTaskParamsTaskTypeAutoAssignRoleOpsgenie AutoAssignRoleOpsgenieTaskParamsTaskType = "auto_assign_role_opsgenie"
)

// Defines values for AutoAssignRoleVictorOpsTaskParamsTaskType.
const (
	AutoAssignRoleVictorOpsTaskParamsTaskTypeAutoAssignRoleVictorOps AutoAssignRoleVictorOpsTaskParamsTaskType = "auto_assign_role_victor_ops"
)

// Defines values for CallPeopleTaskParamsTaskType.
const (
	CallPeopleTaskParamsTaskTypeCallPeople CallPeopleTaskParamsTaskType = "call_people"
)

// Defines values for CancelIncidentDataType.
const (
	CancelIncidentDataTypeIncidents CancelIncidentDataType = "incidents"
)

// Defines values for CauseListDataType.
const (
	CauseListDataTypeCauses CauseListDataType = "causes"
)

// Defines values for CauseResponseDataType.
const (
	CauseResponseDataTypeCauses CauseResponseDataType = "causes"
)

// Defines values for CreateAirtableTableRecordTaskParamsTaskType.
const (
	CreateAirtableTableRecordTaskParamsTaskTypeCreateAirtableTableRecord CreateAirtableTableRecordTaskParamsTaskType = "create_airtable_table_record"
)

// Defines values for CreateAsanaSubtaskTaskParamsTaskType.
const (
	CreateAsanaSubtaskTaskParamsTaskTypeCreateAsanaSubtask CreateAsanaSubtaskTaskParamsTaskType = "create_asana_subtask"
)

// Defines values for CreateAsanaTaskTaskParamsTaskType.
const (
	CreateAsanaTaskTaskParamsTaskTypeCreateAsanaTask CreateAsanaTaskTaskParamsTaskType = "create_asana_task"
)

// Defines values for CreateConfluencePageTaskParamsTaskType.
const (
	CreateConfluencePageTaskParamsTaskTypeCreateConfluencePage CreateConfluencePageTaskParamsTaskType = "create_confluence_page"
)

// Defines values for CreateDatadogNotebookTaskParamsKind.
const (
	CreateDatadogNotebookTaskParamsKindDocumentation CreateDatadogNotebookTaskParamsKind = "documentation"

	CreateDatadogNotebookTaskParamsKindInvestigation CreateDatadogNotebookTaskParamsKind = "investigation"

	CreateDatadogNotebookTaskParamsKindPostmortem CreateDatadogNotebookTaskParamsKind = "postmortem"

	CreateDatadogNotebookTaskParamsKindReport CreateDatadogNotebookTaskParamsKind = "report"

	CreateDatadogNotebookTaskParamsKindRunbook CreateDatadogNotebookTaskParamsKind = "runbook"
)

// Defines values for CreateDatadogNotebookTaskParamsTaskType.
const (
	CreateDatadogNotebookTaskParamsTaskTypeCreateDatadogNotebook CreateDatadogNotebookTaskParamsTaskType = "create_datadog_notebook"
)

// Defines values for CreateDropboxPaperPageTaskParamsTaskType.
const (
	CreateDropboxPaperPageTaskParamsTaskTypeCreateDropboxPaperPage CreateDropboxPaperPageTaskParamsTaskType = "create_dropbox_paper_page"
)

// Defines values for CreateGithubIssueTaskParamsTaskType.
const (
	CreateGithubIssueTaskParamsTaskTypeCreateGithubIssue CreateGithubIssueTaskParamsTaskType = "create_github_issue"
)

// Defines values for CreateGoogleCalendarEventTaskParamsTaskType.
const (
	CreateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent CreateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for CreateGoogleDocsPageTaskParamsTaskType.
const (
	CreateGoogleDocsPageTaskParamsTaskTypeCreateGoogleDocsPage CreateGoogleDocsPageTaskParamsTaskType = "create_google_docs_page"
)

// Defines values for CreateGoogleMeetingTaskParamsTaskType.
const (
	CreateGoogleMeetingTaskParamsTaskTypeCreateGoogleMeeting CreateGoogleMeetingTaskParamsTaskType = "create_google_meeting"
)

// Defines values for CreateIncidentTaskParamsTaskType.
const (
	CreateIncidentTaskParamsTaskTypeCreateIncident CreateIncidentTaskParamsTaskType = "create_incident"
)

// Defines values for CreateJiraIssueTaskParamsTaskType.
const (
	CreateJiraIssueTaskParamsTaskTypeCreateJiraIssue CreateJiraIssueTaskParamsTaskType = "create_jira_issue"
)

// Defines values for CreateJiraSubtaskTaskParamsTaskType.
const (
	CreateJiraSubtaskTaskParamsTaskTypeCreateJiraSubtask CreateJiraSubtaskTaskParamsTaskType = "create_jira_subtask"
)

// Defines values for CreateLinearIssueTaskParamsTaskType.
const (
	CreateLinearIssueTaskParamsTaskTypeCreateLinearIssue CreateLinearIssueTaskParamsTaskType = "create_linear_issue"
)

// Defines values for CreateLinearSubtaskIssueTaskParamsTaskType.
const (
	CreateLinearSubtaskIssueTaskParamsTaskTypeCreateLinearSubtaskIssue CreateLinearSubtaskIssueTaskParamsTaskType = "create_linear_subtask_issue"
)

// Defines values for CreateMicrosoftTeamsMeetingTaskParamsTaskType.
const (
	CreateMicrosoftTeamsMeetingTaskParamsTaskTypeCreateMicrosoftTeamsMeeting CreateMicrosoftTeamsMeetingTaskParamsTaskType = "create_microsoft_teams_meeting"
)

// Defines values for CreateNotionPageTaskParamsTaskType.
const (
	CreateNotionPageTaskParamsTaskTypeCreateNotionPage CreateNotionPageTaskParamsTaskType = "create_notion_page"
)

// Defines values for CreateServiceNowIncidentTaskParamsTaskType.
const (
	CreateServiceNowIncidentTaskParamsTaskTypeCreateServiceNowIncident CreateServiceNowIncidentTaskParamsTaskType = "create_service_now_incident"
)

// Defines values for CreateShortcutStoryTaskParamsKind.
const (
	CreateShortcutStoryTaskParamsKindBug CreateShortcutStoryTaskParamsKind = "bug"

	CreateShortcutStoryTaskParamsKindChore CreateShortcutStoryTaskParamsKind = "chore"

	CreateShortcutStoryTaskParamsKindFeature CreateShortcutStoryTaskParamsKind = "feature"
)

// Defines values for CreateShortcutStoryTaskParamsTaskType.
const (
	CreateShortcutStoryTaskParamsTaskTypeCreateShortcutStory CreateShortcutStoryTaskParamsTaskType = "create_shortcut_story"
)

// Defines values for CreateShortcutTaskTaskParamsTaskType.
const (
	CreateShortcutTaskTaskParamsTaskTypeCreateShortcutTask CreateShortcutTaskTaskParamsTaskType = "create_shortcut_task"
)

// Defines values for CreateTrelloCardTaskParamsTaskType.
const (
	CreateTrelloCardTaskParamsTaskTypeCreateTrelloCard CreateTrelloCardTaskParamsTaskType = "create_trello_card"
)

// Defines values for CreateWebexMeetingTaskParamsTaskType.
const (
	CreateWebexMeetingTaskParamsTaskTypeCreateWebexMeeting CreateWebexMeetingTaskParamsTaskType = "create_webex_meeting"
)

// Defines values for CreateZendeskTicketTaskParamsKind.
const (
	CreateZendeskTicketTaskParamsKindIncident CreateZendeskTicketTaskParamsKind = "incident"

	CreateZendeskTicketTaskParamsKindProblem CreateZendeskTicketTaskParamsKind = "problem"

	CreateZendeskTicketTaskParamsKindQuestion CreateZendeskTicketTaskParamsKind = "question"

	CreateZendeskTicketTaskParamsKindTask CreateZendeskTicketTaskParamsKind = "task"
)

// Defines values for CreateZendeskTicketTaskParamsTaskType.
const (
	CreateZendeskTicketTaskParamsTaskTypeCreateZendeskTicket CreateZendeskTicketTaskParamsTaskType = "create_zendesk_ticket"
)

// Defines values for CreateZoomMeetingTaskParamsAutoRecording.
const (
	CreateZoomMeetingTaskParamsAutoRecordingCloud CreateZoomMeetingTaskParamsAutoRecording = "cloud"

	CreateZoomMeetingTaskParamsAutoRecordingLocal CreateZoomMeetingTaskParamsAutoRecording = "local"

	CreateZoomMeetingTaskParamsAutoRecordingNone CreateZoomMeetingTaskParamsAutoRecording = "none"
)

// Defines values for CreateZoomMeetingTaskParamsTaskType.
const (
	CreateZoomMeetingTaskParamsTaskTypeCreateZoomMeeting CreateZoomMeetingTaskParamsTaskType = "create_zoom_meeting"
)

// Defines values for CustomFieldRequired.
const (
	CustomFieldRequiredIncidentForm CustomFieldRequired = "incident_form"

	CustomFieldRequiredIncidentMitigationForm CustomFieldRequired = "incident_mitigation_form"

	CustomFieldRequiredIncidentMitigationSlackForm CustomFieldRequired = "incident_mitigation_slack_form"

	CustomFieldRequiredIncidentPostMortemForm CustomFieldRequired = "incident_post_mortem_form"

	CustomFieldRequiredIncidentResolutionForm CustomFieldRequired = "incident_resolution_form"

	CustomFieldRequiredIncidentResolutionSlackForm CustomFieldRequired = "incident_resolution_slack_form"

	CustomFieldRequiredIncidentSlackForm CustomFieldRequired = "incident_slack_form"
)

// Defines values for CustomFieldShown.
const (
	CustomFieldShownIncidentForm CustomFieldShown = "incident_form"

	CustomFieldShownIncidentMitigationForm CustomFieldShown = "incident_mitigation_form"

	CustomFieldShownIncidentMitigationSlackForm CustomFieldShown = "incident_mitigation_slack_form"

	CustomFieldShownIncidentPostMortem CustomFieldShown = "incident_post_mortem"

	CustomFieldShownIncidentPostMortemForm CustomFieldShown = "incident_post_mortem_form"

	CustomFieldShownIncidentResolutionForm CustomFieldShown = "incident_resolution_form"

	CustomFieldShownIncidentResolutionSlackForm CustomFieldShown = "incident_resolution_slack_form"

	CustomFieldShownIncidentSlackForm CustomFieldShown = "incident_slack_form"
)

// Defines values for CustomFieldListDataType.
const (
	CustomFieldListDataTypeCustomFields CustomFieldListDataType = "custom_fields"
)

// Defines values for CustomFieldOptionListDataType.
const (
	CustomFieldOptionListDataTypeCustomFieldOptions CustomFieldOptionListDataType = "custom_field_options"
)

// Defines values for CustomFieldOptionResponseDataType.
const (
	CustomFieldOptionResponseDataTypeCustomFieldOptions CustomFieldOptionResponseDataType = "custom_field_options"
)

// Defines values for CustomFieldResponseDataType.
const (
	CustomFieldResponseDataTypeCustomFields CustomFieldResponseDataType = "custom_fields"
)

// Defines values for EnvironmentListDataType.
const (
	EnvironmentListDataTypeEnvironments EnvironmentListDataType = "environments"
)

// Defines values for EnvironmentResponseDataType.
const (
	EnvironmentResponseDataTypeEnvironments EnvironmentResponseDataType = "environments"
)

// Defines values for FunctionalityListDataType.
const (
	FunctionalityListDataTypeFunctionalities FunctionalityListDataType = "functionalities"
)

// Defines values for FunctionalityResponseDataType.
const (
	FunctionalityResponseDataTypeFunctionalities FunctionalityResponseDataType = "functionalities"
)

// Defines values for GetPulsesTaskParamsTaskType.
const (
	GetPulsesTaskParamsTaskTypeGetPulses GetPulsesTaskParamsTaskType = "get_pulses"
)

// Defines values for HttpClientTaskParamsMethod.
const (
	HttpClientTaskParamsMethodDELETE HttpClientTaskParamsMethod = "DELETE"

	HttpClientTaskParamsMethodGET HttpClientTaskParamsMethod = "GET"

	HttpClientTaskParamsMethodOPTIONS HttpClientTaskParamsMethod = "OPTIONS"

	HttpClientTaskParamsMethodPOST HttpClientTaskParamsMethod = "POST"

	HttpClientTaskParamsMethodPUT HttpClientTaskParamsMethod = "PUT"
)

// Defines values for HttpClientTaskParamsTaskType.
const (
	HttpClientTaskParamsTaskTypeHttpClient HttpClientTaskParamsTaskType = "http_client"
)

// Defines values for IncidentActionItemKind.
const (
	IncidentActionItemKindFollowUp IncidentActionItemKind = "follow_up"

	IncidentActionItemKindTask IncidentActionItemKind = "task"
)

// Defines values for IncidentActionItemPriority.
const (
	IncidentActionItemPriorityHigh IncidentActionItemPriority = "high"

	IncidentActionItemPriorityLow IncidentActionItemPriority = "low"

	IncidentActionItemPriorityMedium IncidentActionItemPriority = "medium"
)

// Defines values for IncidentActionItemStatus.
const (
	IncidentActionItemStatusCancelled IncidentActionItemStatus = "cancelled"

	IncidentActionItemStatusDone IncidentActionItemStatus = "done"

	IncidentActionItemStatusInProgress IncidentActionItemStatus = "in_progress"

	IncidentActionItemStatusOpen IncidentActionItemStatus = "open"
)

// Defines values for IncidentActionItemListDataType.
const (
	IncidentActionItemListDataTypeIncidentActionItems IncidentActionItemListDataType = "incident_action_items"
)

// Defines values for IncidentActionItemResponseDataType.
const (
	IncidentActionItemResponseDataTypeIncidentActionItems IncidentActionItemResponseDataType = "incident_action_items"
)

// Defines values for IncidentCustomFieldSelectionListDataType.
const (
	IncidentCustomFieldSelectionListDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionListDataType = "incident_custom_field_selections"
)

// Defines values for IncidentCustomFieldSelectionResponseDataType.
const (
	IncidentCustomFieldSelectionResponseDataTypeIncidentCustomFieldSelections IncidentCustomFieldSelectionResponseDataType = "incident_custom_field_selections"
)

// Defines values for IncidentEventVisibility.
const (
	IncidentEventVisibilityExternal IncidentEventVisibility = "external"

	IncidentEventVisibilityInternal IncidentEventVisibility = "internal"
)

// Defines values for IncidentEventListDataType.
const (
	IncidentEventListDataTypeIncidentEvents IncidentEventListDataType = "incident_events"
)

// Defines values for IncidentEventResponseDataType.
const (
	IncidentEventResponseDataTypeIncidentEvents IncidentEventResponseDataType = "incident_events"
)

// Defines values for IncidentFeedbackRating.
const (
	IncidentFeedbackRatingN0 IncidentFeedbackRating = 0

	IncidentFeedbackRatingN1 IncidentFeedbackRating = 1

	IncidentFeedbackRatingN2 IncidentFeedbackRating = 2

	IncidentFeedbackRatingN3 IncidentFeedbackRating = 3

	IncidentFeedbackRatingN4 IncidentFeedbackRating = 4
)

// Defines values for IncidentFeedbackListDataType.
const (
	IncidentFeedbackListDataTypeIncidentFeedbacks IncidentFeedbackListDataType = "incident_feedbacks"
)

// Defines values for IncidentFeedbackResponseDataType.
const (
	IncidentFeedbackResponseDataTypeIncidentFeedbacks IncidentFeedbackResponseDataType = "incident_feedbacks"
)

// Defines values for IncidentListDataType.
const (
	IncidentListDataTypeIncidents IncidentListDataType = "incidents"
)

// Defines values for IncidentPostMortemStatus.
const (
	IncidentPostMortemStatusDraft IncidentPostMortemStatus = "draft"

	IncidentPostMortemStatusPublished IncidentPostMortemStatus = "published"
)

// Defines values for IncidentPostMortemListDataType.
const (
	IncidentPostMortemListDataTypeIncidentPostMortems IncidentPostMortemListDataType = "incident_post_mortems"
)

// Defines values for IncidentPostMortemResponseDataType.
const (
	IncidentPostMortemResponseDataTypeIncidentPostMortems IncidentPostMortemResponseDataType = "incident_post_mortems"
)

// Defines values for IncidentResponseDataType.
const (
	IncidentResponseDataTypeIncidents IncidentResponseDataType = "incidents"
)

// Defines values for IncidentRoleListDataType.
const (
	IncidentRoleListDataTypeIncidentRoles IncidentRoleListDataType = "incident_roles"
)

// Defines values for IncidentRoleResponseDataType.
const (
	IncidentRoleResponseDataTypeIncidentRoles IncidentRoleResponseDataType = "incident_roles"
)

// Defines values for IncidentRoleTaskPriority.
const (
	IncidentRoleTaskPriorityHigh IncidentRoleTaskPriority = "high"

	IncidentRoleTaskPriorityLow IncidentRoleTaskPriority = "low"

	IncidentRoleTaskPriorityMedium IncidentRoleTaskPriority = "medium"
)

// Defines values for IncidentRoleTaskListDataType.
const (
	IncidentRoleTaskListDataTypeIncidentRoleTasks IncidentRoleTaskListDataType = "incident_role_tasks"
)

// Defines values for IncidentRoleTaskResponseDataType.
const (
	IncidentRoleTaskResponseDataTypeIncidentRoleTasks IncidentRoleTaskResponseDataType = "incident_role_tasks"
)

// Defines values for IncidentStatusPageEventStatus.
const (
	IncidentStatusPageEventStatusCompleted IncidentStatusPageEventStatus = "completed"

	IncidentStatusPageEventStatusIdentified IncidentStatusPageEventStatus = "identified"

	IncidentStatusPageEventStatusInProgress IncidentStatusPageEventStatus = "in_progress"

	IncidentStatusPageEventStatusInvestigating IncidentStatusPageEventStatus = "investigating"

	IncidentStatusPageEventStatusMonitoring IncidentStatusPageEventStatus = "monitoring"

	IncidentStatusPageEventStatusResolved IncidentStatusPageEventStatus = "resolved"

	IncidentStatusPageEventStatusScheduled IncidentStatusPageEventStatus = "scheduled"

	IncidentStatusPageEventStatusVerifying IncidentStatusPageEventStatus = "verifying"
)

// Defines values for IncidentStatusPageEventListDataType.
const (
	IncidentStatusPageEventListDataTypeIncidentStatusPageEvents IncidentStatusPageEventListDataType = "incident_status_page_events"
)

// Defines values for IncidentStatusPageEventResponseDataType.
const (
	IncidentStatusPageEventResponseDataTypeIncidentStatusPageEvents IncidentStatusPageEventResponseDataType = "incident_status_page_events"
)

// Defines values for IncidentTriggerParamsIncidentCondition.
const (
	IncidentTriggerParamsIncidentConditionALL IncidentTriggerParamsIncidentCondition = "ALL"

	IncidentTriggerParamsIncidentConditionANY IncidentTriggerParamsIncidentCondition = "ANY"

	IncidentTriggerParamsIncidentConditionNONE IncidentTriggerParamsIncidentCondition = "NONE"
)

// Defines values for IncidentTriggerParamsIncidentConditionEnvironment.
const (
	IncidentTriggerParamsIncidentConditionEnvironmentANY IncidentTriggerParamsIncidentConditionEnvironment = "ANY"

	IncidentTriggerParamsIncidentConditionEnvironmentIS IncidentTriggerParamsIncidentConditionEnvironment = "IS"

	IncidentTriggerParamsIncidentConditionEnvironmentNONE IncidentTriggerParamsIncidentConditionEnvironment = "NONE"

	IncidentTriggerParamsIncidentConditionEnvironmentSET IncidentTriggerParamsIncidentConditionEnvironment = "SET"

	IncidentTriggerParamsIncidentConditionEnvironmentUNSET IncidentTriggerParamsIncidentConditionEnvironment = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionFunctionality.
const (
	IncidentTriggerParamsIncidentConditionFunctionalityANY IncidentTriggerParamsIncidentConditionFunctionality = "ANY"

	IncidentTriggerParamsIncidentConditionFunctionalityIS IncidentTriggerParamsIncidentConditionFunctionality = "IS"

	IncidentTriggerParamsIncidentConditionFunctionalityNONE IncidentTriggerParamsIncidentConditionFunctionality = "NONE"

	IncidentTriggerParamsIncidentConditionFunctionalitySET IncidentTriggerParamsIncidentConditionFunctionality = "SET"

	IncidentTriggerParamsIncidentConditionFunctionalityUNSET IncidentTriggerParamsIncidentConditionFunctionality = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionGroup.
const (
	IncidentTriggerParamsIncidentConditionGroupANY IncidentTriggerParamsIncidentConditionGroup = "ANY"

	IncidentTriggerParamsIncidentConditionGroupIS IncidentTriggerParamsIncidentConditionGroup = "IS"

	IncidentTriggerParamsIncidentConditionGroupNONE IncidentTriggerParamsIncidentConditionGroup = "NONE"

	IncidentTriggerParamsIncidentConditionGroupSET IncidentTriggerParamsIncidentConditionGroup = "SET"

	IncidentTriggerParamsIncidentConditionGroupUNSET IncidentTriggerParamsIncidentConditionGroup = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionIncidentType.
const (
	IncidentTriggerParamsIncidentConditionIncidentTypeANY IncidentTriggerParamsIncidentConditionIncidentType = "ANY"

	IncidentTriggerParamsIncidentConditionIncidentTypeIS IncidentTriggerParamsIncidentConditionIncidentType = "IS"

	IncidentTriggerParamsIncidentConditionIncidentTypeNONE IncidentTriggerParamsIncidentConditionIncidentType = "NONE"

	IncidentTriggerParamsIncidentConditionIncidentTypeSET IncidentTriggerParamsIncidentConditionIncidentType = "SET"

	IncidentTriggerParamsIncidentConditionIncidentTypeUNSET IncidentTriggerParamsIncidentConditionIncidentType = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionKind.
const (
	IncidentTriggerParamsIncidentConditionKindANY IncidentTriggerParamsIncidentConditionKind = "ANY"

	IncidentTriggerParamsIncidentConditionKindIS IncidentTriggerParamsIncidentConditionKind = "IS"

	IncidentTriggerParamsIncidentConditionKindNONE IncidentTriggerParamsIncidentConditionKind = "NONE"

	IncidentTriggerParamsIncidentConditionKindSET IncidentTriggerParamsIncidentConditionKind = "SET"

	IncidentTriggerParamsIncidentConditionKindUNSET IncidentTriggerParamsIncidentConditionKind = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionService.
const (
	IncidentTriggerParamsIncidentConditionServiceANY IncidentTriggerParamsIncidentConditionService = "ANY"

	IncidentTriggerParamsIncidentConditionServiceIS IncidentTriggerParamsIncidentConditionService = "IS"

	IncidentTriggerParamsIncidentConditionServiceNONE IncidentTriggerParamsIncidentConditionService = "NONE"

	IncidentTriggerParamsIncidentConditionServiceSET IncidentTriggerParamsIncidentConditionService = "SET"

	IncidentTriggerParamsIncidentConditionServiceUNSET IncidentTriggerParamsIncidentConditionService = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionSeverity.
const (
	IncidentTriggerParamsIncidentConditionSeverityANY IncidentTriggerParamsIncidentConditionSeverity = "ANY"

	IncidentTriggerParamsIncidentConditionSeverityIS IncidentTriggerParamsIncidentConditionSeverity = "IS"

	IncidentTriggerParamsIncidentConditionSeverityNONE IncidentTriggerParamsIncidentConditionSeverity = "NONE"

	IncidentTriggerParamsIncidentConditionSeveritySET IncidentTriggerParamsIncidentConditionSeverity = "SET"

	IncidentTriggerParamsIncidentConditionSeverityUNSET IncidentTriggerParamsIncidentConditionSeverity = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionStatus.
const (
	IncidentTriggerParamsIncidentConditionStatusANY IncidentTriggerParamsIncidentConditionStatus = "ANY"

	IncidentTriggerParamsIncidentConditionStatusIS IncidentTriggerParamsIncidentConditionStatus = "IS"

	IncidentTriggerParamsIncidentConditionStatusNONE IncidentTriggerParamsIncidentConditionStatus = "NONE"

	IncidentTriggerParamsIncidentConditionStatusSET IncidentTriggerParamsIncidentConditionStatus = "SET"

	IncidentTriggerParamsIncidentConditionStatusUNSET IncidentTriggerParamsIncidentConditionStatus = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentConditionVisibility.
const (
	IncidentTriggerParamsIncidentConditionVisibilityANY IncidentTriggerParamsIncidentConditionVisibility = "ANY"

	IncidentTriggerParamsIncidentConditionVisibilityIS IncidentTriggerParamsIncidentConditionVisibility = "IS"

	IncidentTriggerParamsIncidentConditionVisibilityNONE IncidentTriggerParamsIncidentConditionVisibility = "NONE"

	IncidentTriggerParamsIncidentConditionVisibilitySET IncidentTriggerParamsIncidentConditionVisibility = "SET"

	IncidentTriggerParamsIncidentConditionVisibilityUNSET IncidentTriggerParamsIncidentConditionVisibility = "UNSET"
)

// Defines values for IncidentTriggerParamsIncidentKinds.
const (
	IncidentTriggerParamsIncidentKindsExample IncidentTriggerParamsIncidentKinds = "example"

	IncidentTriggerParamsIncidentKindsNormal IncidentTriggerParamsIncidentKinds = "normal"

	IncidentTriggerParamsIncidentKindsScheduled IncidentTriggerParamsIncidentKinds = "scheduled"

	IncidentTriggerParamsIncidentKindsTest IncidentTriggerParamsIncidentKinds = "test"
)

// Defines values for IncidentTriggerParamsIncidentStatuses.
const (
	IncidentTriggerParamsIncidentStatusesAcknowledged IncidentTriggerParamsIncidentStatuses = "acknowledged"

	IncidentTriggerParamsIncidentStatusesCancelled IncidentTriggerParamsIncidentStatuses = "cancelled"

	IncidentTriggerParamsIncidentStatusesCompleted IncidentTriggerParamsIncidentStatuses = "completed"

	IncidentTriggerParamsIncidentStatusesDetected IncidentTriggerParamsIncidentStatuses = "detected"

	IncidentTriggerParamsIncidentStatusesInProgress IncidentTriggerParamsIncidentStatuses = "in_progress"

	IncidentTriggerParamsIncidentStatusesMitigated IncidentTriggerParamsIncidentStatuses = "mitigated"

	IncidentTriggerParamsIncidentStatusesResolved IncidentTriggerParamsIncidentStatuses = "resolved"

	IncidentTriggerParamsIncidentStatusesScheduled IncidentTriggerParamsIncidentStatuses = "scheduled"

	IncidentTriggerParamsIncidentStatusesStarted IncidentTriggerParamsIncidentStatuses = "started"
)

// Defines values for IncidentTriggerParamsTriggerType.
const (
	IncidentTriggerParamsTriggerTypeIncident IncidentTriggerParamsTriggerType = "incident"
)

// Defines values for IncidentTriggerParamsTriggers.
const (
	IncidentTriggerParamsTriggersEnvironmentsUpdated IncidentTriggerParamsTriggers = "environments_updated"

	IncidentTriggerParamsTriggersFunctionalitiesUpdated IncidentTriggerParamsTriggers = "functionalities_updated"

	IncidentTriggerParamsTriggersIncidentCreated IncidentTriggerParamsTriggers = "incident_created"

	IncidentTriggerParamsTriggersIncidentTypesUpdated IncidentTriggerParamsTriggers = "incident_types_updated"

	IncidentTriggerParamsTriggersIncidentUpdated IncidentTriggerParamsTriggers = "incident_updated"

	IncidentTriggerParamsTriggersRoleAssignmentsUpdated IncidentTriggerParamsTriggers = "role_assignments_updated"

	IncidentTriggerParamsTriggersServicesUpdated IncidentTriggerParamsTriggers = "services_updated"

	IncidentTriggerParamsTriggersSeverityUpdated IncidentTriggerParamsTriggers = "severity_updated"

	IncidentTriggerParamsTriggersSlackCommand IncidentTriggerParamsTriggers = "slack_command"

	IncidentTriggerParamsTriggersStatusUpdated IncidentTriggerParamsTriggers = "status_updated"

	IncidentTriggerParamsTriggersSummaryUpdated IncidentTriggerParamsTriggers = "summary_updated"

	IncidentTriggerParamsTriggersTeamsUpdated IncidentTriggerParamsTriggers = "teams_updated"

	IncidentTriggerParamsTriggersTimelineUpdated IncidentTriggerParamsTriggers = "timeline_updated"

	IncidentTriggerParamsTriggersTitleUpdated IncidentTriggerParamsTriggers = "title_updated"
)

// Defines values for IncidentTypeListDataType.
const (
	IncidentTypeListDataTypeIncidentTypes IncidentTypeListDataType = "incident_types"
)

// Defines values for IncidentTypeResponseDataType.
const (
	IncidentTypeResponseDataTypeIncidentTypes IncidentTypeResponseDataType = "incident_types"
)

// Defines values for InviteToSlackChannelOpsgenieTaskParamsTaskType.
const (
	InviteToSlackChannelOpsgenieTaskParamsTaskTypeInviteToSlackChannelOpsgenie InviteToSlackChannelOpsgenieTaskParamsTaskType = "invite_to_slack_channel_opsgenie"
)

// Defines values for InviteToSlackChannelVictorOpsTaskParamsTaskType.
const (
	InviteToSlackChannelVictorOpsTaskParamsTaskTypeInviteToSlackChannelVictorOps InviteToSlackChannelVictorOpsTaskParamsTaskType = "invite_to_slack_channel_victor_ops"
)

// Defines values for MitigateIncidentDataType.
const (
	MitigateIncidentDataTypeIncidents MitigateIncidentDataType = "incidents"
)

// Defines values for NewAlertDataAttributesSource.
const (
	NewAlertDataAttributesSourceAsana NewAlertDataAttributesSource = "asana"

	NewAlertDataAttributesSourceDatadog NewAlertDataAttributesSource = "datadog"

	NewAlertDataAttributesSourceJira NewAlertDataAttributesSource = "jira"

	NewAlertDataAttributesSourceNobl9 NewAlertDataAttributesSource = "nobl9"

	NewAlertDataAttributesSourceOpsgenie NewAlertDataAttributesSource = "opsgenie"

	NewAlertDataAttributesSourcePagerduty NewAlertDataAttributesSource = "pagerduty"

	NewAlertDataAttributesSourceVictorops NewAlertDataAttributesSource = "victorops"

	NewAlertDataAttributesSourceZendesk NewAlertDataAttributesSource = "zendesk"
)

// Defines values for NewAlertDataType.
const (
	NewAlertDataTypeAlerts NewAlertDataType = "alerts"
)

// Defines values for NewCauseDataType.
const (
	NewCauseDataTypeCauses NewCauseDataType = "causes"
)

// Defines values for NewCustomFieldDataAttributesRequired.
const (
	NewCustomFieldDataAttributesRequiredIncidentForm NewCustomFieldDataAttributesRequired = "incident_form"

	NewCustomFieldDataAttributesRequiredIncidentMitigationForm NewCustomFieldDataAttributesRequired = "incident_mitigation_form"

	NewCustomFieldDataAttributesRequiredIncidentMitigationSlackForm NewCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"

	NewCustomFieldDataAttributesRequiredIncidentPostMortemForm NewCustomFieldDataAttributesRequired = "incident_post_mortem_form"

	NewCustomFieldDataAttributesRequiredIncidentResolutionForm NewCustomFieldDataAttributesRequired = "incident_resolution_form"

	NewCustomFieldDataAttributesRequiredIncidentResolutionSlackForm NewCustomFieldDataAttributesRequired = "incident_resolution_slack_form"

	NewCustomFieldDataAttributesRequiredIncidentSlackForm NewCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for NewCustomFieldDataAttributesShown.
const (
	NewCustomFieldDataAttributesShownIncidentForm NewCustomFieldDataAttributesShown = "incident_form"

	NewCustomFieldDataAttributesShownIncidentMitigationForm NewCustomFieldDataAttributesShown = "incident_mitigation_form"

	NewCustomFieldDataAttributesShownIncidentMitigationSlackForm NewCustomFieldDataAttributesShown = "incident_mitigation_slack_form"

	NewCustomFieldDataAttributesShownIncidentPostMortem NewCustomFieldDataAttributesShown = "incident_post_mortem"

	NewCustomFieldDataAttributesShownIncidentPostMortemForm NewCustomFieldDataAttributesShown = "incident_post_mortem_form"

	NewCustomFieldDataAttributesShownIncidentResolutionForm NewCustomFieldDataAttributesShown = "incident_resolution_form"

	NewCustomFieldDataAttributesShownIncidentResolutionSlackForm NewCustomFieldDataAttributesShown = "incident_resolution_slack_form"

	NewCustomFieldDataAttributesShownIncidentSlackForm NewCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for NewCustomFieldDataType.
const (
	NewCustomFieldDataTypeCustomFields NewCustomFieldDataType = "custom_fields"
)

// Defines values for NewCustomFieldOptionDataType.
const (
	NewCustomFieldOptionDataTypeCustomFieldOptions NewCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for NewEnvironmentDataType.
const (
	NewEnvironmentDataTypeEnvironments NewEnvironmentDataType = "environments"
)

// Defines values for NewFunctionalityDataType.
const (
	NewFunctionalityDataTypeFunctionalities NewFunctionalityDataType = "functionalities"
)

// Defines values for NewIncidentDataAttributesKind.
const (
	NewIncidentDataAttributesKindExample NewIncidentDataAttributesKind = "example"

	NewIncidentDataAttributesKindNormal NewIncidentDataAttributesKind = "normal"

	NewIncidentDataAttributesKindScheduled NewIncidentDataAttributesKind = "scheduled"

	NewIncidentDataAttributesKindTest NewIncidentDataAttributesKind = "test"
)

// Defines values for NewIncidentDataAttributesStatus.
const (
	NewIncidentDataAttributesStatusAcknowledged NewIncidentDataAttributesStatus = "acknowledged"

	NewIncidentDataAttributesStatusCancelled NewIncidentDataAttributesStatus = "cancelled"

	NewIncidentDataAttributesStatusCompleted NewIncidentDataAttributesStatus = "completed"

	NewIncidentDataAttributesStatusDetected NewIncidentDataAttributesStatus = "detected"

	NewIncidentDataAttributesStatusInProgress NewIncidentDataAttributesStatus = "in_progress"

	NewIncidentDataAttributesStatusMitigated NewIncidentDataAttributesStatus = "mitigated"

	NewIncidentDataAttributesStatusResolved NewIncidentDataAttributesStatus = "resolved"

	NewIncidentDataAttributesStatusScheduled NewIncidentDataAttributesStatus = "scheduled"

	NewIncidentDataAttributesStatusStarted NewIncidentDataAttributesStatus = "started"
)

// Defines values for NewIncidentDataType.
const (
	NewIncidentDataTypeIncidents NewIncidentDataType = "incidents"
)

// Defines values for NewIncidentActionItemDataAttributesKind.
const (
	NewIncidentActionItemDataAttributesKindFollowUp NewIncidentActionItemDataAttributesKind = "follow_up"

	NewIncidentActionItemDataAttributesKindTask NewIncidentActionItemDataAttributesKind = "task"
)

// Defines values for NewIncidentActionItemDataAttributesPriority.
const (
	NewIncidentActionItemDataAttributesPriorityHigh NewIncidentActionItemDataAttributesPriority = "high"

	NewIncidentActionItemDataAttributesPriorityLow NewIncidentActionItemDataAttributesPriority = "low"

	NewIncidentActionItemDataAttributesPriorityMedium NewIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for NewIncidentActionItemDataAttributesStatus.
const (
	NewIncidentActionItemDataAttributesStatusCancelled NewIncidentActionItemDataAttributesStatus = "cancelled"

	NewIncidentActionItemDataAttributesStatusDone NewIncidentActionItemDataAttributesStatus = "done"

	NewIncidentActionItemDataAttributesStatusInProgress NewIncidentActionItemDataAttributesStatus = "in_progress"

	NewIncidentActionItemDataAttributesStatusOpen NewIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for NewIncidentActionItemDataType.
const (
	NewIncidentActionItemDataTypeIncidentActionItems NewIncidentActionItemDataType = "incident_action_items"
)

// Defines values for NewIncidentCustomFieldSelectionDataType.
const (
	NewIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections NewIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for NewIncidentEventDataAttributesVisibility.
const (
	NewIncidentEventDataAttributesVisibilityExternal NewIncidentEventDataAttributesVisibility = "external"

	NewIncidentEventDataAttributesVisibilityInternal NewIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for NewIncidentEventDataType.
const (
	NewIncidentEventDataTypeIncidentEvents NewIncidentEventDataType = "incident_events"
)

// Defines values for NewIncidentFeedbackDataAttributesRating.
const (
	NewIncidentFeedbackDataAttributesRatingN0 NewIncidentFeedbackDataAttributesRating = 0

	NewIncidentFeedbackDataAttributesRatingN1 NewIncidentFeedbackDataAttributesRating = 1

	NewIncidentFeedbackDataAttributesRatingN2 NewIncidentFeedbackDataAttributesRating = 2

	NewIncidentFeedbackDataAttributesRatingN3 NewIncidentFeedbackDataAttributesRating = 3

	NewIncidentFeedbackDataAttributesRatingN4 NewIncidentFeedbackDataAttributesRating = 4
)

// Defines values for NewIncidentFeedbackDataType.
const (
	NewIncidentFeedbackDataTypeIncidentFeedbacks NewIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for NewIncidentRoleDataType.
const (
	NewIncidentRoleDataTypeIncidentRoles NewIncidentRoleDataType = "incident_roles"
)

// Defines values for NewIncidentRoleTaskDataAttributesPriority.
const (
	NewIncidentRoleTaskDataAttributesPriorityHigh NewIncidentRoleTaskDataAttributesPriority = "high"

	NewIncidentRoleTaskDataAttributesPriorityLow NewIncidentRoleTaskDataAttributesPriority = "low"

	NewIncidentRoleTaskDataAttributesPriorityMedium NewIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for NewIncidentRoleTaskDataType.
const (
	NewIncidentRoleTaskDataTypeIncidentRoleTasks NewIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for NewIncidentStatusPageEventDataAttributesStatus.
const (
	NewIncidentStatusPageEventDataAttributesStatusCompleted NewIncidentStatusPageEventDataAttributesStatus = "completed"

	NewIncidentStatusPageEventDataAttributesStatusIdentified NewIncidentStatusPageEventDataAttributesStatus = "identified"

	NewIncidentStatusPageEventDataAttributesStatusInProgress NewIncidentStatusPageEventDataAttributesStatus = "in_progress"

	NewIncidentStatusPageEventDataAttributesStatusInvestigating NewIncidentStatusPageEventDataAttributesStatus = "investigating"

	NewIncidentStatusPageEventDataAttributesStatusMonitoring NewIncidentStatusPageEventDataAttributesStatus = "monitoring"

	NewIncidentStatusPageEventDataAttributesStatusResolved NewIncidentStatusPageEventDataAttributesStatus = "resolved"

	NewIncidentStatusPageEventDataAttributesStatusScheduled NewIncidentStatusPageEventDataAttributesStatus = "scheduled"

	NewIncidentStatusPageEventDataAttributesStatusVerifying NewIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for NewIncidentStatusPageEventDataType.
const (
	NewIncidentStatusPageEventDataTypeIncidentStatusPageEvents NewIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for NewIncidentTypeDataType.
const (
	NewIncidentTypeDataTypeIncidentTypes NewIncidentTypeDataType = "incident_types"
)

// Defines values for NewPlaybookDataType.
const (
	NewPlaybookDataTypePlaybooks NewPlaybookDataType = "playbooks"
)

// Defines values for NewPlaybookTaskDataType.
const (
	NewPlaybookTaskDataTypePlaybookTasks NewPlaybookTaskDataType = "playbook_tasks"
)

// Defines values for NewPostMortemTemplateDataType.
const (
	NewPostMortemTemplateDataTypePostMortemTemplates NewPostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for NewPulseDataType.
const (
	NewPulseDataTypePulses NewPulseDataType = "pulses"
)

// Defines values for NewServiceDataType.
const (
	NewServiceDataTypeServices NewServiceDataType = "services"
)

// Defines values for NewSeverityDataAttributesSeverity.
const (
	NewSeverityDataAttributesSeverityCritical NewSeverityDataAttributesSeverity = "critical"

	NewSeverityDataAttributesSeverityHigh NewSeverityDataAttributesSeverity = "high"

	NewSeverityDataAttributesSeverityLow NewSeverityDataAttributesSeverity = "low"

	NewSeverityDataAttributesSeverityMedium NewSeverityDataAttributesSeverity = "medium"
)

// Defines values for NewSeverityDataType.
const (
	NewSeverityDataTypeSeverities NewSeverityDataType = "severities"
)

// Defines values for NewStatusPageDataAttributesShowUptimeLastDays.
const (
	NewStatusPageDataAttributesShowUptimeLastDaysN30 NewStatusPageDataAttributesShowUptimeLastDays = 30

	NewStatusPageDataAttributesShowUptimeLastDaysN60 NewStatusPageDataAttributesShowUptimeLastDays = 60

	NewStatusPageDataAttributesShowUptimeLastDaysN90 NewStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for NewStatusPageDataType.
const (
	NewStatusPageDataTypeStatusPages NewStatusPageDataType = "status_pages"
)

// Defines values for NewTeamDataType.
const (
	NewTeamDataTypeGroups NewTeamDataType = "groups"
)

// Defines values for NewWorkflowDataAttributesRepeatOn.
const (
	NewWorkflowDataAttributesRepeatOnF NewWorkflowDataAttributesRepeatOn = "F"

	NewWorkflowDataAttributesRepeatOnM NewWorkflowDataAttributesRepeatOn = "M"

	NewWorkflowDataAttributesRepeatOnR NewWorkflowDataAttributesRepeatOn = "R"

	NewWorkflowDataAttributesRepeatOnS NewWorkflowDataAttributesRepeatOn = "S"

	NewWorkflowDataAttributesRepeatOnT NewWorkflowDataAttributesRepeatOn = "T"

	NewWorkflowDataAttributesRepeatOnU NewWorkflowDataAttributesRepeatOn = "U"

	NewWorkflowDataAttributesRepeatOnW NewWorkflowDataAttributesRepeatOn = "W"
)

// Defines values for NewWorkflowDataType.
const (
	NewWorkflowDataTypeWorkflows NewWorkflowDataType = "workflows"
)

// Defines values for NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"

	NewWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for NewWorkflowCustomFieldSelectionDataType.
const (
	NewWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections NewWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for NewWorkflowTaskDataType.
const (
	NewWorkflowTaskDataTypeWorkflowTasks NewWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsPriority.
const (
	PageOpsgenieOnCallRespondersTaskParamsPriorityAuto PageOpsgenieOnCallRespondersTaskParamsPriority = "auto"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP1 PageOpsgenieOnCallRespondersTaskParamsPriority = "P1"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP2 PageOpsgenieOnCallRespondersTaskParamsPriority = "P2"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP3 PageOpsgenieOnCallRespondersTaskParamsPriority = "P3"

	PageOpsgenieOnCallRespondersTaskParamsPriorityP4 PageOpsgenieOnCallRespondersTaskParamsPriority = "P4"
)

// Defines values for PageOpsgenieOnCallRespondersTaskParamsTaskType.
const (
	PageOpsgenieOnCallRespondersTaskParamsTaskTypePageOpsgenieOnCallResponders PageOpsgenieOnCallRespondersTaskParamsTaskType = "page_opsgenie_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsTaskType.
const (
	PagePagerdutyOnCallRespondersTaskParamsTaskTypePagePagerdutyOnCallResponders PagePagerdutyOnCallRespondersTaskParamsTaskType = "page_pagerduty_on_call_responders"
)

// Defines values for PagePagerdutyOnCallRespondersTaskParamsUrgency.
const (
	PagePagerdutyOnCallRespondersTaskParamsUrgencyAuto PagePagerdutyOnCallRespondersTaskParamsUrgency = "auto"

	PagePagerdutyOnCallRespondersTaskParamsUrgencyHigh PagePagerdutyOnCallRespondersTaskParamsUrgency = "high"

	PagePagerdutyOnCallRespondersTaskParamsUrgencyLow PagePagerdutyOnCallRespondersTaskParamsUrgency = "low"
)

// Defines values for PlaybookListDataType.
const (
	PlaybookListDataTypePlaybooks PlaybookListDataType = "playbooks"
)

// Defines values for PlaybookResponseDataType.
const (
	PlaybookResponseDataTypePlaybooks PlaybookResponseDataType = "playbooks"
)

// Defines values for PlaybookTaskListDataType.
const (
	PlaybookTaskListDataTypePlaybookTasks PlaybookTaskListDataType = "playbook_tasks"
)

// Defines values for PlaybookTaskResponseDataType.
const (
	PlaybookTaskResponseDataTypePlaybookTasks PlaybookTaskResponseDataType = "playbook_tasks"
)

// Defines values for PostMortemTemplateListDataType.
const (
	PostMortemTemplateListDataTypePostMortemTemplates PostMortemTemplateListDataType = "post_mortem_templates"
)

// Defines values for PostMortemTemplateResponseDataType.
const (
	PostMortemTemplateResponseDataTypePostMortemTemplates PostMortemTemplateResponseDataType = "post_mortem_templates"
)

// Defines values for PrintTaskParamsTaskType.
const (
	PrintTaskParamsTaskTypePrint PrintTaskParamsTaskType = "print"
)

// Defines values for PublishIncidentTaskParamsStatus.
const (
	PublishIncidentTaskParamsStatusCompleted PublishIncidentTaskParamsStatus = "completed"

	PublishIncidentTaskParamsStatusIdentified PublishIncidentTaskParamsStatus = "identified"

	PublishIncidentTaskParamsStatusInProgress PublishIncidentTaskParamsStatus = "in_progress"

	PublishIncidentTaskParamsStatusInvestigating PublishIncidentTaskParamsStatus = "investigating"

	PublishIncidentTaskParamsStatusMonitoring PublishIncidentTaskParamsStatus = "monitoring"

	PublishIncidentTaskParamsStatusResolved PublishIncidentTaskParamsStatus = "resolved"

	PublishIncidentTaskParamsStatusScheduled PublishIncidentTaskParamsStatus = "scheduled"

	PublishIncidentTaskParamsStatusVerifying PublishIncidentTaskParamsStatus = "verifying"
)

// Defines values for PublishIncidentTaskParamsTaskType.
const (
	PublishIncidentTaskParamsTaskTypePublishIncident PublishIncidentTaskParamsTaskType = "publish_incident"
)

// Defines values for PulseListDataType.
const (
	PulseListDataTypePulses PulseListDataType = "pulses"
)

// Defines values for PulseResponseDataType.
const (
	PulseResponseDataTypePulses PulseResponseDataType = "pulses"
)

// Defines values for PulseTriggerParamsPulseCondition.
const (
	PulseTriggerParamsPulseConditionALL PulseTriggerParamsPulseCondition = "ALL"

	PulseTriggerParamsPulseConditionANY PulseTriggerParamsPulseCondition = "ANY"

	PulseTriggerParamsPulseConditionNONE PulseTriggerParamsPulseCondition = "NONE"
)

// Defines values for PulseTriggerParamsPulseConditionLabel.
const (
	PulseTriggerParamsPulseConditionLabelANY PulseTriggerParamsPulseConditionLabel = "ANY"

	PulseTriggerParamsPulseConditionLabelIS PulseTriggerParamsPulseConditionLabel = "IS"

	PulseTriggerParamsPulseConditionLabelNONE PulseTriggerParamsPulseConditionLabel = "NONE"

	PulseTriggerParamsPulseConditionLabelSET PulseTriggerParamsPulseConditionLabel = "SET"

	PulseTriggerParamsPulseConditionLabelUNSET PulseTriggerParamsPulseConditionLabel = "UNSET"
)

// Defines values for PulseTriggerParamsPulseConditionSource.
const (
	PulseTriggerParamsPulseConditionSourceANY PulseTriggerParamsPulseConditionSource = "ANY"

	PulseTriggerParamsPulseConditionSourceIS PulseTriggerParamsPulseConditionSource = "IS"

	PulseTriggerParamsPulseConditionSourceNONE PulseTriggerParamsPulseConditionSource = "NONE"

	PulseTriggerParamsPulseConditionSourceSET PulseTriggerParamsPulseConditionSource = "SET"

	PulseTriggerParamsPulseConditionSourceUNSET PulseTriggerParamsPulseConditionSource = "UNSET"
)

// Defines values for PulseTriggerParamsTriggerType.
const (
	PulseTriggerParamsTriggerTypePulse PulseTriggerParamsTriggerType = "pulse"
)

// Defines values for PulseTriggerParamsTriggers.
const (
	PulseTriggerParamsTriggersPulseCreated PulseTriggerParamsTriggers = "pulse_created"
)

// Defines values for RedisClientTaskParamsTaskType.
const (
	RedisClientTaskParamsTaskTypeRedisClient RedisClientTaskParamsTaskType = "redis_client"
)

// Defines values for RenameSlackChannelTaskParamsTaskType.
const (
	RenameSlackChannelTaskParamsTaskTypeRenameSlackChannel RenameSlackChannelTaskParamsTaskType = "rename_slack_channel"
)

// Defines values for ResolveIncidentDataType.
const (
	ResolveIncidentDataTypeIncidents ResolveIncidentDataType = "incidents"
)

// Defines values for RunCommandHerokuTaskParamsSize.
const (
	RunCommandHerokuTaskParamsSizeStandard1X RunCommandHerokuTaskParamsSize = "standard-1X"

	RunCommandHerokuTaskParamsSizeStandard2X RunCommandHerokuTaskParamsSize = "standard-2X"
)

// Defines values for RunCommandHerokuTaskParamsTaskType.
const (
	RunCommandHerokuTaskParamsTaskTypeRunCommandHeroku RunCommandHerokuTaskParamsTaskType = "run_command_heroku"
)

// Defines values for SendEmailTaskParamsTaskType.
const (
	SendEmailTaskParamsTaskTypeSendEmail SendEmailTaskParamsTaskType = "send_email"
)

// Defines values for SendSmsTaskParamsTaskType.
const (
	SendSmsTaskParamsTaskTypeSendSms SendSmsTaskParamsTaskType = "send_sms"
)

// Defines values for ServiceListDataType.
const (
	ServiceListDataTypeServices ServiceListDataType = "services"
)

// Defines values for ServiceResponseDataType.
const (
	ServiceResponseDataTypeServices ServiceResponseDataType = "services"
)

// Defines values for SeveritySeverity.
const (
	SeveritySeverityCritical SeveritySeverity = "critical"

	SeveritySeverityHigh SeveritySeverity = "high"

	SeveritySeverityLow SeveritySeverity = "low"

	SeveritySeverityMedium SeveritySeverity = "medium"
)

// Defines values for SeverityListDataType.
const (
	SeverityListDataTypeSeverities SeverityListDataType = "severities"
)

// Defines values for SeverityResponseDataType.
const (
	SeverityResponseDataTypeSeverities SeverityResponseDataType = "severities"
)

// Defines values for SnapshotDatadogGraphTaskParamsTaskType.
const (
	SnapshotDatadogGraphTaskParamsTaskTypeSnapshotDatadogGraph SnapshotDatadogGraphTaskParamsTaskType = "snapshot_datadog_graph"
)

// Defines values for SnapshotGrafanaDashboardTaskParamsTaskType.
const (
	SnapshotGrafanaDashboardTaskParamsTaskTypeSnapshotGrafanaDashboard SnapshotGrafanaDashboardTaskParamsTaskType = "snapshot_grafana_dashboard"
)

// Defines values for SnapshotLookerLookTaskParamsTaskType.
const (
	SnapshotLookerLookTaskParamsTaskTypeSnapshotLookerLook SnapshotLookerLookTaskParamsTaskType = "snapshot_looker_look"
)

// Defines values for SnapshotNewRelicGraphTaskParamsMetricType.
const (
	SnapshotNewRelicGraphTaskParamsMetricTypeAPDEX SnapshotNewRelicGraphTaskParamsMetricType = "APDEX"

	SnapshotNewRelicGraphTaskParamsMetricTypeAREA SnapshotNewRelicGraphTaskParamsMetricType = "AREA"

	SnapshotNewRelicGraphTaskParamsMetricTypeBAR SnapshotNewRelicGraphTaskParamsMetricType = "BAR"

	SnapshotNewRelicGraphTaskParamsMetricTypeBASELINE SnapshotNewRelicGraphTaskParamsMetricType = "BASELINE"

	SnapshotNewRelicGraphTaskParamsMetricTypeBILLBOARD SnapshotNewRelicGraphTaskParamsMetricType = "BILLBOARD"

	SnapshotNewRelicGraphTaskParamsMetricTypeBULLET SnapshotNewRelicGraphTaskParamsMetricType = "BULLET"

	SnapshotNewRelicGraphTaskParamsMetricTypeEVENTFEED SnapshotNewRelicGraphTaskParamsMetricType = "EVENT_FEED"

	SnapshotNewRelicGraphTaskParamsMetricTypeFUNNEL SnapshotNewRelicGraphTaskParamsMetricType = "FUNNEL"

	SnapshotNewRelicGraphTaskParamsMetricTypeHEATMAP SnapshotNewRelicGraphTaskParamsMetricType = "HEATMAP"

	SnapshotNewRelicGraphTaskParamsMetricTypeHISTOGRAM SnapshotNewRelicGraphTaskParamsMetricType = "HISTOGRAM"

	SnapshotNewRelicGraphTaskParamsMetricTypeLINE SnapshotNewRelicGraphTaskParamsMetricType = "LINE"

	SnapshotNewRelicGraphTaskParamsMetricTypePIE SnapshotNewRelicGraphTaskParamsMetricType = "PIE"

	SnapshotNewRelicGraphTaskParamsMetricTypeSCATTER SnapshotNewRelicGraphTaskParamsMetricType = "SCATTER"

	SnapshotNewRelicGraphTaskParamsMetricTypeSTACKEDHORIZONTALBAR SnapshotNewRelicGraphTaskParamsMetricType = "STACKED_HORIZONTAL_BAR"

	SnapshotNewRelicGraphTaskParamsMetricTypeTABLE SnapshotNewRelicGraphTaskParamsMetricType = "TABLE"

	SnapshotNewRelicGraphTaskParamsMetricTypeVERTICALBAR SnapshotNewRelicGraphTaskParamsMetricType = "VERTICAL_BAR"
)

// Defines values for SnapshotNewRelicGraphTaskParamsTaskType.
const (
	SnapshotNewRelicGraphTaskParamsTaskTypeSnapshotLookerGraph SnapshotNewRelicGraphTaskParamsTaskType = "snapshot_looker_graph"
)

// Defines values for StandaloneTriggerParamsTriggerType.
const (
	StandaloneTriggerParamsTriggerTypeSimple StandaloneTriggerParamsTriggerType = "simple"
)

// Defines values for StandaloneTriggerParamsTriggers.
const (
	StandaloneTriggerParamsTriggersSlackCommand StandaloneTriggerParamsTriggers = "slack_command"
)

// Defines values for StatusPageShowUptimeLastDays.
const (
	StatusPageShowUptimeLastDaysN30 StatusPageShowUptimeLastDays = 30

	StatusPageShowUptimeLastDaysN60 StatusPageShowUptimeLastDays = 60

	StatusPageShowUptimeLastDaysN90 StatusPageShowUptimeLastDays = 90
)

// Defines values for StatusPageListDataType.
const (
	StatusPageListDataTypeStatusPages StatusPageListDataType = "status_pages"
)

// Defines values for StatusPageResponseDataType.
const (
	StatusPageResponseDataTypeStatusPages StatusPageResponseDataType = "status_pages"
)

// Defines values for TeamListDataType.
const (
	TeamListDataTypeGroups TeamListDataType = "groups"
)

// Defines values for TeamResponseDataType.
const (
	TeamResponseDataTypeGroups TeamResponseDataType = "groups"
)

// Defines values for TweetTwitterMessageTaskParamsTaskType.
const (
	TweetTwitterMessageTaskParamsTaskTypeTweetTwitterMessage TweetTwitterMessageTaskParamsTaskType = "tweet_twitter_message"
)

// Defines values for UpdateAirtableTableRecordTaskParamsTaskType.
const (
	UpdateAirtableTableRecordTaskParamsTaskTypeUpdateAirtableTableRecord UpdateAirtableTableRecordTaskParamsTaskType = "update_airtable_table_record"
)

// Defines values for UpdateAsanaTaskTaskParamsTaskType.
const (
	UpdateAsanaTaskTaskParamsTaskTypeUpdateAsanaTask UpdateAsanaTaskTaskParamsTaskType = "update_asana_task"
)

// Defines values for UpdateCauseDataType.
const (
	UpdateCauseDataTypeCauses UpdateCauseDataType = "causes"
)

// Defines values for UpdateCustomFieldDataAttributesRequired.
const (
	UpdateCustomFieldDataAttributesRequiredIncidentForm UpdateCustomFieldDataAttributesRequired = "incident_form"

	UpdateCustomFieldDataAttributesRequiredIncidentMitigationForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_form"

	UpdateCustomFieldDataAttributesRequiredIncidentMitigationSlackForm UpdateCustomFieldDataAttributesRequired = "incident_mitigation_slack_form"

	UpdateCustomFieldDataAttributesRequiredIncidentPostMortemForm UpdateCustomFieldDataAttributesRequired = "incident_post_mortem_form"

	UpdateCustomFieldDataAttributesRequiredIncidentResolutionForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_form"

	UpdateCustomFieldDataAttributesRequiredIncidentResolutionSlackForm UpdateCustomFieldDataAttributesRequired = "incident_resolution_slack_form"

	UpdateCustomFieldDataAttributesRequiredIncidentSlackForm UpdateCustomFieldDataAttributesRequired = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataAttributesShown.
const (
	UpdateCustomFieldDataAttributesShownIncidentForm UpdateCustomFieldDataAttributesShown = "incident_form"

	UpdateCustomFieldDataAttributesShownIncidentMitigationForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_form"

	UpdateCustomFieldDataAttributesShownIncidentMitigationSlackForm UpdateCustomFieldDataAttributesShown = "incident_mitigation_slack_form"

	UpdateCustomFieldDataAttributesShownIncidentPostMortem UpdateCustomFieldDataAttributesShown = "incident_post_mortem"

	UpdateCustomFieldDataAttributesShownIncidentPostMortemForm UpdateCustomFieldDataAttributesShown = "incident_post_mortem_form"

	UpdateCustomFieldDataAttributesShownIncidentResolutionForm UpdateCustomFieldDataAttributesShown = "incident_resolution_form"

	UpdateCustomFieldDataAttributesShownIncidentResolutionSlackForm UpdateCustomFieldDataAttributesShown = "incident_resolution_slack_form"

	UpdateCustomFieldDataAttributesShownIncidentSlackForm UpdateCustomFieldDataAttributesShown = "incident_slack_form"
)

// Defines values for UpdateCustomFieldDataType.
const (
	UpdateCustomFieldDataTypeCustomFields UpdateCustomFieldDataType = "custom_fields"
)

// Defines values for UpdateCustomFieldOptionDataType.
const (
	UpdateCustomFieldOptionDataTypeCustomFieldOptions UpdateCustomFieldOptionDataType = "custom_field_options"
)

// Defines values for UpdateEnvironmentDataType.
const (
	UpdateEnvironmentDataTypeEnvironments UpdateEnvironmentDataType = "environments"
)

// Defines values for UpdateFunctionalityDataType.
const (
	UpdateFunctionalityDataTypeFunctionalities UpdateFunctionalityDataType = "functionalities"
)

// Defines values for UpdateGithubIssueTaskParamsTaskType.
const (
	UpdateGithubIssueTaskParamsTaskTypeUpdateGithubIssue UpdateGithubIssueTaskParamsTaskType = "update_github_issue"
)

// Defines values for UpdateGoogleCalendarEventTaskParamsTaskType.
const (
	UpdateGoogleCalendarEventTaskParamsTaskTypeCreateGoogleCalendarEvent UpdateGoogleCalendarEventTaskParamsTaskType = "create_google_calendar_event"
)

// Defines values for UpdateIncidentDataType.
const (
	UpdateIncidentDataTypeIncidents UpdateIncidentDataType = "incidents"
)

// Defines values for UpdateIncidentActionItemDataAttributesKind.
const (
	UpdateIncidentActionItemDataAttributesKindFollowUp UpdateIncidentActionItemDataAttributesKind = "follow_up"

	UpdateIncidentActionItemDataAttributesKindTask UpdateIncidentActionItemDataAttributesKind = "task"
)

// Defines values for UpdateIncidentActionItemDataAttributesPriority.
const (
	UpdateIncidentActionItemDataAttributesPriorityHigh UpdateIncidentActionItemDataAttributesPriority = "high"

	UpdateIncidentActionItemDataAttributesPriorityLow UpdateIncidentActionItemDataAttributesPriority = "low"

	UpdateIncidentActionItemDataAttributesPriorityMedium UpdateIncidentActionItemDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentActionItemDataAttributesStatus.
const (
	UpdateIncidentActionItemDataAttributesStatusCancelled UpdateIncidentActionItemDataAttributesStatus = "cancelled"

	UpdateIncidentActionItemDataAttributesStatusDone UpdateIncidentActionItemDataAttributesStatus = "done"

	UpdateIncidentActionItemDataAttributesStatusInProgress UpdateIncidentActionItemDataAttributesStatus = "in_progress"

	UpdateIncidentActionItemDataAttributesStatusOpen UpdateIncidentActionItemDataAttributesStatus = "open"
)

// Defines values for UpdateIncidentActionItemDataType.
const (
	UpdateIncidentActionItemDataTypeIncidentActionItems UpdateIncidentActionItemDataType = "incident_action_items"
)

// Defines values for UpdateIncidentCustomFieldSelectionDataType.
const (
	UpdateIncidentCustomFieldSelectionDataTypeIncidentCustomFieldSelections UpdateIncidentCustomFieldSelectionDataType = "incident_custom_field_selections"
)

// Defines values for UpdateIncidentEventDataAttributesVisibility.
const (
	UpdateIncidentEventDataAttributesVisibilityExternal UpdateIncidentEventDataAttributesVisibility = "external"

	UpdateIncidentEventDataAttributesVisibilityInternal UpdateIncidentEventDataAttributesVisibility = "internal"
)

// Defines values for UpdateIncidentEventDataType.
const (
	UpdateIncidentEventDataTypeIncidentEvents UpdateIncidentEventDataType = "incident_events"
)

// Defines values for UpdateIncidentFeedbackDataAttributesRating.
const (
	UpdateIncidentFeedbackDataAttributesRatingN0 UpdateIncidentFeedbackDataAttributesRating = 0

	UpdateIncidentFeedbackDataAttributesRatingN1 UpdateIncidentFeedbackDataAttributesRating = 1

	UpdateIncidentFeedbackDataAttributesRatingN2 UpdateIncidentFeedbackDataAttributesRating = 2

	UpdateIncidentFeedbackDataAttributesRatingN3 UpdateIncidentFeedbackDataAttributesRating = 3

	UpdateIncidentFeedbackDataAttributesRatingN4 UpdateIncidentFeedbackDataAttributesRating = 4
)

// Defines values for UpdateIncidentFeedbackDataType.
const (
	UpdateIncidentFeedbackDataTypeIncidentFeedbacks UpdateIncidentFeedbackDataType = "incident_feedbacks"
)

// Defines values for UpdateIncidentPostMortemDataAttributesStatus.
const (
	UpdateIncidentPostMortemDataAttributesStatusDraft UpdateIncidentPostMortemDataAttributesStatus = "draft"

	UpdateIncidentPostMortemDataAttributesStatusPublished UpdateIncidentPostMortemDataAttributesStatus = "published"
)

// Defines values for UpdateIncidentPostMortemDataType.
const (
	UpdateIncidentPostMortemDataTypeIncidentPostMortems UpdateIncidentPostMortemDataType = "incident_post_mortems"
)

// Defines values for UpdateIncidentPostmortemTaskParamsTaskType.
const (
	UpdateIncidentPostmortemTaskParamsTaskTypeUpdateIncidentPostmortem UpdateIncidentPostmortemTaskParamsTaskType = "update_incident_postmortem"
)

// Defines values for UpdateIncidentRoleDataType.
const (
	UpdateIncidentRoleDataTypeIncidentRoles UpdateIncidentRoleDataType = "incident_roles"
)

// Defines values for UpdateIncidentRoleTaskDataAttributesPriority.
const (
	UpdateIncidentRoleTaskDataAttributesPriorityHigh UpdateIncidentRoleTaskDataAttributesPriority = "high"

	UpdateIncidentRoleTaskDataAttributesPriorityLow UpdateIncidentRoleTaskDataAttributesPriority = "low"

	UpdateIncidentRoleTaskDataAttributesPriorityMedium UpdateIncidentRoleTaskDataAttributesPriority = "medium"
)

// Defines values for UpdateIncidentRoleTaskDataType.
const (
	UpdateIncidentRoleTaskDataTypeIncidentRoleTasks UpdateIncidentRoleTaskDataType = "incident_role_tasks"
)

// Defines values for UpdateIncidentStatusPageEventDataAttributesStatus.
const (
	UpdateIncidentStatusPageEventDataAttributesStatusCompleted UpdateIncidentStatusPageEventDataAttributesStatus = "completed"

	UpdateIncidentStatusPageEventDataAttributesStatusIdentified UpdateIncidentStatusPageEventDataAttributesStatus = "identified"

	UpdateIncidentStatusPageEventDataAttributesStatusInProgress UpdateIncidentStatusPageEventDataAttributesStatus = "in_progress"

	UpdateIncidentStatusPageEventDataAttributesStatusInvestigating UpdateIncidentStatusPageEventDataAttributesStatus = "investigating"

	UpdateIncidentStatusPageEventDataAttributesStatusMonitoring UpdateIncidentStatusPageEventDataAttributesStatus = "monitoring"

	UpdateIncidentStatusPageEventDataAttributesStatusResolved UpdateIncidentStatusPageEventDataAttributesStatus = "resolved"

	UpdateIncidentStatusPageEventDataAttributesStatusScheduled UpdateIncidentStatusPageEventDataAttributesStatus = "scheduled"

	UpdateIncidentStatusPageEventDataAttributesStatusVerifying UpdateIncidentStatusPageEventDataAttributesStatus = "verifying"
)

// Defines values for UpdateIncidentStatusPageEventDataType.
const (
	UpdateIncidentStatusPageEventDataTypeIncidentStatusPageEvents UpdateIncidentStatusPageEventDataType = "incident_status_page_events"
)

// Defines values for UpdateIncidentTaskParamsTaskType.
const (
	UpdateIncidentTaskParamsTaskTypeUpdateIncident UpdateIncidentTaskParamsTaskType = "update_incident"
)

// Defines values for UpdateIncidentTypeDataType.
const (
	UpdateIncidentTypeDataTypeIncidentTypes UpdateIncidentTypeDataType = "incident_types"
)

// Defines values for UpdateJiraIssueTaskParamsTaskType.
const (
	UpdateJiraIssueTaskParamsTaskTypeUpdateJiraIssue UpdateJiraIssueTaskParamsTaskType = "update_jira_issue"
)

// Defines values for UpdateLinearIssueTaskParamsTaskType.
const (
	UpdateLinearIssueTaskParamsTaskTypeUpdateLinearIssue UpdateLinearIssueTaskParamsTaskType = "update_linear_issue"
)

// Defines values for UpdatePlaybookDataType.
const (
	UpdatePlaybookDataTypePlaybooks UpdatePlaybookDataType = "playbooks"
)

// Defines values for UpdatePlaybookTaskDataType.
const (
	UpdatePlaybookTaskDataTypePlaybookTasks UpdatePlaybookTaskDataType = "playbook_tasks"
)

// Defines values for UpdatePostMortemTemplateDataType.
const (
	UpdatePostMortemTemplateDataTypePostMortemTemplates UpdatePostMortemTemplateDataType = "post_mortem_templates"
)

// Defines values for UpdatePulseDataType.
const (
	UpdatePulseDataTypePulses UpdatePulseDataType = "pulses"
)

// Defines values for UpdateServiceDataType.
const (
	UpdateServiceDataTypeServices UpdateServiceDataType = "services"
)

// Defines values for UpdateServiceNowIncidentTaskParamsTaskType.
const (
	UpdateServiceNowIncidentTaskParamsTaskTypeUpdateServiceNowIncident UpdateServiceNowIncidentTaskParamsTaskType = "update_service_now_incident"
)

// Defines values for UpdateSeverityDataAttributesSeverity.
const (
	UpdateSeverityDataAttributesSeverityCritical UpdateSeverityDataAttributesSeverity = "critical"

	UpdateSeverityDataAttributesSeverityHigh UpdateSeverityDataAttributesSeverity = "high"

	UpdateSeverityDataAttributesSeverityLow UpdateSeverityDataAttributesSeverity = "low"

	UpdateSeverityDataAttributesSeverityMedium UpdateSeverityDataAttributesSeverity = "medium"
)

// Defines values for UpdateSeverityDataType.
const (
	UpdateSeverityDataTypeSeverities UpdateSeverityDataType = "severities"
)

// Defines values for UpdateShortcutStoryTaskParamsTaskType.
const (
	UpdateShortcutStoryTaskParamsTaskTypeUpdateShortcutStory UpdateShortcutStoryTaskParamsTaskType = "update_shortcut_story"
)

// Defines values for UpdateShortcutTaskTaskParamsTaskType.
const (
	UpdateShortcutTaskTaskParamsTaskTypeUpdateShortcutTask UpdateShortcutTaskTaskParamsTaskType = "update_shortcut_task"
)

// Defines values for UpdateSlackChannelTopicTaskParamsTaskType.
const (
	UpdateSlackChannelTopicTaskParamsTaskTypeUpdateSlackChannelTopic UpdateSlackChannelTopicTaskParamsTaskType = "update_slack_channel_topic"
)

// Defines values for UpdateStatusPageDataAttributesShowUptimeLastDays.
const (
	UpdateStatusPageDataAttributesShowUptimeLastDaysN30 UpdateStatusPageDataAttributesShowUptimeLastDays = 30

	UpdateStatusPageDataAttributesShowUptimeLastDaysN60 UpdateStatusPageDataAttributesShowUptimeLastDays = 60

	UpdateStatusPageDataAttributesShowUptimeLastDaysN90 UpdateStatusPageDataAttributesShowUptimeLastDays = 90
)

// Defines values for UpdateStatusPageDataType.
const (
	UpdateStatusPageDataTypeStatusPages UpdateStatusPageDataType = "status_pages"
)

// Defines values for UpdateStatusTaskParamsStatus.
const (
	UpdateStatusTaskParamsStatusCancelled UpdateStatusTaskParamsStatus = "cancelled"

	UpdateStatusTaskParamsStatusMitigated UpdateStatusTaskParamsStatus = "mitigated"

	UpdateStatusTaskParamsStatusResolved UpdateStatusTaskParamsStatus = "resolved"

	UpdateStatusTaskParamsStatusStarted UpdateStatusTaskParamsStatus = "started"
)

// Defines values for UpdateStatusTaskParamsTaskType.
const (
	UpdateStatusTaskParamsTaskTypeUpdateStatus UpdateStatusTaskParamsTaskType = "update_status"
)

// Defines values for UpdateTeamDataType.
const (
	UpdateTeamDataTypeGroups UpdateTeamDataType = "groups"
)

// Defines values for UpdateTrelloCardTaskParamsTaskType.
const (
	UpdateTrelloCardTaskParamsTaskTypeUpdateTrelloCard UpdateTrelloCardTaskParamsTaskType = "update_trello_card"
)

// Defines values for UpdateWorkflowDataAttributesTriggers.
const (
	UpdateWorkflowDataAttributesTriggersEnvironmentsUpdated UpdateWorkflowDataAttributesTriggers = "environments_updated"

	UpdateWorkflowDataAttributesTriggersFunctionalitiesUpdated UpdateWorkflowDataAttributesTriggers = "functionalities_updated"

	UpdateWorkflowDataAttributesTriggersIncidentCreated UpdateWorkflowDataAttributesTriggers = "incident_created"

	UpdateWorkflowDataAttributesTriggersIncidentTypesUpdated UpdateWorkflowDataAttributesTriggers = "incident_types_updated"

	UpdateWorkflowDataAttributesTriggersIncidentUpdated UpdateWorkflowDataAttributesTriggers = "incident_updated"

	UpdateWorkflowDataAttributesTriggersRoleAssignmentsUpdated UpdateWorkflowDataAttributesTriggers = "role_assignments_updated"

	UpdateWorkflowDataAttributesTriggersServicesUpdated UpdateWorkflowDataAttributesTriggers = "services_updated"

	UpdateWorkflowDataAttributesTriggersSeverityUpdated UpdateWorkflowDataAttributesTriggers = "severity_updated"

	UpdateWorkflowDataAttributesTriggersSlackCommand UpdateWorkflowDataAttributesTriggers = "slack_command"

	UpdateWorkflowDataAttributesTriggersStatusUpdated UpdateWorkflowDataAttributesTriggers = "status_updated"

	UpdateWorkflowDataAttributesTriggersSummaryUpdated UpdateWorkflowDataAttributesTriggers = "summary_updated"

	UpdateWorkflowDataAttributesTriggersTeamsUpdated UpdateWorkflowDataAttributesTriggers = "teams_updated"

	UpdateWorkflowDataAttributesTriggersTimelineUpdated UpdateWorkflowDataAttributesTriggers = "timeline_updated"

	UpdateWorkflowDataAttributesTriggersTitleUpdated UpdateWorkflowDataAttributesTriggers = "title_updated"
)

// Defines values for UpdateWorkflowDataType.
const (
	UpdateWorkflowDataTypeWorkflows UpdateWorkflowDataType = "workflows"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition.
const (
	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionANY UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "ANY"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionIS UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "IS"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionNONE UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "NONE"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionSET UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "SET"

	UpdateWorkflowCustomFieldSelectionDataAttributesIncidentConditionUNSET UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition = "UNSET"
)

// Defines values for UpdateWorkflowCustomFieldSelectionDataType.
const (
	UpdateWorkflowCustomFieldSelectionDataTypeWorkflowCustomFieldSelections UpdateWorkflowCustomFieldSelectionDataType = "workflow_custom_field_selections"
)

// Defines values for UpdateWorkflowTaskDataType.
const (
	UpdateWorkflowTaskDataTypeWorkflowTasks UpdateWorkflowTaskDataType = "workflow_tasks"
)

// Defines values for UpdateZendeskTicketTaskParamsTaskType.
const (
	UpdateZendeskTicketTaskParamsTaskTypeUpdateZendeskTicket UpdateZendeskTicketTaskParamsTaskType = "update_zendesk_ticket"
)

// Defines values for WorkflowRepeatOn.
const (
	WorkflowRepeatOnF WorkflowRepeatOn = "F"

	WorkflowRepeatOnM WorkflowRepeatOn = "M"

	WorkflowRepeatOnR WorkflowRepeatOn = "R"

	WorkflowRepeatOnS WorkflowRepeatOn = "S"

	WorkflowRepeatOnT WorkflowRepeatOn = "T"

	WorkflowRepeatOnU WorkflowRepeatOn = "U"

	WorkflowRepeatOnW WorkflowRepeatOn = "W"
)

// Defines values for WorkflowTriggers.
const (
	WorkflowTriggersEnvironmentsUpdated WorkflowTriggers = "environments_updated"

	WorkflowTriggersFunctionalitiesUpdated WorkflowTriggers = "functionalities_updated"

	WorkflowTriggersIncidentCreated WorkflowTriggers = "incident_created"

	WorkflowTriggersIncidentTypesUpdated WorkflowTriggers = "incident_types_updated"

	WorkflowTriggersIncidentUpdated WorkflowTriggers = "incident_updated"

	WorkflowTriggersRoleAssignmentsUpdated WorkflowTriggers = "role_assignments_updated"

	WorkflowTriggersServicesUpdated WorkflowTriggers = "services_updated"

	WorkflowTriggersSeverityUpdated WorkflowTriggers = "severity_updated"

	WorkflowTriggersSlackCommand WorkflowTriggers = "slack_command"

	WorkflowTriggersStatusUpdated WorkflowTriggers = "status_updated"

	WorkflowTriggersSummaryUpdated WorkflowTriggers = "summary_updated"

	WorkflowTriggersTeamsUpdated WorkflowTriggers = "teams_updated"

	WorkflowTriggersTimelineUpdated WorkflowTriggers = "timeline_updated"

	WorkflowTriggersTitleUpdated WorkflowTriggers = "title_updated"
)

// Defines values for WorkflowCustomFieldSelectionIncidentCondition.
const (
	WorkflowCustomFieldSelectionIncidentConditionANY WorkflowCustomFieldSelectionIncidentCondition = "ANY"

	WorkflowCustomFieldSelectionIncidentConditionIS WorkflowCustomFieldSelectionIncidentCondition = "IS"

	WorkflowCustomFieldSelectionIncidentConditionNONE WorkflowCustomFieldSelectionIncidentCondition = "NONE"

	WorkflowCustomFieldSelectionIncidentConditionSET WorkflowCustomFieldSelectionIncidentCondition = "SET"

	WorkflowCustomFieldSelectionIncidentConditionUNSET WorkflowCustomFieldSelectionIncidentCondition = "UNSET"
)

// Defines values for WorkflowCustomFieldSelectionListDataType.
const (
	WorkflowCustomFieldSelectionListDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionListDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowCustomFieldSelectionResponseDataType.
const (
	WorkflowCustomFieldSelectionResponseDataTypeWorkflowCustomFieldSelections WorkflowCustomFieldSelectionResponseDataType = "workflow_custom_field_selections"
)

// Defines values for WorkflowListDataType.
const (
	WorkflowListDataTypeWorkflows WorkflowListDataType = "workflows"
)

// Defines values for WorkflowResponseDataType.
const (
	WorkflowResponseDataTypeWorkflows WorkflowResponseDataType = "workflows"
)

// Defines values for WorkflowTaskListDataType.
const (
	WorkflowTaskListDataTypeWorkflowTasks WorkflowTaskListDataType = "workflow_tasks"
)

// Defines values for WorkflowTaskResponseDataType.
const (
	WorkflowTaskResponseDataTypeWorkflowTasks WorkflowTaskResponseDataType = "workflow_tasks"
)

// ActionItemTriggerParams defines model for action_item_trigger_params.
type ActionItemTriggerParams struct {
	IncidentActionItemCondition         *ActionItemTriggerParamsIncidentActionItemCondition         `json:"incident_action_item_condition,omitempty"`
	IncidentActionItemConditionGroup    *ActionItemTriggerParamsIncidentActionItemConditionGroup    `json:"incident_action_item_condition_group,omitempty"`
	IncidentActionItemConditionKind     *ActionItemTriggerParamsIncidentActionItemConditionKind     `json:"incident_action_item_condition_kind,omitempty"`
	IncidentActionItemConditionPriority *ActionItemTriggerParamsIncidentActionItemConditionPriority `json:"incident_action_item_condition_priority,omitempty"`
	IncidentActionItemConditionStatus   *ActionItemTriggerParamsIncidentActionItemConditionStatus   `json:"incident_action_item_condition_status,omitempty"`
	IncidentActionItemKinds             *[]ActionItemTriggerParamsIncidentActionItemKinds           `json:"incident_action_item_kinds,omitempty"`
	IncidentActionItemPriorities        *[]ActionItemTriggerParamsIncidentActionItemPriorities      `json:"incident_action_item_priorities,omitempty"`
	IncidentActionItemStatuses          *[]ActionItemTriggerParamsIncidentActionItemStatuses        `json:"incident_action_item_statuses,omitempty"`
	IncidentCondition                   *ActionItemTriggerParamsIncidentCondition                   `json:"incident_condition,omitempty"`
	IncidentConditionEnvironment        *ActionItemTriggerParamsIncidentConditionEnvironment        `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality      *ActionItemTriggerParamsIncidentConditionFunctionality      `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup              *ActionItemTriggerParamsIncidentConditionGroup              `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentType       *ActionItemTriggerParamsIncidentConditionIncidentType       `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind               *ActionItemTriggerParamsIncidentConditionKind               `json:"incident_condition_kind,omitempty"`
	IncidentConditionService            *ActionItemTriggerParamsIncidentConditionService            `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity           *ActionItemTriggerParamsIncidentConditionSeverity           `json:"incident_condition_severity,omitempty"`
	IncidentConditionStatus             *ActionItemTriggerParamsIncidentConditionStatus             `json:"incident_condition_status,omitempty"`
	IncidentConditionVisibility         *ActionItemTriggerParamsIncidentConditionVisibility         `json:"incident_condition_visibility,omitempty"`
	IncidentKinds                       *[]ActionItemTriggerParamsIncidentKinds                     `json:"incident_kinds,omitempty"`
	IncidentStatuses                    *[]ActionItemTriggerParamsIncidentStatuses                  `json:"incident_statuses,omitempty"`
	IncidentVisibilities                *[]bool                                                     `json:"incident_visibilities,omitempty"`
	TriggerType                         ActionItemTriggerParamsTriggerType                          `json:"trigger_type"`
	Triggers                            *[]ActionItemTriggerParamsTriggers                          `json:"triggers,omitempty"`
}

// ActionItemTriggerParamsIncidentActionItemCondition defines model for ActionItemTriggerParams.IncidentActionItemCondition.
type ActionItemTriggerParamsIncidentActionItemCondition string

// ActionItemTriggerParamsIncidentActionItemConditionGroup defines model for ActionItemTriggerParams.IncidentActionItemConditionGroup.
type ActionItemTriggerParamsIncidentActionItemConditionGroup string

// ActionItemTriggerParamsIncidentActionItemConditionKind defines model for ActionItemTriggerParams.IncidentActionItemConditionKind.
type ActionItemTriggerParamsIncidentActionItemConditionKind string

// ActionItemTriggerParamsIncidentActionItemConditionPriority defines model for ActionItemTriggerParams.IncidentActionItemConditionPriority.
type ActionItemTriggerParamsIncidentActionItemConditionPriority string

// ActionItemTriggerParamsIncidentActionItemConditionStatus defines model for ActionItemTriggerParams.IncidentActionItemConditionStatus.
type ActionItemTriggerParamsIncidentActionItemConditionStatus string

// ActionItemTriggerParamsIncidentActionItemKinds defines model for ActionItemTriggerParams.IncidentActionItemKinds.
type ActionItemTriggerParamsIncidentActionItemKinds string

// ActionItemTriggerParamsIncidentActionItemPriorities defines model for ActionItemTriggerParams.IncidentActionItemPriorities.
type ActionItemTriggerParamsIncidentActionItemPriorities string

// ActionItemTriggerParamsIncidentActionItemStatuses defines model for ActionItemTriggerParams.IncidentActionItemStatuses.
type ActionItemTriggerParamsIncidentActionItemStatuses string

// ActionItemTriggerParamsIncidentCondition defines model for ActionItemTriggerParams.IncidentCondition.
type ActionItemTriggerParamsIncidentCondition string

// ActionItemTriggerParamsIncidentConditionEnvironment defines model for ActionItemTriggerParams.IncidentConditionEnvironment.
type ActionItemTriggerParamsIncidentConditionEnvironment string

// ActionItemTriggerParamsIncidentConditionFunctionality defines model for ActionItemTriggerParams.IncidentConditionFunctionality.
type ActionItemTriggerParamsIncidentConditionFunctionality string

// ActionItemTriggerParamsIncidentConditionGroup defines model for ActionItemTriggerParams.IncidentConditionGroup.
type ActionItemTriggerParamsIncidentConditionGroup string

// ActionItemTriggerParamsIncidentConditionIncidentType defines model for ActionItemTriggerParams.IncidentConditionIncidentType.
type ActionItemTriggerParamsIncidentConditionIncidentType string

// ActionItemTriggerParamsIncidentConditionKind defines model for ActionItemTriggerParams.IncidentConditionKind.
type ActionItemTriggerParamsIncidentConditionKind string

// ActionItemTriggerParamsIncidentConditionService defines model for ActionItemTriggerParams.IncidentConditionService.
type ActionItemTriggerParamsIncidentConditionService string

// ActionItemTriggerParamsIncidentConditionSeverity defines model for ActionItemTriggerParams.IncidentConditionSeverity.
type ActionItemTriggerParamsIncidentConditionSeverity string

// ActionItemTriggerParamsIncidentConditionStatus defines model for ActionItemTriggerParams.IncidentConditionStatus.
type ActionItemTriggerParamsIncidentConditionStatus string

// ActionItemTriggerParamsIncidentConditionVisibility defines model for ActionItemTriggerParams.IncidentConditionVisibility.
type ActionItemTriggerParamsIncidentConditionVisibility string

// ActionItemTriggerParamsIncidentKinds defines model for ActionItemTriggerParams.IncidentKinds.
type ActionItemTriggerParamsIncidentKinds string

// ActionItemTriggerParamsIncidentStatuses defines model for ActionItemTriggerParams.IncidentStatuses.
type ActionItemTriggerParamsIncidentStatuses string

// ActionItemTriggerParamsTriggerType defines model for ActionItemTriggerParams.TriggerType.
type ActionItemTriggerParamsTriggerType string

// Actions that trigger the workflow.
type ActionItemTriggerParamsTriggers string

// AddActionItemTaskParams defines model for add_action_item_task_params.
type AddActionItemTaskParams struct {
	// The user id this action item is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The action item description.
	Description *string `json:"description,omitempty"`

	// The action item kind.
	Kind                   *string `json:"kind,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The action item priority.
	Priority AddActionItemTaskParamsPriority `json:"priority"`

	// The action item status.
	Status AddActionItemTaskParamsStatus `json:"status"`

	// The action item summary.
	Summary  string                           `json:"summary"`
	TaskType *AddActionItemTaskParamsTaskType `json:"task_type,omitempty"`
}

// The action item priority.
type AddActionItemTaskParamsPriority string

// The action item status.
type AddActionItemTaskParamsStatus string

// AddActionItemTaskParamsTaskType defines model for AddActionItemTaskParams.TaskType.
type AddActionItemTaskParamsTaskType string

// AddRoleTaskParams defines model for add_role_task_params.
type AddRoleTaskParams struct {
	// The user id this role is assigned to
	AssignedToUserId *string `json:"assigned_to_user_id,omitempty"`

	// The role id to add to the incident
	IncidentRoleId string                     `json:"incident_role_id"`
	TaskType       *AddRoleTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddRoleTaskParamsTaskType defines model for AddRoleTaskParams.TaskType.
type AddRoleTaskParamsTaskType string

// AddSlackBookmarkTaskParams defines model for add_slack_bookmark_task_params.
type AddSlackBookmarkTaskParams interface{}

// AddTeamTaskParams defines model for add_team_task_params.
type AddTeamTaskParams struct {
	// The team id.
	GroupId  string                     `json:"group_id"`
	TaskType *AddTeamTaskParamsTaskType `json:"task_type,omitempty"`
}

// AddTeamTaskParamsTaskType defines model for AddTeamTaskParams.TaskType.
type AddTeamTaskParamsTaskType string

// AddToTimelineTaskParams defines model for add_to_timeline_task_params.
type AddToTimelineTaskParams struct {
	// The timeline event description.
	Event               string `json:"event"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AddToTimelineTaskParamsTaskType `json:"task_type,omitempty"`

	// A URL for the timeline event.
	Url *string `json:"url,omitempty"`
}

// AddToTimelineTaskParamsTaskType defines model for AddToTimelineTaskParams.TaskType.
type AddToTimelineTaskParamsTaskType string

// Alert defines model for alert.
type Alert struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the alert
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`

	// Services attached to the alert
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the alert (eg: zendesk)
	Source AlertSource `json:"source"`

	// The summary of the alert
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The source of the alert (eg: zendesk)
type AlertSource string

// AlertList defines model for alert_list.
type AlertList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *AlertListDataSource `json:"source,omitempty"`
		Type   AlertListDataType    `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// The source of the alert (eg: zendesk)
type AlertListDataSource string

// AlertListDataType defines model for AlertList.Data.Type.
type AlertListDataType string

// AlertResponse defines model for alert_response.
type AlertResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/alert)
			Alert `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the alert
		Id string `json:"id"`

		// The source of the alert (eg: zendesk)
		Source *AlertResponseDataSource `json:"source,omitempty"`
		Type   AlertResponseDataType    `json:"type"`
	} `json:"data"`
}

// The source of the alert (eg: zendesk)
type AlertResponseDataSource string

// AlertResponseDataType defines model for AlertResponse.Data.Type.
type AlertResponseDataType string

// AlertTriggerParams defines model for alert_trigger_params.
type AlertTriggerParams struct {
	AlertCondition       *AlertTriggerParamsAlertCondition       `json:"alert_condition,omitempty"`
	AlertConditionLabel  *AlertTriggerParamsAlertConditionLabel  `json:"alert_condition_label,omitempty"`
	AlertConditionSource *AlertTriggerParamsAlertConditionSource `json:"alert_condition_source,omitempty"`
	TriggerType          AlertTriggerParamsTriggerType           `json:"trigger_type"`
	Triggers             *[]AlertTriggerParamsTriggers           `json:"triggers,omitempty"`
}

// AlertTriggerParamsAlertCondition defines model for AlertTriggerParams.AlertCondition.
type AlertTriggerParamsAlertCondition string

// AlertTriggerParamsAlertConditionLabel defines model for AlertTriggerParams.AlertConditionLabel.
type AlertTriggerParamsAlertConditionLabel string

// AlertTriggerParamsAlertConditionSource defines model for AlertTriggerParams.AlertConditionSource.
type AlertTriggerParamsAlertConditionSource string

// AlertTriggerParamsTriggerType defines model for AlertTriggerParams.TriggerType.
type AlertTriggerParamsTriggerType string

// Actions that trigger the workflow.
type AlertTriggerParamsTriggers string

// ArchiveSlackChannelsTaskParams defines model for archive_slack_channels_task_params.
type ArchiveSlackChannelsTaskParams struct {
	Channels []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channels"`
	TaskType *ArchiveSlackChannelsTaskParamsTaskType `json:"task_type,omitempty"`
}

// ArchiveSlackChannelsTaskParamsTaskType defines model for ArchiveSlackChannelsTaskParams.TaskType.
type ArchiveSlackChannelsTaskParamsTaskType string

// AttachDatadogDashboardsTaskParams defines model for attach_datadog_dashboards_task_params.
type AttachDatadogDashboardsTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *AttachDatadogDashboardsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AttachDatadogDashboardsTaskParamsTaskType defines model for AttachDatadogDashboardsTaskParams.TaskType.
type AttachDatadogDashboardsTaskParamsTaskType string

// AutoAssignRoleOpsgenieTaskParams defines model for auto_assign_role_opsgenie_task_params.
type AutoAssignRoleOpsgenieTaskParams struct {
	// The role id.
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleOpsgenieTaskParamsTaskType defines model for AutoAssignRoleOpsgenieTaskParams.TaskType.
type AutoAssignRoleOpsgenieTaskParamsTaskType string

// AutoAssignRolePagerdutyTaskParams defines model for auto_assign_role_pagerduty_task_params.
type AutoAssignRolePagerdutyTaskParams interface{}

// AutoAssignRoleVictorOpsTaskParams defines model for auto_assign_role_victor_ops_task_params.
type AutoAssignRoleVictorOpsTaskParams struct {
	// The role id.
	IncidentRoleId string `json:"incident_role_id"`
	Schedule       struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *AutoAssignRoleVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
}

// AutoAssignRoleVictorOpsTaskParamsTaskType defines model for AutoAssignRoleVictorOpsTaskParams.TaskType.
type AutoAssignRoleVictorOpsTaskParamsTaskType string

// CallPeopleTaskParams defines model for call_people_task_params.
type CallPeopleTaskParams struct {
	// The message to be read by text-to-voice
	Content string `json:"content"`

	// The name
	Name         string                        `json:"name"`
	PhoneNumbers []string                      `json:"phone_numbers"`
	TaskType     *CallPeopleTaskParamsTaskType `json:"task_type,omitempty"`
}

// CallPeopleTaskParamsTaskType defines model for CallPeopleTaskParams.TaskType.
type CallPeopleTaskParamsTaskType string

// CancelIncident defines model for cancel_incident.
type CancelIncident struct {
	Data struct {
		Attributes struct {
			// Why was the incident cancelled?
			CancellationMessage *string `json:"cancellation_message"`
		} `json:"attributes"`
		Type CancelIncidentDataType `json:"type"`
	} `json:"data"`
}

// CancelIncidentDataType defines model for CancelIncident.Data.Type.
type CancelIncidentDataType string

// Cause defines model for cause.
type Cause struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the cause
	Description *string `json:"description"`

	// The name of the cause
	Name string `json:"name"`

	// The slug of the cause
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// CauseList defines model for cause_list.
type CauseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string            `json:"id"`
		Type CauseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CauseListDataType defines model for CauseList.Data.Type.
type CauseListDataType string

// CauseResponse defines model for cause_response.
type CauseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/cause)
			Cause `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the cause
		Id   string                `json:"id"`
		Type CauseResponseDataType `json:"type"`
	} `json:"data"`
}

// CauseResponseDataType defines model for CauseResponse.Data.Type.
type CauseResponseDataType string

// CreateAirtableTableRecordTaskParams defines model for create_airtable_table_record_task_params.
type CreateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *CreateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateAirtableTableRecordTaskParamsTaskType defines model for CreateAirtableTableRecordTaskParams.TaskType.
type CreateAirtableTableRecordTaskParamsTaskType string

// CreateAsanaSubtaskTaskParams defines model for create_asana_subtask_task_params.
type CreateAsanaSubtaskTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`
	Notes *string `json:"notes,omitempty"`

	// The parent task id
	ParentTaskId string                                `json:"parent_task_id"`
	TaskType     *CreateAsanaSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The subtask title
	Title string `json:"title"`
}

// CreateAsanaSubtaskTaskParamsTaskType defines model for CreateAsanaSubtaskTaskParams.TaskType.
type CreateAsanaSubtaskTaskParamsTaskType string

// CreateAsanaTaskTaskParams defines model for create_asana_task_task_params.
type CreateAsanaTaskTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`
	Projects []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"projects"`
	TaskType *CreateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title     string `json:"title"`
	Workspace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"workspace"`
}

// CreateAsanaTaskTaskParamsTaskType defines model for CreateAsanaTaskTaskParams.TaskType.
type CreateAsanaTaskTaskParamsTaskType string

// CreateConfluencePageTaskParams defines model for create_confluence_page_task_params.
type CreateConfluencePageTaskParams struct {
	Ancestor *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"ancestor,omitempty"`

	// The page content
	Content *string `json:"content,omitempty"`

	// The post mortem template to use
	PostMortemTemplateId *string `json:"post_mortem_template_id,omitempty"`
	Space                struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"space"`
	TaskType *CreateConfluencePageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateConfluencePageTaskParamsTaskType defines model for CreateConfluencePageTaskParams.TaskType.
type CreateConfluencePageTaskParamsTaskType string

// CreateDatadogNotebookTaskParams defines model for create_datadog_notebook_task_params.
type CreateDatadogNotebookTaskParams struct {
	// The notebook content
	Content *string `json:"content,omitempty"`

	// The notebook kind
	Kind CreateDatadogNotebookTaskParamsKind `json:"kind"`

	// Post mortem template to use when creating notebook, if desired.
	PostMortemTemplateId *string                                  `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDatadogNotebookTaskParamsTaskType `json:"task_type,omitempty"`

	// The notebook title
	Title string `json:"title"`
}

// The notebook kind
type CreateDatadogNotebookTaskParamsKind string

// CreateDatadogNotebookTaskParamsTaskType defines model for CreateDatadogNotebookTaskParams.TaskType.
type CreateDatadogNotebookTaskParamsTaskType string

// CreateDropboxPaperPageTaskParams defines model for create_dropbox_paper_page_task_params.
type CreateDropboxPaperPageTaskParams struct {
	// The page content
	Content   *string `json:"content,omitempty"`
	Namespace *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Post mortem template to use when creating page task, if desired.
	PostMortemTemplateId *string                                   `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateDropboxPaperPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page task title
	Title string `json:"title"`
}

// CreateDropboxPaperPageTaskParamsTaskType defines model for CreateDropboxPaperPageTaskParams.TaskType.
type CreateDropboxPaperPageTaskParamsTaskType string

// CreateGithubIssueTaskParams defines model for create_github_issue_task_params.
type CreateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Repository struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"repository"`
	TaskType *CreateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title string `json:"title"`
}

// CreateGithubIssueTaskParamsTaskType defines model for CreateGithubIssueTaskParams.TaskType.
type CreateGithubIssueTaskParamsTaskType string

// CreateGoogleCalendarEventTaskParams defines model for create_google_calendar_event_task_params.
type CreateGoogleCalendarEventTaskParams struct {
	// Emails of attendees
	Attendees               []string `json:"attendees"`
	CanGuestsInviteOthers   *bool    `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool    `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool    `json:"can_guests_see_other_guests,omitempty"`

	// The days until meeting
	DaysUntilMeeting float32 `json:"days_until_meeting"`

	// The event description
	Description     string `json:"description"`
	ExcludeWeekends *bool  `json:"exclude_weekends,omitempty"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        string `json:"meeting_duration"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  string                                       `json:"summary"`
	TaskType *CreateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting string  `json:"time_of_meeting"`
	TimeZone      *string `json:"time_zone"`
}

// CreateGoogleCalendarEventTaskParamsTaskType defines model for CreateGoogleCalendarEventTaskParams.TaskType.
type CreateGoogleCalendarEventTaskParamsTaskType string

// CreateGoogleDocsPageTaskParams defines model for create_google_docs_page_task_params.
type CreateGoogleDocsPageTaskParams struct {
	// The page content
	Content *string `json:"content,omitempty"`
	Drive   *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"drive,omitempty"`
	ParentFolder *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_folder,omitempty"`

	// Page permissions JSON.
	Permissions *string `json:"permissions,omitempty"`

	// Post mortem template to use when creating page, if desired.
	PostMortemTemplateId *string                                 `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateGoogleDocsPageTaskParamsTaskType `json:"task_type,omitempty"`

	// The page title
	Title string `json:"title"`
}

// CreateGoogleDocsPageTaskParamsTaskType defines model for CreateGoogleDocsPageTaskParams.TaskType.
type CreateGoogleDocsPageTaskParamsTaskType string

// CreateGoogleMeetingTaskParams defines model for create_google_meeting_task_params.
type CreateGoogleMeetingTaskParams struct {
	// The meeting description
	Description            string `json:"description"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting summary
	Summary  string                                 `json:"summary"`
	TaskType *CreateGoogleMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateGoogleMeetingTaskParamsTaskType defines model for CreateGoogleMeetingTaskParams.TaskType.
type CreateGoogleMeetingTaskParamsTaskType string

// CreateIncidentTaskParams defines model for create_incident_task_params.
type CreateIncidentTaskParams struct {
	EnvironmentIds   *[]string `json:"environment_ids,omitempty"`
	FunctionalityIds *[]string `json:"functionality_ids,omitempty"`
	GroupIds         *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds  *[]string `json:"incident_type_ids,omitempty"`
	Private          *bool     `json:"private,omitempty"`
	ServiceIds       *[]string `json:"service_ids,omitempty"`
	SeverityId       *string   `json:"severity_id,omitempty"`

	// The incident summary
	Summary  *string                           `json:"summary,omitempty"`
	TaskType *CreateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateIncidentTaskParamsTaskType defines model for CreateIncidentTaskParams.TaskType.
type CreateIncidentTaskParamsTaskType string

// CreateJiraIssueTaskParams defines model for create_jira_issue_task_params.
type CreateJiraIssueTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The due date.
	DueDate *string `json:"due_date,omitempty"`

	// The issue type id and display name.
	IssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"issue_type"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *CreateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateJiraIssueTaskParamsTaskType defines model for CreateJiraIssueTaskParams.TaskType.
type CreateJiraIssueTaskParamsTaskType string

// CreateJiraSubtaskTaskParams defines model for create_jira_subtask_task_params.
type CreateJiraSubtaskTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The due date.
	DueDate *string `json:"due_date,omitempty"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The parent issue.
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`

	// The issue type id and display name.
	SubtaskIssueType struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"subtask_issue_type"`
	TaskType *CreateJiraSubtaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateJiraSubtaskTaskParamsTaskType defines model for CreateJiraSubtaskTaskParams.TaskType.
type CreateJiraSubtaskTaskParamsTaskType string

// CreateLinearIssueTaskParams defines model for create_linear_issue_task_params.
type CreateLinearIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The team id and display name.
	Team struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team"`

	// The issue title.
	Title string `json:"title"`
}

// CreateLinearIssueTaskParamsTaskType defines model for CreateLinearIssueTaskParams.TaskType.
type CreateLinearIssueTaskParamsTaskType string

// CreateLinearSubtaskIssueTaskParams defines model for create_linear_subtask_issue_task_params.
type CreateLinearSubtaskIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The parent issue.
	ParentIssueId string `json:"parent_issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state"`
	TaskType *CreateLinearSubtaskIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title string `json:"title"`
}

// CreateLinearSubtaskIssueTaskParamsTaskType defines model for CreateLinearSubtaskIssueTaskParams.TaskType.
type CreateLinearSubtaskIssueTaskParamsTaskType string

// CreateMicrosoftTeamsMeetingTaskParams defines model for create_microsoft_teams_meeting_task_params.
type CreateMicrosoftTeamsMeetingTaskParams struct {
	// The meeting name
	Name                   string `json:"name"`
	PostToIncidentTimeline *bool  `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// The meeting subject
	Subject  string                                         `json:"subject"`
	TaskType *CreateMicrosoftTeamsMeetingTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateMicrosoftTeamsMeetingTaskParamsTaskType defines model for CreateMicrosoftTeamsMeetingTaskParams.TaskType.
type CreateMicrosoftTeamsMeetingTaskParamsTaskType string

// CreateNotionPageTaskParams defines model for create_notion_page_task_params.
type CreateNotionPageTaskParams struct {
	// The parent page id and display name.
	ParentPage struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"parent_page"`

	// Post mortem template to use when creating page task, if desired.
	PostMortemTemplateId *string                             `json:"post_mortem_template_id,omitempty"`
	TaskType             *CreateNotionPageTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateNotionPageTaskParamsTaskType defines model for CreateNotionPageTaskParams.TaskType.
type CreateNotionPageTaskParamsTaskType string

// CreateServiceNowIncidentTaskParams defines model for create_service_now_incident_task_params.
type CreateServiceNowIncidentTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *CreateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateServiceNowIncidentTaskParamsTaskType defines model for CreateServiceNowIncidentTaskParams.TaskType.
type CreateServiceNowIncidentTaskParamsTaskType string

// CreateShortcutStoryTaskParams defines model for create_shortcut_story_task_params.
type CreateShortcutStoryTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The story due date (ISO8601 format).
	DueDate *string                           `json:"due_date,omitempty"`
	Kind    CreateShortcutStoryTaskParamsKind `json:"kind"`

	// The story labels.
	Labels *string `json:"labels,omitempty"`

	// The project id and display name.
	Project struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"project"`
	TaskType *CreateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title string `json:"title"`
}

// CreateShortcutStoryTaskParamsKind defines model for CreateShortcutStoryTaskParams.Kind.
type CreateShortcutStoryTaskParamsKind string

// CreateShortcutStoryTaskParamsTaskType defines model for CreateShortcutStoryTaskParams.TaskType.
type CreateShortcutStoryTaskParamsTaskType string

// CreateShortcutTaskTaskParams defines model for create_shortcut_task_task_params.
type CreateShortcutTaskTaskParams struct {
	// The completion id and display name.
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description string `json:"description"`

	// The parent story
	ParentStoryId string                                `json:"parent_story_id"`
	TaskType      *CreateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateShortcutTaskTaskParamsTaskType defines model for CreateShortcutTaskTaskParams.TaskType.
type CreateShortcutTaskTaskParamsTaskType string

// CreateTrelloCardTaskParams defines model for create_trello_card_task_params.
type CreateTrelloCardTaskParams struct {
	// The archivation id and display name.
	Archivation *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation,omitempty"`

	// The board id and display name.
	Board struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date (ISO8601 format)
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name.
	List struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list"`
	TaskType *CreateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title string `json:"title"`
}

// CreateTrelloCardTaskParamsTaskType defines model for CreateTrelloCardTaskParams.TaskType.
type CreateTrelloCardTaskParamsTaskType string

// CreateWebexMeetingTaskParams defines model for create_webex_meeting_task_params.
type CreateWebexMeetingTaskParams struct {
	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateWebexMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateWebexMeetingTaskParamsTaskType defines model for CreateWebexMeetingTaskParams.TaskType.
type CreateWebexMeetingTaskParamsTaskType string

// CreateZendeskTicketTaskParams defines model for create_zendesk_ticket_task_params.
type CreateZendeskTicketTaskParams struct {
	// The ticket comment.
	Comment *string `json:"comment,omitempty"`

	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`
	Kind CreateZendeskTicketTaskParamsKind `json:"kind"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject.
	Subject string `json:"subject"`

	// The ticket tags.
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *CreateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`
}

// CreateZendeskTicketTaskParamsKind defines model for CreateZendeskTicketTaskParams.Kind.
type CreateZendeskTicketTaskParamsKind string

// CreateZendeskTicketTaskParamsTaskType defines model for CreateZendeskTicketTaskParams.TaskType.
type CreateZendeskTicketTaskParamsTaskType string

// CreateZoomMeetingTaskParams defines model for create_zoom_meeting_task_params.
type CreateZoomMeetingTaskParams struct {
	AutoRecording *CreateZoomMeetingTaskParamsAutoRecording `json:"auto_recording,omitempty"`

	// The email to use if creating as email.
	CreateAsEmail *string `json:"create_as_email,omitempty"`

	// The meeting password
	Password               *string `json:"password,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	PostToSlackChannels    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *CreateZoomMeetingTaskParamsTaskType `json:"task_type,omitempty"`

	// The meeting topic
	Topic string `json:"topic"`
}

// CreateZoomMeetingTaskParamsAutoRecording defines model for CreateZoomMeetingTaskParams.AutoRecording.
type CreateZoomMeetingTaskParamsAutoRecording string

// CreateZoomMeetingTaskParamsTaskType defines model for CreateZoomMeetingTaskParams.TaskType.
type CreateZoomMeetingTaskParamsTaskType string

// CustomField defines model for custom_field.
type CustomField struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the custom_field
	Description *string `json:"description"`

	// The name of the custom_field
	Label string `json:"label"`

	// The position of the custom_field
	Position float32                `json:"position"`
	Required *[]CustomFieldRequired `json:"required"`
	Shown    []CustomFieldShown     `json:"shown"`

	// The slug of the custom_field
	Slug string `json:"slug"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Where the custom_field is required
type CustomFieldRequired string

// Where the custom_field is shown
type CustomFieldShown string

// CustomFieldList defines model for custom_field_list.
type CustomFieldList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field)
			CustomField `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                  `json:"id"`
		Type CustomFieldListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CustomFieldListDataType defines model for CustomFieldList.Data.Type.
type CustomFieldListDataType string

// CustomFieldOption defines model for custom_field_option.
type CustomFieldOption struct {
	// The hex color of the custom_field_option
	Color string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The ID of the parent custom field
	CustomFieldId *float32 `json:"custom_field_id,omitempty"`

	// The position of the custom_field_option
	Position float32 `json:"position"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The value of the custom_field_option
	Value string `json:"value"`
}

// CustomFieldOptionList defines model for custom_field_option_list.
type CustomFieldOptionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field_option)
			CustomFieldOption `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                        `json:"id"`
		Type CustomFieldOptionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// CustomFieldOptionListDataType defines model for CustomFieldOptionList.Data.Type.
type CustomFieldOptionListDataType string

// CustomFieldOptionResponse defines model for custom_field_option_response.
type CustomFieldOptionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field_option)
			CustomFieldOption `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field_option
		Id   string                            `json:"id"`
		Type CustomFieldOptionResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldOptionResponseDataType defines model for CustomFieldOptionResponse.Data.Type.
type CustomFieldOptionResponseDataType string

// CustomFieldResponse defines model for custom_field_response.
type CustomFieldResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/custom_field)
			CustomField `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the custom_field
		Id   string                      `json:"id"`
		Type CustomFieldResponseDataType `json:"type"`
	} `json:"data"`
}

// CustomFieldResponseDataType defines model for CustomFieldResponse.Data.Type.
type CustomFieldResponseDataType string

// Environment defines model for environment.
type Environment struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the environment
	Description *string `json:"description"`

	// The name of the environment
	Name string `json:"name"`

	// The slug of the environment
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// EnvironmentList defines model for environment_list.
type EnvironmentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                  `json:"id"`
		Type EnvironmentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// EnvironmentListDataType defines model for EnvironmentList.Data.Type.
type EnvironmentListDataType string

// EnvironmentResponse defines model for environment_response.
type EnvironmentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/environment)
			Environment `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the environment
		Id   string                      `json:"id"`
		Type EnvironmentResponseDataType `json:"type"`
	} `json:"data"`
}

// EnvironmentResponseDataType defines model for EnvironmentResponse.Data.Type.
type EnvironmentResponseDataType string

// ErrorsList defines model for errors_list.
type ErrorsList struct {
	Errors *[]struct {
		Code   *string `json:"code"`
		Detail *string `json:"detail"`
		Status string  `json:"status"`
		Title  string  `json:"title"`
	} `json:"errors,omitempty"`
}

// Functionality defines model for functionality.
type Functionality struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the functionality
	Description *string `json:"description"`

	// Environments associated with this service
	EnvironmentIds *[]interface{} `json:"environment_ids"`

	// The name of the functionality
	Name string `json:"name"`

	// Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// The public description of the functionality
	PublicDescription *string `json:"public_description"`

	// The slug of the functionality
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// FunctionalityList defines model for functionality_list.
type FunctionalityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                    `json:"id"`
		Type FunctionalityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// FunctionalityListDataType defines model for FunctionalityList.Data.Type.
type FunctionalityListDataType string

// FunctionalityResponse defines model for functionality_response.
type FunctionalityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/functionality)
			Functionality `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the functionality
		Id   string                        `json:"id"`
		Type FunctionalityResponseDataType `json:"type"`
	} `json:"data"`
}

// FunctionalityResponseDataType defines model for FunctionalityResponse.Data.Type.
type FunctionalityResponseDataType string

// GetGithubCommitsTaskParams defines model for get_github_commits_task_params.
type GetGithubCommitsTaskParams interface{}

// GetGitlabCommitsTaskParams defines model for get_gitlab_commits_task_params.
type GetGitlabCommitsTaskParams interface{}

// GetPulsesTaskParams defines model for get_pulses_task_params.
type GetPulsesTaskParams struct {
	EnvironmentIds *[]string `json:"environment_ids,omitempty"`
	Labels         *[]string `json:"labels,omitempty"`

	// How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
	PastDuration        string `json:"past_duration"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Refs       *[]string                    `json:"refs,omitempty"`
	ServiceIds *[]string                    `json:"service_ids,omitempty"`
	Sources    *[]string                    `json:"sources,omitempty"`
	TaskType   *GetPulsesTaskParamsTaskType `json:"task_type,omitempty"`
}

// GetPulsesTaskParamsTaskType defines model for GetPulsesTaskParams.TaskType.
type GetPulsesTaskParamsTaskType string

// HttpClientTaskParams defines model for http_client_task_params.
type HttpClientTaskParams struct {
	// HTTP body.
	Body     *string `json:"body,omitempty"`
	EventUrl *string `json:"event_url,omitempty"`

	// JSON map of HTTP headers.
	Headers *string `json:"headers,omitempty"`

	// HTTP method.
	Method *HttpClientTaskParamsMethod `json:"method,omitempty"`

	// JSON map of HTTP query parameters.
	Params              *string `json:"params,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`

	// HTTP status code.
	SucceedOnStatus string                        `json:"succeed_on_status"`
	TaskType        *HttpClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url             *string                       `json:"url,omitempty"`
}

// HTTP method.
type HttpClientTaskParamsMethod string

// HttpClientTaskParamsTaskType defines model for HttpClientTaskParams.TaskType.
type HttpClientTaskParamsTaskType string

// Incident defines model for incident.
type Incident struct {
	// Date of acknowledgment
	AcknowledgedAt *string `json:"acknowledged_at"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of detection
	DetectedAt *string `json:"detected_at"`

	// The Environment ID's to attach to the incident
	EnvironmentIds *[]string `json:"environment_ids"`

	// The Functionality ID's to attach to the incident
	FunctionalityIds *[]string `json:"functionality_ids"`

	// The Team ID's to attach to the incident
	GroupIds *[]string `json:"group_ids"`

	// The Environment ID's to attach to the incident
	IncidentTypesIds *[]string `json:"incident_types_ids"`

	// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
	Labels *map[string]interface{} `json:"labels"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// The Service ID's to attach to the incident
	ServiceIds *[]string `json:"service_ids"`

	// The Severity ID to attach to the incident
	SeverityId *string `json:"severity_id"`

	// Date of start
	StartedAt *string `json:"started_at"`

	// The summary of the incident
	Summary *string `json:"summary"`

	// The title of the incident
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentActionItem defines model for incident_action_item.
type IncidentActionItem struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident action item
	Description *string `json:"description"`

	// The kind of the incident action item
	Kind *IncidentActionItemKind `json:"kind,omitempty"`

	// The priority of the incident action item
	Priority *IncidentActionItemPriority `json:"priority,omitempty"`

	// The status of incident the action item
	Status *IncidentActionItemStatus `json:"status,omitempty"`

	// The summary of the incident action item
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The kind of the incident action item
type IncidentActionItemKind string

// The priority of the incident action item
type IncidentActionItemPriority string

// The status of incident the action item
type IncidentActionItemStatus string

// IncidentActionItemList defines model for incident_action_item_list.
type IncidentActionItemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                         `json:"id"`
		Type IncidentActionItemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentActionItemListDataType defines model for IncidentActionItemList.Data.Type.
type IncidentActionItemListDataType string

// IncidentActionItemResponse defines model for incident_action_item_response.
type IncidentActionItemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_action_item)
			IncidentActionItem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident action item
		Id   string                             `json:"id"`
		Type IncidentActionItemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentActionItemResponseDataType defines model for IncidentActionItemResponse.Data.Type.
type IncidentActionItemResponseDataType string

// IncidentCustomFieldSelection defines model for incident_custom_field_selection.
type IncidentCustomFieldSelection struct {
	SelectedOptionIds []float32 `json:"selected_option_ids"`

	// The value of the incident_custom_field_selection
	Value *string `json:"value"`
}

// IncidentCustomFieldSelectionList defines model for incident_custom_field_selection_list.
type IncidentCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_custom_field_selection)
			IncidentCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                   `json:"id"`
		Type IncidentCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentCustomFieldSelectionListDataType defines model for IncidentCustomFieldSelectionList.Data.Type.
type IncidentCustomFieldSelectionListDataType string

// IncidentCustomFieldSelectionResponse defines model for incident_custom_field_selection_response.
type IncidentCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_custom_field_selection)
			IncidentCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident_custom_field_selection
		Id   string                                       `json:"id"`
		Type IncidentCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentCustomFieldSelectionResponseDataType defines model for IncidentCustomFieldSelectionResponse.Data.Type.
type IncidentCustomFieldSelectionResponseDataType string

// IncidentEvent defines model for incident_event.
type IncidentEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Date of occurence
	OccurredAt string `json:"occurred_at"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The visibility of the incident action item
	Visibility *IncidentEventVisibility `json:"visibility,omitempty"`
}

// The visibility of the incident action item
type IncidentEventVisibility string

// IncidentEventList defines model for incident_event_list.
type IncidentEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                    `json:"id"`
		Type IncidentEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentEventListDataType defines model for IncidentEventList.Data.Type.
type IncidentEventListDataType string

// IncidentEventResponse defines model for incident_event_response.
type IncidentEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_event)
			IncidentEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                        `json:"id"`
		Type IncidentEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentEventResponseDataType defines model for IncidentEventResponse.Data.Type.
type IncidentEventResponseDataType string

// IncidentFeedback defines model for incident_feedback.
type IncidentFeedback struct {
	// Is the feedback anonymous?
	Anonymous bool `json:"anonymous"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The feedback of the incident feedback
	Feedback string `json:"feedback"`

	// The rating of the incident feedback
	Rating IncidentFeedbackRating `json:"rating"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The rating of the incident feedback
type IncidentFeedbackRating int

// IncidentFeedbackList defines model for incident_feedback_list.
type IncidentFeedbackList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_feedback)
			IncidentFeedback `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                       `json:"id"`
		Type IncidentFeedbackListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentFeedbackListDataType defines model for IncidentFeedbackList.Data.Type.
type IncidentFeedbackListDataType string

// IncidentFeedbackResponse defines model for incident_feedback_response.
type IncidentFeedbackResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_feedback)
			IncidentFeedback `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident feedback
		Id   string                           `json:"id"`
		Type IncidentFeedbackResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentFeedbackResponseDataType defines model for IncidentFeedbackResponse.Data.Type.
type IncidentFeedbackResponseDataType string

// IncidentList defines model for incident_list.
type IncidentList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string               `json:"id"`
		Type IncidentListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentListDataType defines model for IncidentList.Data.Type.
type IncidentListDataType string

// IncidentPostMortem defines model for incident_post_mortem.
type IncidentPostMortem struct {
	// The content of the incident postmortem (Only if internal)
	Content *string `json:"content"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// Date of mitigation
	MitigatedAt *string `json:"mitigated_at"`

	// Date of resolution
	ResolvedAt *string `json:"resolved_at"`

	// Show alerts attached to the incident
	ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

	// Show services impacted of the incident postmortem
	ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

	// Show groups impacted of the incident postmortem
	ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

	// Show functionalities impacted of the incident postmortem
	ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

	// Show events timeline of the incident postmortem
	ShowTimeline *bool `json:"show_timeline,omitempty"`

	// Show action items in the timeline of the incident postmortem
	ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

	// Show workflow events in the timeline of the incident postmortem
	ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

	// Show tasks in the timeline of the incident postmortem
	ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

	// Show trail events in the timeline of the incident postmortem
	ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

	// Date of started at
	StartedAt *string `json:"started_at"`

	// The status of the incident postmortem
	Status *IncidentPostMortemStatus `json:"status,omitempty"`

	// The title of the incident postmortem
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The url to the incident postmortem
	Url *string `json:"url,omitempty"`
}

// The status of the incident postmortem
type IncidentPostMortemStatus string

// IncidentPostMortemList defines model for incident_post_mortem_list.
type IncidentPostMortemList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                         `json:"id"`
		Type IncidentPostMortemListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentPostMortemListDataType defines model for IncidentPostMortemList.Data.Type.
type IncidentPostMortemListDataType string

// IncidentPostMortemResponse defines model for incident_post_mortem_response.
type IncidentPostMortemResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_post_mortem)
			IncidentPostMortem `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident postmortem
		Id   string                             `json:"id"`
		Type IncidentPostMortemResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentPostMortemResponseDataType defines model for IncidentPostMortemResponse.Data.Type.
type IncidentPostMortemResponseDataType string

// IncidentResponse defines model for incident_response.
type IncidentResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident)
			Incident `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident
		Id   string                   `json:"id"`
		Type IncidentResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentResponseDataType defines model for IncidentResponse.Data.Type.
type IncidentResponseDataType string

// IncidentRole defines model for incident_role.
type IncidentRole struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident role
	Description *string `json:"description"`

	// The name of the incident role
	Name string `json:"name"`

	// The slug of the incident role
	Slug *string `json:"slug,omitempty"`

	// The summary of the incident role
	Summary *string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentRoleList defines model for incident_role_list.
type IncidentRoleList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                   `json:"id"`
		Type IncidentRoleListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleListDataType defines model for IncidentRoleList.Data.Type.
type IncidentRoleListDataType string

// IncidentRoleResponse defines model for incident_role_response.
type IncidentRoleResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role)
			IncidentRole `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident role
		Id   string                       `json:"id"`
		Type IncidentRoleResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleResponseDataType defines model for IncidentRoleResponse.Data.Type.
type IncidentRoleResponseDataType string

// IncidentRoleTask defines model for incident_role_task.
type IncidentRoleTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The priority of the incident task
	Priority *IncidentRoleTaskPriority `json:"priority,omitempty"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The priority of the incident task
type IncidentRoleTaskPriority string

// IncidentRoleTaskList defines model for incident_role_task_list.
type IncidentRoleTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role_task)
			IncidentRoleTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type IncidentRoleTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentRoleTaskListDataType defines model for IncidentRoleTaskList.Data.Type.
type IncidentRoleTaskListDataType string

// IncidentRoleTaskResponse defines model for incident_role_task_response.
type IncidentRoleTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_role_task)
			IncidentRoleTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                           `json:"id"`
		Type IncidentRoleTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentRoleTaskResponseDataType defines model for IncidentRoleTaskResponse.Data.Type.
type IncidentRoleTaskResponseDataType string

// IncidentStatusPageEvent defines model for incident_status_page_event.
type IncidentStatusPageEvent struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The summary of the incident event
	Event string `json:"event"`

	// Notify all status pages subscribers
	NotifySubscribers *bool `json:"notify_subscribers,omitempty"`

	// Date of start
	StartedAt string `json:"started_at"`

	// The status of the incident event
	Status *IncidentStatusPageEventStatus `json:"status,omitempty"`

	// The status page ids to post the event
	StatusPageIds *[]string `json:"status_page_ids,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The status of the incident event
type IncidentStatusPageEventStatus string

// IncidentStatusPageEventList defines model for incident_status_page_event_list.
type IncidentStatusPageEventList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_status_page_event)
			IncidentStatusPageEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                              `json:"id"`
		Type IncidentStatusPageEventListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentStatusPageEventListDataType defines model for IncidentStatusPageEventList.Data.Type.
type IncidentStatusPageEventListDataType string

// IncidentStatusPageEventResponse defines model for incident_status_page_event_response.
type IncidentStatusPageEventResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_status_page_event)
			IncidentStatusPageEvent `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident event
		Id   string                                  `json:"id"`
		Type IncidentStatusPageEventResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentStatusPageEventResponseDataType defines model for IncidentStatusPageEventResponse.Data.Type.
type IncidentStatusPageEventResponseDataType string

// IncidentTriggerParams defines model for incident_trigger_params.
type IncidentTriggerParams struct {
	IncidentCondition               *IncidentTriggerParamsIncidentCondition              `json:"incident_condition,omitempty"`
	IncidentConditionAcknowledgedAt *interface{}                                         `json:"incident_condition_acknowledged_at,omitempty"`
	IncidentConditionDetectedAt     *interface{}                                         `json:"incident_condition_detected_at,omitempty"`
	IncidentConditionEnvironment    *IncidentTriggerParamsIncidentConditionEnvironment   `json:"incident_condition_environment,omitempty"`
	IncidentConditionFunctionality  *IncidentTriggerParamsIncidentConditionFunctionality `json:"incident_condition_functionality,omitempty"`
	IncidentConditionGroup          *IncidentTriggerParamsIncidentConditionGroup         `json:"incident_condition_group,omitempty"`
	IncidentConditionIncidentRoles  *interface{}                                         `json:"incident_condition_incident_roles,omitempty"`
	IncidentConditionIncidentType   *IncidentTriggerParamsIncidentConditionIncidentType  `json:"incident_condition_incident_type,omitempty"`
	IncidentConditionKind           *IncidentTriggerParamsIncidentConditionKind          `json:"incident_condition_kind,omitempty"`
	IncidentConditionMitigatedAt    *interface{}                                         `json:"incident_condition_mitigated_at,omitempty"`
	IncidentConditionResolvedAt     *interface{}                                         `json:"incident_condition_resolved_at,omitempty"`
	IncidentConditionService        *IncidentTriggerParamsIncidentConditionService       `json:"incident_condition_service,omitempty"`
	IncidentConditionSeverity       *IncidentTriggerParamsIncidentConditionSeverity      `json:"incident_condition_severity,omitempty"`
	IncidentConditionStartedAt      *interface{}                                         `json:"incident_condition_started_at,omitempty"`
	IncidentConditionStatus         *IncidentTriggerParamsIncidentConditionStatus        `json:"incident_condition_status,omitempty"`
	IncidentConditionSummary        *interface{}                                         `json:"incident_condition_summary,omitempty"`
	IncidentConditionVisibility     *IncidentTriggerParamsIncidentConditionVisibility    `json:"incident_condition_visibility,omitempty"`
	IncidentConditionalInactivity   *interface{}                                         `json:"incident_conditional_inactivity,omitempty"`
	IncidentKinds                   *[]IncidentTriggerParamsIncidentKinds                `json:"incident_kinds,omitempty"`
	IncidentStatuses                *[]IncidentTriggerParamsIncidentStatuses             `json:"incident_statuses,omitempty"`
	IncidentVisibilities            *[]bool                                              `json:"incident_visibilities,omitempty"`
	TriggerType                     IncidentTriggerParamsTriggerType                     `json:"trigger_type"`
	Triggers                        *[]IncidentTriggerParamsTriggers                     `json:"triggers,omitempty"`
}

// IncidentTriggerParamsIncidentCondition defines model for IncidentTriggerParams.IncidentCondition.
type IncidentTriggerParamsIncidentCondition string

// IncidentTriggerParamsIncidentConditionEnvironment defines model for IncidentTriggerParams.IncidentConditionEnvironment.
type IncidentTriggerParamsIncidentConditionEnvironment string

// IncidentTriggerParamsIncidentConditionFunctionality defines model for IncidentTriggerParams.IncidentConditionFunctionality.
type IncidentTriggerParamsIncidentConditionFunctionality string

// IncidentTriggerParamsIncidentConditionGroup defines model for IncidentTriggerParams.IncidentConditionGroup.
type IncidentTriggerParamsIncidentConditionGroup string

// IncidentTriggerParamsIncidentConditionIncidentType defines model for IncidentTriggerParams.IncidentConditionIncidentType.
type IncidentTriggerParamsIncidentConditionIncidentType string

// IncidentTriggerParamsIncidentConditionKind defines model for IncidentTriggerParams.IncidentConditionKind.
type IncidentTriggerParamsIncidentConditionKind string

// IncidentTriggerParamsIncidentConditionService defines model for IncidentTriggerParams.IncidentConditionService.
type IncidentTriggerParamsIncidentConditionService string

// IncidentTriggerParamsIncidentConditionSeverity defines model for IncidentTriggerParams.IncidentConditionSeverity.
type IncidentTriggerParamsIncidentConditionSeverity string

// IncidentTriggerParamsIncidentConditionStatus defines model for IncidentTriggerParams.IncidentConditionStatus.
type IncidentTriggerParamsIncidentConditionStatus string

// IncidentTriggerParamsIncidentConditionVisibility defines model for IncidentTriggerParams.IncidentConditionVisibility.
type IncidentTriggerParamsIncidentConditionVisibility string

// IncidentTriggerParamsIncidentKinds defines model for IncidentTriggerParams.IncidentKinds.
type IncidentTriggerParamsIncidentKinds string

// IncidentTriggerParamsIncidentStatuses defines model for IncidentTriggerParams.IncidentStatuses.
type IncidentTriggerParamsIncidentStatuses string

// IncidentTriggerParamsTriggerType defines model for IncidentTriggerParams.TriggerType.
type IncidentTriggerParamsTriggerType string

// Actions that trigger the workflow.
type IncidentTriggerParamsTriggers string

// IncidentType defines model for incident_type.
type IncidentType struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the incident type
	Description *string `json:"description"`

	// The name of the incident type
	Name string `json:"name"`

	// The slug of the incident type
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// IncidentTypeList defines model for incident_type_list.
type IncidentTypeList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                   `json:"id"`
		Type IncidentTypeListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// IncidentTypeListDataType defines model for IncidentTypeList.Data.Type.
type IncidentTypeListDataType string

// IncidentTypeResponse defines model for incident_type_response.
type IncidentTypeResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/incident_type)
			IncidentType `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident type
		Id   string                       `json:"id"`
		Type IncidentTypeResponseDataType `json:"type"`
	} `json:"data"`
}

// IncidentTypeResponseDataType defines model for IncidentTypeResponse.Data.Type.
type IncidentTypeResponseDataType string

// IncidentsChartResponse defines model for incidents_chart_response.
type IncidentsChartResponse map[string]interface{}

// InviteToSlackChannelOpsgenieTaskParams defines model for invite_to_slack_channel_opsgenie_task_params.
type InviteToSlackChannelOpsgenieTaskParams struct {
	Channels *[]string `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelOpsgenieTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelOpsgenieTaskParamsTaskType defines model for InviteToSlackChannelOpsgenieTaskParams.TaskType.
type InviteToSlackChannelOpsgenieTaskParamsTaskType string

// InviteToSlackChannelPagerdutyTaskParams defines model for invite_to_slack_channel_pagerduty_task_params.
type InviteToSlackChannelPagerdutyTaskParams interface{}

// InviteToSlackChannelTaskParams defines model for invite_to_slack_channel_task_params.
type InviteToSlackChannelTaskParams interface{}

// InviteToSlackChannelVictorOpsTaskParams defines model for invite_to_slack_channel_victor_ops_task_params.
type InviteToSlackChannelVictorOpsTaskParams struct {
	Channels *[]string `json:"channels,omitempty"`
	Schedule struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"schedule"`
	TaskType *InviteToSlackChannelVictorOpsTaskParamsTaskType `json:"task_type,omitempty"`
}

// InviteToSlackChannelVictorOpsTaskParamsTaskType defines model for InviteToSlackChannelVictorOpsTaskParams.TaskType.
type InviteToSlackChannelVictorOpsTaskParamsTaskType string

// Links defines model for links.
type Links struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// MitigateIncident defines model for mitigate_incident.
type MitigateIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident mitigated?
			MitigationMessage *string `json:"mitigation_message"`
		} `json:"attributes"`
		Type MitigateIncidentDataType `json:"type"`
	} `json:"data"`
}

// MitigateIncidentDataType defines model for MitigateIncident.Data.Type.
type MitigateIncidentDataType string

// NewAlert defines model for new_alert.
type NewAlert struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the alert (eg: zendesk)
			Source *NewAlertDataAttributesSource `json:"source,omitempty"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewAlertDataType `json:"type"`
	} `json:"data"`
}

// The source of the alert (eg: zendesk)
type NewAlertDataAttributesSource string

// NewAlertDataType defines model for NewAlert.Data.Type.
type NewAlertDataType string

// NewCause defines model for new_cause.
type NewCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewCauseDataType `json:"type"`
	} `json:"data"`
}

// NewCauseDataType defines model for NewCause.Data.Type.
type NewCauseDataType string

// NewCustomField defines model for new_custom_field.
type NewCustomField struct {
	Data struct {
		Attributes struct {
			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label string `json:"label"`

			// The position of the custom_field
			Position *float32                                `json:"position,omitempty"`
			Required *[]NewCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]NewCustomFieldDataAttributesShown    `json:"shown,omitempty"`
		} `json:"attributes"`
		Type NewCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type NewCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type NewCustomFieldDataAttributesShown string

// NewCustomFieldDataType defines model for NewCustomField.Data.Type.
type NewCustomFieldDataType string

// NewCustomFieldOption defines model for new_custom_field_option.
type NewCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color *string `json:"color,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value string `json:"value"`
		} `json:"attributes"`
		Type NewCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// NewCustomFieldOptionDataType defines model for NewCustomFieldOption.Data.Type.
type NewCustomFieldOptionDataType string

// NewEnvironment defines model for new_environment.
type NewEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// NewEnvironmentDataType defines model for NewEnvironment.Data.Type.
type NewEnvironmentDataType string

// NewFunctionality defines model for new_functionality.
type NewFunctionality struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The name of the functionality
			Name string `json:"name"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`
		} `json:"attributes"`
		Type NewFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// NewFunctionalityDataType defines model for NewFunctionality.Data.Type.
type NewFunctionalityDataType string

// NewIncident defines model for new_incident.
type NewIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Create an incident on Slack as well (if integration enabled)
			CreateOnSlack *bool `json:"create_on_slack"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// The kind of the incident
			Kind *NewIncidentDataAttributesKind `json:"kind,omitempty"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Emails you want to notify
			NotifyEmails *[]string `json:"notify_emails"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// The slug of the incident
			Slug *string `json:"slug,omitempty"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The status of the incident event
			Status *NewIncidentDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title string `json:"title"`

			// The url to the incident
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`
		Type NewIncidentDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident
type NewIncidentDataAttributesKind string

// The status of the incident event
type NewIncidentDataAttributesStatus string

// NewIncidentDataType defines model for NewIncident.Data.Type.
type NewIncidentDataType string

// NewIncidentActionItem defines model for new_incident_action_item.
type NewIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the incident action item
			Description *string `json:"description"`

			// The kind of the incident action item
			Kind *NewIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the incident action item
			Priority *NewIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *NewIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident action item
type NewIncidentActionItemDataAttributesKind string

// The priority of the incident action item
type NewIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type NewIncidentActionItemDataAttributesStatus string

// NewIncidentActionItemDataType defines model for NewIncidentActionItem.Data.Type.
type NewIncidentActionItemDataType string

// NewIncidentCustomFieldSelection defines model for new_incident_custom_field_selection.
type NewIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId     float32    `json:"custom_field_id"`
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type NewIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentCustomFieldSelectionDataType defines model for NewIncidentCustomFieldSelection.Data.Type.
type NewIncidentCustomFieldSelectionDataType string

// NewIncidentEvent defines model for new_incident_event.
type NewIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// The visibility of the incident action item
			Visibility *NewIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type NewIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type NewIncidentEventDataAttributesVisibility string

// NewIncidentEventDataType defines model for NewIncidentEvent.Data.Type.
type NewIncidentEventDataType string

// NewIncidentFeedback defines model for new_incident_feedback.
type NewIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback string `json:"feedback"`

			// The rating of the incident feedback
			Rating NewIncidentFeedbackDataAttributesRating `json:"rating"`
		} `json:"attributes"`
		Type NewIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type NewIncidentFeedbackDataAttributesRating int

// NewIncidentFeedbackDataType defines model for NewIncidentFeedback.Data.Type.
type NewIncidentFeedbackDataType string

// NewIncidentRole defines model for new_incident_role.
type NewIncidentRole struct {
	Data struct {
		Attributes struct {
			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name string `json:"name"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type NewIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentRoleDataType defines model for NewIncidentRole.Data.Type.
type NewIncidentRoleDataType string

// NewIncidentRoleTask defines model for new_incident_role_task.
type NewIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *NewIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type NewIncidentRoleTaskDataAttributesPriority string

// NewIncidentRoleTaskDataType defines model for NewIncidentRoleTask.Data.Type.
type NewIncidentRoleTaskDataType string

// NewIncidentStatusPageEvent defines model for new_incident_status_page_event.
type NewIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event string `json:"event"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// The status of the incident event
			Status *NewIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// The status page ids to post the event
			StatusPageIds *[]string `json:"status_page_ids,omitempty"`
		} `json:"attributes"`
		Type NewIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type NewIncidentStatusPageEventDataAttributesStatus string

// NewIncidentStatusPageEventDataType defines model for NewIncidentStatusPageEvent.Data.Type.
type NewIncidentStatusPageEventDataType string

// NewIncidentType defines model for new_incident_type.
type NewIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// NewIncidentTypeDataType defines model for NewIncidentType.Data.Type.
type NewIncidentTypeDataType string

// NewPlaybook defines model for new_playbook.
type NewPlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewPlaybookDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookDataType defines model for NewPlaybook.Data.Type.
type NewPlaybookDataType string

// NewPlaybookTask defines model for new_playbook_task.
type NewPlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task string `json:"task"`
		} `json:"attributes"`
		Type NewPlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// NewPlaybookTaskDataType defines model for NewPlaybookTask.Data.Type.
type NewPlaybookTaskDataType string

// NewPostMortemTemplate defines model for new_post_mortem_template.
type NewPostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewPostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// NewPostMortemTemplateDataType defines model for NewPostMortemTemplate.Data.Type.
type NewPostMortemTemplateDataType string

// NewPulse defines model for new_pulse.
type NewPulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary string `json:"summary"`
		} `json:"attributes"`
		Type NewPulseDataType `json:"type"`
	} `json:"data"`
}

// NewPulseDataType defines model for NewPulse.Data.Type.
type NewPulseDataType string

// NewService defines model for new_service.
type NewService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name string `json:"name"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceDependencyIds *[]interface{} `json:"service_dependency_ids"`
		} `json:"attributes"`
		Type NewServiceDataType `json:"type"`
	} `json:"data"`
}

// NewServiceDataType defines model for NewService.Data.Type.
type NewServiceDataType string

// NewSeverity defines model for new_severity.
type NewSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name string `json:"name"`

			// The severity of the severity
			Severity *NewSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type NewSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type NewSeverityDataAttributesSeverity string

// NewSeverityDataType defines model for NewSeverity.Data.Type.
type NewSeverityDataType string

// NewStatusPage defines model for new_status_page.
type NewStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *NewStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title string `json:"title"`
		} `json:"attributes"`
		Type NewStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type NewStatusPageDataAttributesShowUptimeLastDays int

// NewStatusPageDataType defines model for NewStatusPage.Data.Type.
type NewStatusPageDataType string

// NewTeam defines model for new_team.
type NewTeam struct {
	Data struct {
		Attributes struct {
			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name string `json:"name"`
		} `json:"attributes"`
		Type NewTeamDataType `json:"type"`
	} `json:"data"`
}

// NewTeamDataType defines model for NewTeam.Data.Type.
type NewTeamDataType string

// NewWorkflow defines model for new_workflow.
type NewWorkflow struct {
	Data struct {
		Attributes struct {
			// Workflow command.
			Command *string `json:"command"`

			// The description of the workflow
			Description     *string   `json:"description"`
			Enabled         *bool     `json:"enabled,omitempty"`
			EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
			GroupIds        *[]string `json:"group_ids,omitempty"`
			IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name string `json:"name"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration.
			RepeatEveryDuration *string                              `json:"repeat_every_duration"`
			RepeatOn            *[]NewWorkflowDataAttributesRepeatOn `json:"repeat_on,omitempty"`
			ServiceIds          *[]string                            `json:"service_ids,omitempty"`
			SeverityIds         *[]string                            `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string      `json:"slug,omitempty"`
			TriggerParams *interface{} `json:"trigger_params,omitempty"`

			// Wait this duration before executing.
			Wait *string `json:"wait"`
		} `json:"attributes"`
		Type NewWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Repeat on weekdays.
type NewWorkflowDataAttributesRepeatOn string

// NewWorkflowDataType defines model for NewWorkflow.Data.Type.
type NewWorkflowDataType string

// NewWorkflowCustomFieldSelection defines model for new_workflow_custom_field_selection.
type NewWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The custom field for this selection
			CustomFieldId float32 `json:"custom_field_id"`

			// The trigger condition
			IncidentCondition NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition"`
			SelectedOptionIds *[]float32                                                     `json:"selected_option_ids,omitempty"`
		} `json:"attributes"`
		Type NewWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type NewWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// NewWorkflowCustomFieldSelectionDataType defines model for NewWorkflowCustomFieldSelection.Data.Type.
type NewWorkflowCustomFieldSelectionDataType string

// NewWorkflowTask defines model for new_workflow_task.
type NewWorkflowTask struct {
	Data struct {
		Attributes struct {
			// The position of the workflow task
			Position   *float32    `json:"position,omitempty"`
			TaskParams interface{} `json:"task_params"`
		} `json:"attributes"`
		Type NewWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// NewWorkflowTaskDataType defines model for NewWorkflowTask.Data.Type.
type NewWorkflowTaskDataType string

// PageOpsgenieOnCallRespondersTaskParams defines model for page_opsgenie_on_call_responders_task_params.
type PageOpsgenieOnCallRespondersTaskParams struct {
	Priority *PageOpsgenieOnCallRespondersTaskParamsPriority `json:"priority,omitempty"`
	TaskType *PageOpsgenieOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Teams    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`
	Users *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PageOpsgenieOnCallRespondersTaskParamsPriority defines model for PageOpsgenieOnCallRespondersTaskParams.Priority.
type PageOpsgenieOnCallRespondersTaskParamsPriority string

// PageOpsgenieOnCallRespondersTaskParamsTaskType defines model for PageOpsgenieOnCallRespondersTaskParams.TaskType.
type PageOpsgenieOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParams defines model for page_pagerduty_on_call_responders_task_params.
type PagePagerdutyOnCallRespondersTaskParams struct {
	EscalationPolicies *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"escalation_policies,omitempty"`
	Message *string `json:"message,omitempty"`
	Service struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service"`
	TaskType *PagePagerdutyOnCallRespondersTaskParamsTaskType `json:"task_type,omitempty"`
	Urgency  *PagePagerdutyOnCallRespondersTaskParamsUrgency  `json:"urgency,omitempty"`
	Users    *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"users,omitempty"`
}

// PagePagerdutyOnCallRespondersTaskParamsTaskType defines model for PagePagerdutyOnCallRespondersTaskParams.TaskType.
type PagePagerdutyOnCallRespondersTaskParamsTaskType string

// PagePagerdutyOnCallRespondersTaskParamsUrgency defines model for PagePagerdutyOnCallRespondersTaskParams.Urgency.
type PagePagerdutyOnCallRespondersTaskParamsUrgency string

// PageVictorOpsOnCallRespondersTaskParams defines model for page_victor_ops_on_call_responders_task_params.
type PageVictorOpsOnCallRespondersTaskParams interface{}

// Playbook defines model for playbook.
type Playbook struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The external url of the playbook
	ExternalUrl *string `json:"external_url"`

	// The summary of the playbook
	Summary *string `json:"summary"`

	// The title of the playbook
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookList defines model for playbook_list.
type PlaybookList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string               `json:"id"`
		Type PlaybookListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookListDataType defines model for PlaybookList.Data.Type.
type PlaybookListDataType string

// PlaybookResponse defines model for playbook_response.
type PlaybookResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook)
			Playbook `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the playbook
		Id   string                   `json:"id"`
		Type PlaybookResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookResponseDataType defines model for PlaybookResponse.Data.Type.
type PlaybookResponseDataType string

// PlaybookTask defines model for playbook_task.
type PlaybookTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of incident task
	Description *string `json:"description"`

	// The task of the incident task
	Task string `json:"task"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PlaybookTaskList defines model for playbook_task_list.
type PlaybookTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                   `json:"id"`
		Type PlaybookTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PlaybookTaskListDataType defines model for PlaybookTaskList.Data.Type.
type PlaybookTaskListDataType string

// PlaybookTaskResponse defines model for playbook_task_response.
type PlaybookTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/playbook_task)
			PlaybookTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the incident task
		Id   string                       `json:"id"`
		Type PlaybookTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// PlaybookTaskResponseDataType defines model for PlaybookTaskResponse.Data.Type.
type PlaybookTaskResponseDataType string

// PostMortemTemplate defines model for post_mortem_template.
type PostMortemTemplate struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Default selected template when editing a postmortem
	Default *bool `json:"default"`

	// The name of the postmortem template
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PostMortemTemplateList defines model for post_mortem_template_list.
type PostMortemTemplateList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                         `json:"id"`
		Type PostMortemTemplateListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PostMortemTemplateListDataType defines model for PostMortemTemplateList.Data.Type.
type PostMortemTemplateListDataType string

// PostMortemTemplateResponse defines model for post_mortem_template_response.
type PostMortemTemplateResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/post_mortem_template)
			PostMortemTemplate `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the post_mortem_template
		Id   string                             `json:"id"`
		Type PostMortemTemplateResponseDataType `json:"type"`
	} `json:"data"`
}

// PostMortemTemplateResponseDataType defines model for PostMortemTemplateResponse.Data.Type.
type PostMortemTemplateResponseDataType string

// PrintTaskParams defines model for print_task_params.
type PrintTaskParams struct {
	// The message to print
	Message  string                   `json:"message"`
	TaskType *PrintTaskParamsTaskType `json:"task_type,omitempty"`
}

// PrintTaskParamsTaskType defines model for PrintTaskParams.TaskType.
type PrintTaskParamsTaskType string

// PublishIncidentTaskParams defines model for publish_incident_task_params.
type PublishIncidentTaskParams struct {
	// Incident event description
	Event    string `json:"event"`
	Incident struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"incident"`
	PublicTitle   string                             `json:"public_title"`
	Status        PublishIncidentTaskParamsStatus    `json:"status"`
	StatusPageIds []string                           `json:"status_page_ids"`
	TaskType      *PublishIncidentTaskParamsTaskType `json:"task_type,omitempty"`
}

// PublishIncidentTaskParamsStatus defines model for PublishIncidentTaskParams.Status.
type PublishIncidentTaskParamsStatus string

// PublishIncidentTaskParamsTaskType defines model for PublishIncidentTaskParams.TaskType.
type PublishIncidentTaskParamsTaskType string

// Pulse defines model for pulse.
type Pulse struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// Additional data
	Data *map[string]interface{} `json:"data"`

	// Environments attached to the pulse
	Environments *[]struct {
		// Embedded struct due to allOf(#/components/schemas/environment)
		Environment `yaml:",inline"`
	} `json:"environments,omitempty"`
	Labels *[]struct {
		// Key of the tag
		Key string `json:"key"`

		// Value of the tag
		Value string `json:"value"`
	} `json:"labels,omitempty"`
	Refs *[]struct {
		// Key of the ref
		Key string `json:"key"`

		// Value of the ref
		Value string `json:"value"`
	} `json:"refs,omitempty"`

	// Services attached to the pulse
	Services *[]struct {
		// Embedded struct due to allOf(#/components/schemas/service)
		Service `yaml:",inline"`
	} `json:"services,omitempty"`

	// The source of the pulse (eg: k8s)
	Source *string `json:"source"`

	// The summary of the pulse
	Summary string `json:"summary"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// PulseList defines model for pulse_list.
type PulseList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string            `json:"id"`
		Type PulseListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// PulseListDataType defines model for PulseList.Data.Type.
type PulseListDataType string

// PulseResponse defines model for pulse_response.
type PulseResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/pulse)
			Pulse `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the pulse
		Id   string                `json:"id"`
		Type PulseResponseDataType `json:"type"`
	} `json:"data"`
}

// PulseResponseDataType defines model for PulseResponse.Data.Type.
type PulseResponseDataType string

// PulseTriggerParams defines model for pulse_trigger_params.
type PulseTriggerParams struct {
	PulseCondition       *PulseTriggerParamsPulseCondition       `json:"pulse_condition,omitempty"`
	PulseConditionLabel  *PulseTriggerParamsPulseConditionLabel  `json:"pulse_condition_label,omitempty"`
	PulseConditionSource *PulseTriggerParamsPulseConditionSource `json:"pulse_condition_source,omitempty"`
	TriggerType          PulseTriggerParamsTriggerType           `json:"trigger_type"`
	Triggers             *[]PulseTriggerParamsTriggers           `json:"triggers,omitempty"`
}

// PulseTriggerParamsPulseCondition defines model for PulseTriggerParams.PulseCondition.
type PulseTriggerParamsPulseCondition string

// PulseTriggerParamsPulseConditionLabel defines model for PulseTriggerParams.PulseConditionLabel.
type PulseTriggerParamsPulseConditionLabel string

// PulseTriggerParamsPulseConditionSource defines model for PulseTriggerParams.PulseConditionSource.
type PulseTriggerParamsPulseConditionSource string

// PulseTriggerParamsTriggerType defines model for PulseTriggerParams.TriggerType.
type PulseTriggerParamsTriggerType string

// Actions that trigger the workflow.
type PulseTriggerParamsTriggers string

// RedisClientTaskParams defines model for redis_client_task_params.
type RedisClientTaskParams struct {
	Commands            string  `json:"commands"`
	EventMessage        *string `json:"event_message,omitempty"`
	EventUrl            *string `json:"event_url,omitempty"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *RedisClientTaskParamsTaskType `json:"task_type,omitempty"`
	Url      string                         `json:"url"`
}

// RedisClientTaskParamsTaskType defines model for RedisClientTaskParams.TaskType.
type RedisClientTaskParamsTaskType string

// RenameSlackChannelTaskParams defines model for rename_slack_channel_task_params.
type RenameSlackChannelTaskParams struct {
	Channel *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel,omitempty"`
	TaskType *RenameSlackChannelTaskParamsTaskType `json:"task_type,omitempty"`
	Title    string                                `json:"title"`
}

// RenameSlackChannelTaskParamsTaskType defines model for RenameSlackChannelTaskParams.TaskType.
type RenameSlackChannelTaskParamsTaskType string

// ResolveIncident defines model for resolve_incident.
type ResolveIncident struct {
	Data struct {
		Attributes struct {
			// How was the incident resolved?
			ResolutionMessage *string `json:"resolution_message"`
		} `json:"attributes"`
		Type ResolveIncidentDataType `json:"type"`
	} `json:"data"`
}

// ResolveIncidentDataType defines model for ResolveIncident.Data.Type.
type ResolveIncidentDataType string

// RunCommandHerokuTaskParams defines model for run_command_heroku_task_params.
type RunCommandHerokuTaskParams struct {
	AppName             string `json:"app_name"`
	Command             string `json:"command"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	Size     RunCommandHerokuTaskParamsSize      `json:"size"`
	TaskType *RunCommandHerokuTaskParamsTaskType `json:"task_type,omitempty"`
}

// RunCommandHerokuTaskParamsSize defines model for RunCommandHerokuTaskParams.Size.
type RunCommandHerokuTaskParamsSize string

// RunCommandHerokuTaskParamsTaskType defines model for RunCommandHerokuTaskParams.TaskType.
type RunCommandHerokuTaskParamsTaskType string

// SendEmailTaskParams defines model for send_email_task_params.
type SendEmailTaskParams struct {
	// The email body
	Body *string `json:"body"`

	// The preheader
	Preheader *string `json:"preheader"`

	// The subject
	Subject  string                       `json:"subject"`
	TaskType *SendEmailTaskParamsTaskType `json:"task_type,omitempty"`
	To       []string                     `json:"to"`
}

// SendEmailTaskParamsTaskType defines model for SendEmailTaskParams.TaskType.
type SendEmailTaskParamsTaskType string

// SendSlackMessageTaskParams defines model for send_slack_message_task_params.
type SendSlackMessageTaskParams interface{}

// SendSmsTaskParams defines model for send_sms_task_params.
type SendSmsTaskParams struct {
	// The SMS message
	Content string `json:"content"`

	// The name
	Name         string                     `json:"name"`
	PhoneNumbers []string                   `json:"phone_numbers"`
	TaskType     *SendSmsTaskParamsTaskType `json:"task_type,omitempty"`
}

// SendSmsTaskParamsTaskType defines model for SendSmsTaskParams.TaskType.
type SendSmsTaskParamsTaskType string

// Service defines model for service.
type Service struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the service
	Description *string `json:"description"`

	// Environments associated with this service
	EnvironmentIds *[]interface{} `json:"environment_ids"`

	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `json:"github_repository_branch"`

	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `json:"github_repository_name"`

	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `json:"gitlab_repository_name"`

	// The name of the service
	Name string `json:"name"`

	// Emails attached to the service
	NotifyEmails *[]string `json:"notify_emails"`

	// The Opsgenie service id associated to this service
	OpsgenieId *string `json:"opsgenie_id"`

	// The PagerDuty service id associated to this service
	PagerdutyId *string `json:"pagerduty_id"`

	// The public description of the service
	PublicDescription *string `json:"public_description"`

	// Services dependent on this service
	ServiceDependencyIds *[]interface{} `json:"service_dependency_ids"`

	// The slug of the service
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// ServiceList defines model for service_list.
type ServiceList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string              `json:"id"`
		Type ServiceListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// ServiceListDataType defines model for ServiceList.Data.Type.
type ServiceListDataType string

// ServiceResponse defines model for service_response.
type ServiceResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/service)
			Service `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the service
		Id   string                  `json:"id"`
		Type ServiceResponseDataType `json:"type"`
	} `json:"data"`
}

// ServiceResponseDataType defines model for ServiceResponse.Data.Type.
type ServiceResponseDataType string

// Severity defines model for severity.
type Severity struct {
	Color *string `json:"color"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the severity
	Description *string `json:"description"`

	// The name of the severity
	Name string `json:"name"`

	// The severity of the severity
	Severity *SeveritySeverity `json:"severity,omitempty"`

	// The slug of the severity
	Slug *string `json:"slug,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// The severity of the severity
type SeveritySeverity string

// SeverityList defines model for severity_list.
type SeverityList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string               `json:"id"`
		Type SeverityListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// SeverityListDataType defines model for SeverityList.Data.Type.
type SeverityListDataType string

// SeverityResponse defines model for severity_response.
type SeverityResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/severity)
			Severity `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the severity
		Id   string                   `json:"id"`
		Type SeverityResponseDataType `json:"type"`
	} `json:"data"`
}

// SeverityResponseDataType defines model for SeverityResponse.Data.Type.
type SeverityResponseDataType string

// SnapshotDatadogGraphTaskParams defines model for snapshot_datadog_graph_task_params.
type SnapshotDatadogGraphTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	MetricQueries *[]string `json:"metric_queries,omitempty"`

	// in format '1 minute', '30 days', '3 months', etc.
	PastDuration        string `json:"past_duration"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotDatadogGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotDatadogGraphTaskParamsTaskType defines model for SnapshotDatadogGraphTaskParams.TaskType.
type SnapshotDatadogGraphTaskParamsTaskType string

// SnapshotGrafanaDashboardTaskParams defines model for snapshot_grafana_dashboard_task_params.
type SnapshotGrafanaDashboardTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotGrafanaDashboardTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotGrafanaDashboardTaskParamsTaskType defines model for SnapshotGrafanaDashboardTaskParams.TaskType.
type SnapshotGrafanaDashboardTaskParamsTaskType string

// SnapshotLookerLookTaskParams defines model for snapshot_looker_look_task_params.
type SnapshotLookerLookTaskParams struct {
	Dashboards []struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"dashboards"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotLookerLookTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotLookerLookTaskParamsTaskType defines model for SnapshotLookerLookTaskParams.TaskType.
type SnapshotLookerLookTaskParamsTaskType string

// SnapshotNewRelicGraphTaskParams defines model for snapshot_new_relic_graph_task_params.
type SnapshotNewRelicGraphTaskParams struct {
	MetricQuery         string                                    `json:"metric_query"`
	MetricType          SnapshotNewRelicGraphTaskParamsMetricType `json:"metric_type"`
	PostToSlackChannels *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"post_to_slack_channels,omitempty"`
	TaskType *SnapshotNewRelicGraphTaskParamsTaskType `json:"task_type,omitempty"`
}

// SnapshotNewRelicGraphTaskParamsMetricType defines model for SnapshotNewRelicGraphTaskParams.MetricType.
type SnapshotNewRelicGraphTaskParamsMetricType string

// SnapshotNewRelicGraphTaskParamsTaskType defines model for SnapshotNewRelicGraphTaskParams.TaskType.
type SnapshotNewRelicGraphTaskParamsTaskType string

// StandaloneTriggerParams defines model for standalone_trigger_params.
type StandaloneTriggerParams struct {
	TriggerType StandaloneTriggerParamsTriggerType `json:"trigger_type"`
	Triggers    *[]StandaloneTriggerParamsTriggers `json:"triggers,omitempty"`
}

// StandaloneTriggerParamsTriggerType defines model for StandaloneTriggerParams.TriggerType.
type StandaloneTriggerParamsTriggerType string

// Actions that trigger the workflow.
type StandaloneTriggerParamsTriggers string

// StatusPage defines model for status_page.
type StatusPage struct {
	// Allow search engines to include your public status page in search results.
	AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the status page
	Description *string `json:"description"`

	// Enabled / Disable the status page
	Enabled *bool `json:"enabled"`

	// The color of the footer. Eg. "#1F2F41"
	FooterColor *string `json:"footer_color"`

	// The color of the header. Eg. "#0061F2"
	HeaderColor *string `json:"header_color"`

	// Make the status page accessible to the public
	Public *bool `json:"public"`

	// Show uptime
	ShowUptime *bool `json:"show_uptime"`

	// Show uptime over x days
	ShowUptimeLastDays *StatusPageShowUptimeLastDays `json:"show_uptime_last_days"`

	// The title of the status page
	Title string `json:"title"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// Show uptime over x days
type StatusPageShowUptimeLastDays int

// StatusPageList defines model for status_page_list.
type StatusPageList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                 `json:"id"`
		Type StatusPageListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// StatusPageListDataType defines model for StatusPageList.Data.Type.
type StatusPageListDataType string

// StatusPageResponse defines model for status_page_response.
type StatusPageResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/status_page)
			StatusPage `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the status page
		Id   string                     `json:"id"`
		Type StatusPageResponseDataType `json:"type"`
	} `json:"data"`
}

// StatusPageResponseDataType defines model for StatusPageResponse.Data.Type.
type StatusPageResponseDataType string

// Team defines model for team.
type Team struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the team
	Description *string `json:"description"`

	// The name of the team
	Name string `json:"name"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`
}

// TeamList defines model for team_list.
type TeamList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string           `json:"id"`
		Type TeamListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// TeamListDataType defines model for TeamList.Data.Type.
type TeamListDataType string

// TeamResponse defines model for team_response.
type TeamResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/team)
			Team `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the team
		Id   string               `json:"id"`
		Type TeamResponseDataType `json:"type"`
	} `json:"data"`
}

// TeamResponseDataType defines model for TeamResponse.Data.Type.
type TeamResponseDataType string

// TweetTwitterMessageTaskParams defines model for tweet_twitter_message_task_params.
type TweetTwitterMessageTaskParams struct {
	Message  string                                 `json:"message"`
	TaskType *TweetTwitterMessageTaskParamsTaskType `json:"task_type,omitempty"`
}

// TweetTwitterMessageTaskParamsTaskType defines model for TweetTwitterMessageTaskParams.TaskType.
type TweetTwitterMessageTaskParamsTaskType string

// UpdateAirtableTableRecordTaskParams defines model for update_airtable_table_record_task_params.
type UpdateAirtableTableRecordTaskParams struct {
	// The base key
	BaseKey string `json:"base_key"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The record id
	RecordId string `json:"record_id"`

	// The table name
	TableName string                                       `json:"table_name"`
	TaskType  *UpdateAirtableTableRecordTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateAirtableTableRecordTaskParamsTaskType defines model for UpdateAirtableTableRecordTaskParams.TaskType.
type UpdateAirtableTableRecordTaskParamsTaskType string

// UpdateAsanaTaskTaskParams defines model for update_asana_task_task_params.
type UpdateAsanaTaskTaskParams struct {
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task id
	TaskId   string                             `json:"task_id"`
	TaskType *UpdateAsanaTaskTaskParamsTaskType `json:"task_type,omitempty"`

	// The task title
	Title *string `json:"title,omitempty"`
}

// UpdateAsanaTaskTaskParamsTaskType defines model for UpdateAsanaTaskTaskParams.TaskType.
type UpdateAsanaTaskTaskParamsTaskType string

// UpdateCause defines model for update_cause.
type UpdateCause struct {
	Data struct {
		Attributes struct {
			// The description of the cause
			Description *string `json:"description"`

			// The name of the cause
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateCauseDataType `json:"type"`
	} `json:"data"`
}

// UpdateCauseDataType defines model for UpdateCause.Data.Type.
type UpdateCauseDataType string

// UpdateCustomField defines model for update_custom_field.
type UpdateCustomField struct {
	Data struct {
		Attributes struct {
			// The description of the custom_field
			Description *string `json:"description"`

			// The name of the custom_field
			Label *string `json:"label,omitempty"`

			// The position of the custom_field
			Position *float32                                   `json:"position,omitempty"`
			Required *[]UpdateCustomFieldDataAttributesRequired `json:"required"`
			Shown    *[]UpdateCustomFieldDataAttributesShown    `json:"shown,omitempty"`

			// The slug of the custom_field
			Slug *string `json:"slug,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldDataType `json:"type"`
	} `json:"data"`
}

// Where the custom_field is required
type UpdateCustomFieldDataAttributesRequired string

// Where the custom_field is shown
type UpdateCustomFieldDataAttributesShown string

// UpdateCustomFieldDataType defines model for UpdateCustomField.Data.Type.
type UpdateCustomFieldDataType string

// UpdateCustomFieldOption defines model for update_custom_field_option.
type UpdateCustomFieldOption struct {
	Data struct {
		Attributes struct {
			// The hex color of the custom_field_option
			Color *string `json:"color,omitempty"`

			// The position of the custom_field_option
			Position *float32 `json:"position,omitempty"`

			// The value of the custom_field_option
			Value *string `json:"value,omitempty"`
		} `json:"attributes"`
		Type UpdateCustomFieldOptionDataType `json:"type"`
	} `json:"data"`
}

// UpdateCustomFieldOptionDataType defines model for UpdateCustomFieldOption.Data.Type.
type UpdateCustomFieldOptionDataType string

// UpdateEnvironment defines model for update_environment.
type UpdateEnvironment struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the environment
			Description *string `json:"description"`

			// The name of the environment
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateEnvironmentDataType `json:"type"`
	} `json:"data"`
}

// UpdateEnvironmentDataType defines model for UpdateEnvironment.Data.Type.
type UpdateEnvironmentDataType string

// UpdateFunctionality defines model for update_functionality.
type UpdateFunctionality struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the functionality
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The name of the functionality
			Name *string `json:"name,omitempty"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The public description of the functionality
			PublicDescription *string `json:"public_description"`
		} `json:"attributes"`
		Type UpdateFunctionalityDataType `json:"type"`
	} `json:"data"`
}

// UpdateFunctionalityDataType defines model for UpdateFunctionality.Data.Type.
type UpdateFunctionalityDataType string

// UpdateGithubIssueTaskParams defines model for update_github_issue_task_params.
type UpdateGithubIssueTaskParams struct {
	// The issue body
	Body       *string `json:"body,omitempty"`
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The issue id
	IssueId  string                               `json:"issue_id"`
	TaskType *UpdateGithubIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title
	Title *string `json:"title,omitempty"`
}

// UpdateGithubIssueTaskParamsTaskType defines model for UpdateGithubIssueTaskParams.TaskType.
type UpdateGithubIssueTaskParamsTaskType string

// UpdateGoogleCalendarEventTaskParams defines model for update_google_calendar_event_task_params.
type UpdateGoogleCalendarEventTaskParams struct {
	// Days to adjust meeting by
	AdjustmentDays *float32 `json:"adjustment_days,omitempty"`

	// Emails of attendees
	Attendees               *[]string `json:"attendees,omitempty"`
	CanGuestsInviteOthers   *bool     `json:"can_guests_invite_others,omitempty"`
	CanGuestsModifyEvent    *bool     `json:"can_guests_modify_event,omitempty"`
	CanGuestsSeeOtherGuests *bool     `json:"can_guests_see_other_guests,omitempty"`

	// The event description
	Description *string `json:"description,omitempty"`

	// The event ID
	EventId string `json:"event_id"`

	// Meeting duration in format like '1 hour', '30 minutes'
	MeetingDuration        *string `json:"meeting_duration,omitempty"`
	PostToIncidentTimeline *bool   `json:"post_to_incident_timeline,omitempty"`
	ReplaceAttendees       *bool   `json:"replace_attendees,omitempty"`

	// Send an email to the attendees notifying them of the event
	SendUpdates *bool `json:"send_updates,omitempty"`

	// The event summary
	Summary  *string                                      `json:"summary,omitempty"`
	TaskType *UpdateGoogleCalendarEventTaskParamsTaskType `json:"task_type,omitempty"`

	// Time of meeting in format HH:MM
	TimeOfMeeting *string `json:"time_of_meeting,omitempty"`
}

// UpdateGoogleCalendarEventTaskParamsTaskType defines model for UpdateGoogleCalendarEventTaskParams.TaskType.
type UpdateGoogleCalendarEventTaskParamsTaskType string

// UpdateIncident defines model for update_incident.
type UpdateIncident struct {
	Data struct {
		Attributes struct {
			// Date of acknowledgment
			AcknowledgedAt *string `json:"acknowledged_at"`

			// Date of cancellation
			CancelledAt *string `json:"cancelled_at"`

			// Date of detection
			DetectedAt *string `json:"detected_at"`

			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Incident Type ID's to attach to the incident
			IncidentTypeIds *[]string `json:"incident_type_ids"`

			// Labels to attach to the incidents. eg: {"platform":"osx", "version": "1.29"}
			Labels *map[string]interface{} `json:"labels"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID to attach to the incident
			SeverityId *string `json:"severity_id"`

			// Date of start
			StartedAt *string `json:"started_at"`

			// The summary of the incident
			Summary *string `json:"summary"`

			// The title of the incident
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentDataType defines model for UpdateIncident.Data.Type.
type UpdateIncidentDataType string

// UpdateIncidentActionItem defines model for update_incident_action_item.
type UpdateIncidentActionItem struct {
	Data struct {
		Attributes struct {
			// The description of the incident action item
			Description *string `json:"description"`

			// The kind of the incident action item
			Kind *UpdateIncidentActionItemDataAttributesKind `json:"kind,omitempty"`

			// The priority of the incident action item
			Priority *UpdateIncidentActionItemDataAttributesPriority `json:"priority,omitempty"`

			// The status of incident the action item
			Status *UpdateIncidentActionItemDataAttributesStatus `json:"status,omitempty"`

			// The summary of the incident action item
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentActionItemDataType `json:"type"`
	} `json:"data"`
}

// The kind of the incident action item
type UpdateIncidentActionItemDataAttributesKind string

// The priority of the incident action item
type UpdateIncidentActionItemDataAttributesPriority string

// The status of incident the action item
type UpdateIncidentActionItemDataAttributesStatus string

// UpdateIncidentActionItemDataType defines model for UpdateIncidentActionItem.Data.Type.
type UpdateIncidentActionItemDataType string

// UpdateIncidentCustomFieldSelection defines model for update_incident_custom_field_selection.
type UpdateIncidentCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			SelectedOptionIds *[]float32 `json:"selected_option_ids,omitempty"`

			// The selected value for text kind custom fields
			Value *string `json:"value"`
		} `json:"attributes"`
		Type UpdateIncidentCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentCustomFieldSelectionDataType defines model for UpdateIncidentCustomFieldSelection.Data.Type.
type UpdateIncidentCustomFieldSelectionDataType string

// UpdateIncidentEvent defines model for update_incident_event.
type UpdateIncidentEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// The visibility of the incident action item
			Visibility *UpdateIncidentEventDataAttributesVisibility `json:"visibility,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentEventDataType `json:"type"`
	} `json:"data"`
}

// The visibility of the incident action item
type UpdateIncidentEventDataAttributesVisibility string

// UpdateIncidentEventDataType defines model for UpdateIncidentEvent.Data.Type.
type UpdateIncidentEventDataType string

// UpdateIncidentFeedback defines model for update_incident_feedback.
type UpdateIncidentFeedback struct {
	Data struct {
		Attributes struct {
			// Is the feedback anonymous?
			Anonymous *bool `json:"anonymous,omitempty"`

			// The feedback of the incident feedback
			Feedback *string `json:"feedback,omitempty"`

			// The rating of the incident feedback
			Rating *UpdateIncidentFeedbackDataAttributesRating `json:"rating,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentFeedbackDataType `json:"type"`
	} `json:"data"`
}

// The rating of the incident feedback
type UpdateIncidentFeedbackDataAttributesRating int

// UpdateIncidentFeedbackDataType defines model for UpdateIncidentFeedback.Data.Type.
type UpdateIncidentFeedbackDataType string

// UpdateIncidentPostMortem defines model for update_incident_post_mortem.
type UpdateIncidentPostMortem struct {
	Data struct {
		Attributes struct {
			// The Cause ID's to attach to the incident postmortem
			CauseIds *[]string `json:"cause_ids"`

			// Date of mitigation
			MitigatedAt *string `json:"mitigated_at"`

			// Date of resolution
			ResolvedAt *string `json:"resolved_at"`

			// Show alerts attached to the incident
			ShowAlertsAttached *bool `json:"show_alerts_attached,omitempty"`

			// Show services impacted of the incident postmortem
			ShowFunctionalitiesImpacted *bool `json:"show_functionalities_impacted,omitempty"`

			// Show groups impacted of the incident postmortem
			ShowGroupsImpacted *bool `json:"show_groups_impacted,omitempty"`

			// Show functionalities impacted of the incident postmortem
			ShowServicesImpacted *bool `json:"show_services_impacted,omitempty"`

			// Show events timeline of the incident postmortem
			ShowTimeline *bool `json:"show_timeline,omitempty"`

			// Show action items in the timeline of the incident postmortem
			ShowTimelineActionItems *bool `json:"show_timeline_action_items,omitempty"`

			// Show workflow events in the timeline of the incident postmortem
			ShowTimelineGenius *bool `json:"show_timeline_genius,omitempty"`

			// Show tasks in the timeline of the incident postmortem
			ShowTimelineTasks *bool `json:"show_timeline_tasks,omitempty"`

			// Show trail events in the timeline of the incident postmortem
			ShowTimelineTrail *bool `json:"show_timeline_trail,omitempty"`

			// Date of started at
			StartedAt *string `json:"started_at"`

			// The status of the incident postmortem
			Status *UpdateIncidentPostMortemDataAttributesStatus `json:"status,omitempty"`

			// The title of the incident postmortem
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentPostMortemDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident postmortem
type UpdateIncidentPostMortemDataAttributesStatus string

// UpdateIncidentPostMortemDataType defines model for UpdateIncidentPostMortem.Data.Type.
type UpdateIncidentPostMortemDataType string

// UpdateIncidentPostmortemTaskParams defines model for update_incident_postmortem_task_params.
type UpdateIncidentPostmortemTaskParams struct {
	// UUID of the postmortem that needs to be updated.
	PostmortemId *string                                     `json:"postmortem_id,omitempty"`
	Status       *string                                     `json:"status"`
	TaskType     *UpdateIncidentPostmortemTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentPostmortemTaskParamsTaskType defines model for UpdateIncidentPostmortemTaskParams.TaskType.
type UpdateIncidentPostmortemTaskParamsTaskType string

// UpdateIncidentRole defines model for update_incident_role.
type UpdateIncidentRole struct {
	Data struct {
		Attributes struct {
			// The description of the incident role
			Description *string `json:"description"`

			// The name of the incident role
			Name *string `json:"name,omitempty"`

			// The summary of the incident role
			Summary *string `json:"summary"`
		} `json:"attributes"`
		Type UpdateIncidentRoleDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentRoleDataType defines model for UpdateIncidentRole.Data.Type.
type UpdateIncidentRoleDataType string

// UpdateIncidentRoleTask defines model for update_incident_role_task.
type UpdateIncidentRoleTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The priority of the incident task
			Priority *UpdateIncidentRoleTaskDataAttributesPriority `json:"priority,omitempty"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentRoleTaskDataType `json:"type"`
	} `json:"data"`
}

// The priority of the incident task
type UpdateIncidentRoleTaskDataAttributesPriority string

// UpdateIncidentRoleTaskDataType defines model for UpdateIncidentRoleTask.Data.Type.
type UpdateIncidentRoleTaskDataType string

// UpdateIncidentStatusPageEvent defines model for update_incident_status_page_event.
type UpdateIncidentStatusPageEvent struct {
	Data struct {
		Attributes struct {
			// The summary of the incident event
			Event *string `json:"event,omitempty"`

			// Notify all status pages subscribers
			NotifySubscribers *bool `json:"notify_subscribers"`

			// The status of the incident event
			Status *UpdateIncidentStatusPageEventDataAttributesStatus `json:"status,omitempty"`

			// The status page ids to post the event
			StatusPageIds *[]string `json:"status_page_ids"`
		} `json:"attributes"`
		Type UpdateIncidentStatusPageEventDataType `json:"type"`
	} `json:"data"`
}

// The status of the incident event
type UpdateIncidentStatusPageEventDataAttributesStatus string

// UpdateIncidentStatusPageEventDataType defines model for UpdateIncidentStatusPageEvent.Data.Type.
type UpdateIncidentStatusPageEventDataType string

// UpdateIncidentTaskParams defines model for update_incident_task_params.
type UpdateIncidentTaskParams struct {
	AcknowledgedAt   *string   `json:"acknowledged_at"`
	DetectedAt       *string   `json:"detected_at"`
	EnvironmentIds   *[]string `json:"environment_ids"`
	FunctionalityIds *[]string `json:"functionality_ids"`
	GroupIds         *[]string `json:"group_ids"`

	// The incident id to update
	IncidentId      *string   `json:"incident_id,omitempty"`
	IncidentTypeIds *[]string `json:"incident_type_ids"`
	MitigatedAt     *string   `json:"mitigated_at"`
	Private         *bool     `json:"private,omitempty"`
	ResolvedAt      *string   `json:"resolved_at"`
	ServiceIds      *[]string `json:"service_ids"`
	SeverityId      *string   `json:"severity_id"`
	StartedAt       *string   `json:"started_at"`
	Status          *string   `json:"status"`

	// The incident summary
	Summary  *string                           `json:"summary"`
	TaskType *UpdateIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title"`
}

// UpdateIncidentTaskParamsTaskType defines model for UpdateIncidentTaskParams.TaskType.
type UpdateIncidentTaskParamsTaskType string

// UpdateIncidentType defines model for update_incident_type.
type UpdateIncidentType struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the incident type
			Description *string `json:"description"`

			// The name of the incident type
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateIncidentTypeDataType `json:"type"`
	} `json:"data"`
}

// UpdateIncidentTypeDataType defines model for UpdateIncidentType.Data.Type.
type UpdateIncidentTypeDataType string

// UpdateJiraIssueTaskParams defines model for update_jira_issue_task_params.
type UpdateJiraIssueTaskParams struct {
	// The assigned user's email.
	AssignUserEmail *string `json:"assign_user_email,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue id.
	IssueId string `json:"issue_id"`

	// The issue labels.
	Labels *string `json:"labels,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The project key.
	ProjectKey string `json:"project_key"`

	// The reporter user's email.
	ReporterUserEmail *string `json:"reporter_user_email,omitempty"`

	// The status id and display name.
	Status *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"status,omitempty"`
	TaskType *UpdateJiraIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title *string `json:"title,omitempty"`
}

// UpdateJiraIssueTaskParamsTaskType defines model for UpdateJiraIssueTaskParams.TaskType.
type UpdateJiraIssueTaskParamsTaskType string

// UpdateLinearIssueTaskParams defines model for update_linear_issue_task_params.
type UpdateLinearIssueTaskParams struct {
	// The issue description.
	Description *string `json:"description,omitempty"`

	// The issue id.
	IssueId string `json:"issue_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The state id and display name.
	State *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"state,omitempty"`
	TaskType *UpdateLinearIssueTaskParamsTaskType `json:"task_type,omitempty"`

	// The issue title.
	Title *string `json:"title,omitempty"`
}

// UpdateLinearIssueTaskParamsTaskType defines model for UpdateLinearIssueTaskParams.TaskType.
type UpdateLinearIssueTaskParamsTaskType string

// UpdatePlaybook defines model for update_playbook.
type UpdatePlaybook struct {
	Data struct {
		Attributes struct {
			// The Environment ID's to attach to the incident
			EnvironmentIds *[]string `json:"environment_ids"`

			// The external url of the playbook
			ExternalUrl *string `json:"external_url"`

			// The Functionality ID's to attach to the incident
			FunctionalityIds *[]string `json:"functionality_ids"`

			// The Team ID's to attach to the incident
			GroupIds *[]string `json:"group_ids"`

			// The Service ID's to attach to the incident
			ServiceIds *[]string `json:"service_ids"`

			// The Severity ID's to attach to the incident
			SeverityIds *[]string `json:"severity_ids"`

			// The summary of the playbook
			Summary *string `json:"summary"`

			// The title of the playbook
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookDataType defines model for UpdatePlaybook.Data.Type.
type UpdatePlaybookDataType string

// UpdatePlaybookTask defines model for update_playbook_task.
type UpdatePlaybookTask struct {
	Data struct {
		Attributes struct {
			// The description of the incident task
			Description *string `json:"description"`

			// The task of the incident task
			Task *string `json:"task,omitempty"`
		} `json:"attributes"`
		Type UpdatePlaybookTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdatePlaybookTaskDataType defines model for UpdatePlaybookTask.Data.Type.
type UpdatePlaybookTaskDataType string

// UpdatePostMortemTemplate defines model for update_post_mortem_template.
type UpdatePostMortemTemplate struct {
	Data struct {
		Attributes struct {
			// Default selected template when editing a postmortem
			Default *bool `json:"default"`

			// The name of the postmortem template
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdatePostMortemTemplateDataType `json:"type"`
	} `json:"data"`
}

// UpdatePostMortemTemplateDataType defines model for UpdatePostMortemTemplate.Data.Type.
type UpdatePostMortemTemplateDataType string

// UpdatePulse defines model for update_pulse.
type UpdatePulse struct {
	Data struct {
		Attributes struct {
			// Additional data
			Data *map[string]interface{} `json:"data"`

			// Pulse end datetime
			EndedAt *time.Time `json:"ended_at"`

			// The Environment ID's to attach to the pulse
			EnvironmentIds *[]string `json:"environment_ids"`
			Labels         *[]struct {
				// Key of the tag
				Key string `json:"key"`

				// Value of the tag
				Value string `json:"value"`
			} `json:"labels,omitempty"`
			Refs *[]struct {
				// Key of the ref
				Key string `json:"key"`

				// Value of the ref
				Value string `json:"value"`
			} `json:"refs,omitempty"`

			// The Service ID's to attach to the pulse
			ServiceIds *[]string `json:"service_ids"`

			// The source of the pulse (eg: k8s)
			Source *string `json:"source"`

			// Pulse start datetime
			StartedAt *time.Time `json:"started_at"`

			// The summary of the pulse
			Summary *string `json:"summary,omitempty"`
		} `json:"attributes"`
		Type *UpdatePulseDataType `json:"type,omitempty"`
	} `json:"data"`
}

// UpdatePulseDataType defines model for UpdatePulse.Data.Type.
type UpdatePulseDataType string

// UpdateService defines model for update_service.
type UpdateService struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the service
			Description *string `json:"description"`

			// Environments associated with this service
			EnvironmentIds *[]interface{} `json:"environment_ids"`

			// The GitHub repository branch associated to this service. eg: main
			GithubRepositoryBranch *string `json:"github_repository_branch"`

			// The GitHub repository name associated to this service. eg: rootlyhq/my-service
			GithubRepositoryName *string `json:"github_repository_name"`

			// The Gitlab repository branch associated to this service. eg: main
			GitlabRepositoryBranch *string `json:"gitlab_repository_branch"`

			// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
			GitlabRepositoryName *string `json:"gitlab_repository_name"`

			// The name of the service
			Name *string `json:"name,omitempty"`

			// Emails to attach to the service
			NotifyEmails *[]string `json:"notify_emails"`

			// The Opsgenie service id associated to this service
			OpsgenieId *string `json:"opsgenie_id"`

			// The PagerDuty service id associated to this service
			PagerdutyId *string `json:"pagerduty_id"`

			// The public description of the service
			PublicDescription *string `json:"public_description"`

			// Services dependent on this service
			ServiceDependencyIds *[]interface{} `json:"service_dependency_ids"`
		} `json:"attributes"`
		Type UpdateServiceDataType `json:"type"`
	} `json:"data"`
}

// UpdateServiceDataType defines model for UpdateService.Data.Type.
type UpdateServiceDataType string

// UpdateServiceNowIncidentTaskParams defines model for update_service_now_incident_task_params.
type UpdateServiceNowIncidentTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// Custom field mappings. Can contain liquid markup and need to be valid JSON.
	CustomFieldsMapping *string `json:"custom_fields_mapping"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The incident id
	IncidentId string `json:"incident_id"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`
	TaskType *UpdateServiceNowIncidentTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateServiceNowIncidentTaskParamsTaskType defines model for UpdateServiceNowIncidentTaskParams.TaskType.
type UpdateServiceNowIncidentTaskParamsTaskType string

// UpdateSeverity defines model for update_severity.
type UpdateSeverity struct {
	Data struct {
		Attributes struct {
			Color *string `json:"color"`

			// The description of the severity
			Description *string `json:"description"`

			// The name of the severity
			Name *string `json:"name,omitempty"`

			// The severity of the severity
			Severity *UpdateSeverityDataAttributesSeverity `json:"severity,omitempty"`
		} `json:"attributes"`
		Type UpdateSeverityDataType `json:"type"`
	} `json:"data"`
}

// The severity of the severity
type UpdateSeverityDataAttributesSeverity string

// UpdateSeverityDataType defines model for UpdateSeverity.Data.Type.
type UpdateSeverityDataType string

// UpdateShortcutStoryTaskParams defines model for update_shortcut_story_task_params.
type UpdateShortcutStoryTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The incident description
	Description *string `json:"description,omitempty"`

	// The story due date (ISO8601 format).
	DueDate *string `json:"due_date,omitempty"`

	// The story labels.
	Labels *string `json:"labels,omitempty"`

	// The story id
	StoryId  string                                 `json:"story_id"`
	TaskType *UpdateShortcutStoryTaskParamsTaskType `json:"task_type,omitempty"`

	// The incident title
	Title *string `json:"title,omitempty"`
}

// UpdateShortcutStoryTaskParamsTaskType defines model for UpdateShortcutStoryTaskParams.TaskType.
type UpdateShortcutStoryTaskParamsTaskType string

// UpdateShortcutTaskTaskParams defines model for update_shortcut_task_task_params.
type UpdateShortcutTaskTaskParams struct {
	// The completion id and display name.
	Completion struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion"`

	// The task description
	Description *string `json:"description,omitempty"`

	// The parent story
	ParentStoryId string `json:"parent_story_id"`

	// The task id
	TaskId   string                                `json:"task_id"`
	TaskType *UpdateShortcutTaskTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateShortcutTaskTaskParamsTaskType defines model for UpdateShortcutTaskTaskParams.TaskType.
type UpdateShortcutTaskTaskParamsTaskType string

// UpdateSlackChannelTopicTaskParams defines model for update_slack_channel_topic_task_params.
type UpdateSlackChannelTopicTaskParams struct {
	Channel struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"channel"`
	TaskType *UpdateSlackChannelTopicTaskParamsTaskType `json:"task_type,omitempty"`
	Topic    string                                     `json:"topic"`
}

// UpdateSlackChannelTopicTaskParamsTaskType defines model for UpdateSlackChannelTopicTaskParams.TaskType.
type UpdateSlackChannelTopicTaskParamsTaskType string

// UpdateStatusPage defines model for update_status_page.
type UpdateStatusPage struct {
	Data struct {
		Attributes struct {
			// Allow search engines to include your public status page in search results.
			AllowSearchEngineIndex *bool `json:"allow_search_engine_index"`

			// The description of the status page
			Description *string `json:"description"`

			// Enabled / Disable the status page
			Enabled *bool `json:"enabled"`

			// The color of the footer. Eg. "#1F2F41"
			FooterColor *string `json:"footer_color"`

			// The color of the header. Eg. "#0061F2"
			HeaderColor *string `json:"header_color"`

			// Make the status page accessible to the public
			Public *bool `json:"public"`

			// Show uptime
			ShowUptime *bool `json:"show_uptime"`

			// Show uptime over x days
			ShowUptimeLastDays *UpdateStatusPageDataAttributesShowUptimeLastDays `json:"show_uptime_last_days"`

			// The title of the status page
			Title *string `json:"title,omitempty"`
		} `json:"attributes"`
		Type UpdateStatusPageDataType `json:"type"`
	} `json:"data"`
}

// Show uptime over x days
type UpdateStatusPageDataAttributesShowUptimeLastDays int

// UpdateStatusPageDataType defines model for UpdateStatusPage.Data.Type.
type UpdateStatusPageDataType string

// UpdateStatusTaskParams defines model for update_status_task_params.
type UpdateStatusTaskParams struct {
	// In format '1 hour', '1 day', etc.
	InactivityTimeout *string                         `json:"inactivity_timeout,omitempty"`
	Status            UpdateStatusTaskParamsStatus    `json:"status"`
	TaskType          *UpdateStatusTaskParamsTaskType `json:"task_type,omitempty"`
}

// UpdateStatusTaskParamsStatus defines model for UpdateStatusTaskParams.Status.
type UpdateStatusTaskParamsStatus string

// UpdateStatusTaskParamsTaskType defines model for UpdateStatusTaskParams.TaskType.
type UpdateStatusTaskParamsTaskType string

// UpdateTeam defines model for update_team.
type UpdateTeam struct {
	Data struct {
		Attributes struct {
			// The description of the team
			Description *string `json:"description"`

			// The name of the team
			Name *string `json:"name,omitempty"`
		} `json:"attributes"`
		Type UpdateTeamDataType `json:"type"`
	} `json:"data"`
}

// UpdateTeamDataType defines model for UpdateTeam.Data.Type.
type UpdateTeamDataType string

// UpdateTrelloCardTaskParams defines model for update_trello_card_task_params.
type UpdateTrelloCardTaskParams struct {
	// The archivation id and display name.
	Archivation struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"archivation"`

	// The board id and display name.
	Board *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"board,omitempty"`

	// The card id
	CardId string `json:"card_id"`

	// The card description
	Description *string `json:"description,omitempty"`

	// The due date (ISO8601 format)
	DueDate *string `json:"due_date,omitempty"`
	Labels  *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"labels,omitempty"`

	// The list id and display name.
	List *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"list,omitempty"`
	TaskType *UpdateTrelloCardTaskParamsTaskType `json:"task_type,omitempty"`

	// The card title
	Title *string `json:"title,omitempty"`
}

// UpdateTrelloCardTaskParamsTaskType defines model for UpdateTrelloCardTaskParams.TaskType.
type UpdateTrelloCardTaskParamsTaskType string

// UpdateWorkflow defines model for update_workflow.
type UpdateWorkflow struct {
	Data struct {
		Attributes struct {
			// Workflow command.
			Command *string `json:"command"`

			// The description of the workflow
			Description     *string   `json:"description"`
			Enabled         *bool     `json:"enabled,omitempty"`
			EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
			GroupIds        *[]string `json:"group_ids,omitempty"`
			IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

			// The title of the workflow
			Name *string `json:"name,omitempty"`

			// The order which the workflow should run with other workflows.
			Position *float32 `json:"position,omitempty"`

			// Repeat workflow every duration.
			RepeatEveryDuration *string   `json:"repeat_every_duration"`
			ServiceIds          *[]string `json:"service_ids,omitempty"`
			SeverityIds         *[]string `json:"severity_ids,omitempty"`

			// The slug of the workflow
			Slug          *string                                 `json:"slug,omitempty"`
			TriggerParams *interface{}                            `json:"trigger_params,omitempty"`
			Triggers      *[]UpdateWorkflowDataAttributesTriggers `json:"triggers,omitempty"`

			// Wait this duration before executing.
			Wait *string `json:"wait"`
		} `json:"attributes"`
		Type UpdateWorkflowDataType `json:"type"`
	} `json:"data"`
}

// Actions that trigger the workflow.
type UpdateWorkflowDataAttributesTriggers string

// UpdateWorkflowDataType defines model for UpdateWorkflow.Data.Type.
type UpdateWorkflowDataType string

// UpdateWorkflowCustomFieldSelection defines model for update_workflow_custom_field_selection.
type UpdateWorkflowCustomFieldSelection struct {
	Data struct {
		Attributes struct {
			// The trigger condition
			IncidentCondition *UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition `json:"incident_condition,omitempty"`
			SelectedOptionIds *[]float32                                                         `json:"selected_option_ids,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowCustomFieldSelectionDataType `json:"type"`
	} `json:"data"`
}

// The trigger condition
type UpdateWorkflowCustomFieldSelectionDataAttributesIncidentCondition string

// UpdateWorkflowCustomFieldSelectionDataType defines model for UpdateWorkflowCustomFieldSelection.Data.Type.
type UpdateWorkflowCustomFieldSelectionDataType string

// UpdateWorkflowTask defines model for update_workflow_task.
type UpdateWorkflowTask struct {
	Data struct {
		Attributes struct {
			// The position of the workflow task
			Position   *float32     `json:"position,omitempty"`
			TaskParams *interface{} `json:"task_params,omitempty"`
		} `json:"attributes"`
		Type UpdateWorkflowTaskDataType `json:"type"`
	} `json:"data"`
}

// UpdateWorkflowTaskDataType defines model for UpdateWorkflowTask.Data.Type.
type UpdateWorkflowTaskDataType string

// UpdateZendeskTicketTaskParams defines model for update_zendesk_ticket_task_params.
type UpdateZendeskTicketTaskParams struct {
	// The completion id and display name.
	Completion *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"completion,omitempty"`

	// The priority id and display name.
	Priority *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"priority,omitempty"`

	// The ticket subject.
	Subject *string `json:"subject,omitempty"`

	// The ticket tags.
	Tags     *string                                `json:"tags,omitempty"`
	TaskType *UpdateZendeskTicketTaskParamsTaskType `json:"task_type,omitempty"`

	// The ticket id.
	TicketId string `json:"ticket_id"`
}

// UpdateZendeskTicketTaskParamsTaskType defines model for UpdateZendeskTicketTaskParams.TaskType.
type UpdateZendeskTicketTaskParamsTaskType string

// UptimeChartResponse defines model for uptime_chart_response.
type UptimeChartResponse map[string]interface{}

// Workflow defines model for workflow.
type Workflow struct {
	// Workflow command.
	Command *string `json:"command"`

	// Date of creation
	CreatedAt string `json:"created_at"`

	// The description of the workflow
	Description     *string   `json:"description"`
	Enabled         *bool     `json:"enabled,omitempty"`
	EnvironmentIds  *[]string `json:"environment_ids,omitempty"`
	GroupIds        *[]string `json:"group_ids,omitempty"`
	IncidentTypeIds *[]string `json:"incident_type_ids,omitempty"`

	// The title of the workflow
	Name string `json:"name"`

	// The order which the workflow should run with other workflows.
	Position *float32 `json:"position,omitempty"`

	// Repeat workflow every duration.
	RepeatEveryDuration *string             `json:"repeat_every_duration"`
	RepeatOn            *[]WorkflowRepeatOn `json:"repeat_on"`
	ServiceIds          *[]string           `json:"service_ids,omitempty"`
	SeverityIds         *[]string           `json:"severity_ids,omitempty"`

	// The slug of the workflow
	Slug          *string             `json:"slug,omitempty"`
	TriggerParams *interface{}        `json:"trigger_params,omitempty"`
	Triggers      *[]WorkflowTriggers `json:"triggers,omitempty"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// Wait this duration before executing.
	Wait *string `json:"wait"`
}

// Repeat on weekdays.
type WorkflowRepeatOn string

// Actions that trigger the workflow.
type WorkflowTriggers string

// WorkflowCustomFieldSelection defines model for workflow_custom_field_selection.
type WorkflowCustomFieldSelection struct {
	// The custom field for this selection
	CustomFieldId float32 `json:"custom_field_id"`

	// The trigger condition
	IncidentCondition WorkflowCustomFieldSelectionIncidentCondition `json:"incident_condition"`
	SelectedOptionIds []float32                                     `json:"selected_option_ids"`
}

// The trigger condition
type WorkflowCustomFieldSelectionIncidentCondition string

// WorkflowCustomFieldSelectionList defines model for workflow_custom_field_selection_list.
type WorkflowCustomFieldSelectionList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_custom_field_selection)
			WorkflowCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                   `json:"id"`
		Type WorkflowCustomFieldSelectionListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowCustomFieldSelectionListDataType defines model for WorkflowCustomFieldSelectionList.Data.Type.
type WorkflowCustomFieldSelectionListDataType string

// WorkflowCustomFieldSelectionResponse defines model for workflow_custom_field_selection_response.
type WorkflowCustomFieldSelectionResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_custom_field_selection)
			WorkflowCustomFieldSelection `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow_custom_field_selection
		Id   string                                       `json:"id"`
		Type WorkflowCustomFieldSelectionResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowCustomFieldSelectionResponseDataType defines model for WorkflowCustomFieldSelectionResponse.Data.Type.
type WorkflowCustomFieldSelectionResponseDataType string

// WorkflowList defines model for workflow_list.
type WorkflowList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow)
			Workflow `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string               `json:"id"`
		Type WorkflowListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowListDataType defines model for WorkflowList.Data.Type.
type WorkflowListDataType string

// WorkflowResponse defines model for workflow_response.
type WorkflowResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow)
			Workflow `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow
		Id   string                   `json:"id"`
		Type WorkflowResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowResponseDataType defines model for WorkflowResponse.Data.Type.
type WorkflowResponseDataType string

// WorkflowTask defines model for workflow_task.
type WorkflowTask struct {
	// Date of creation
	CreatedAt string `json:"created_at"`

	// The position of the workflow task
	Position   float32     `json:"position"`
	TaskParams interface{} `json:"task_params"`

	// Date of last update
	UpdatedAt string `json:"updated_at"`

	// The ID of the parent workflow
	WorkflowId string `json:"workflow_id"`
}

// WorkflowTaskList defines model for workflow_task_list.
type WorkflowTaskList struct {
	Data []struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_task)
			WorkflowTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                   `json:"id"`
		Type WorkflowTaskListDataType `json:"type"`
	} `json:"data"`
	Links struct {
		// Embedded struct due to allOf(#/components/schemas/links)
		Links `yaml:",inline"`
	} `json:"links"`
}

// WorkflowTaskListDataType defines model for WorkflowTaskList.Data.Type.
type WorkflowTaskListDataType string

// WorkflowTaskResponse defines model for workflow_task_response.
type WorkflowTaskResponse struct {
	Data struct {
		Attributes struct {
			// Embedded struct due to allOf(#/components/schemas/workflow_task)
			WorkflowTask `yaml:",inline"`
		} `json:"attributes"`

		// Unique ID of the workflow task
		Id   string                       `json:"id"`
		Type WorkflowTaskResponseDataType `json:"type"`
	} `json:"data"`
}

// WorkflowTaskResponseDataType defines model for WorkflowTaskResponse.Data.Type.
type WorkflowTaskResponseDataType string

// GetScimUsersParams defines parameters for GetScimUsers.
type GetScimUsersParams struct {
	Filter     string `json:"filter"`
	StartIndex *int   `json:"startIndex,omitempty"`
	Count      *int   `json:"count,omitempty"`
}

// ListAlertsParams defines parameters for ListAlerts.
type ListAlertsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCausesParams defines parameters for ListCauses.
type ListCausesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCustomFieldsParams defines parameters for ListCustomFields.
type ListCustomFieldsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListCustomFieldOptionsParams defines parameters for ListCustomFieldOptions.
type ListCustomFieldOptionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListFunctionalitiesParams defines parameters for ListFunctionalities.
type ListFunctionalitiesParams struct {
	Include      *string `json:"include,omitempty"`
	PageNumber   *int    `json:"page[number],omitempty"`
	PageSize     *int    `json:"page[size],omitempty"`
	FilterSearch *string `json:"filter[search],omitempty"`
	FilterName   *string `json:"filter[name],omitempty"`
	FilterSlug   *string `json:"filter[slug],omitempty"`
}

// GetFunctionalityIncidentsChartParams defines parameters for GetFunctionalityIncidentsChart.
type GetFunctionalityIncidentsChartParams struct {
	Period string `json:"period"`
}

// GetFunctionalityUptimeChartParams defines parameters for GetFunctionalityUptimeChart.
type GetFunctionalityUptimeChartParams struct {
	Period *string `json:"period,omitempty"`
}

// ListIncidentRolesParams defines parameters for ListIncidentRoles.
type ListIncidentRolesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentRoleTasksParams defines parameters for ListIncidentRoleTasks.
type ListIncidentRoleTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentTypesParams defines parameters for ListIncidentTypes.
type ListIncidentTypesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	Include                            *string        `json:"include,omitempty"`
	PageNumber                         *int           `json:"page[number],omitempty"`
	PageSize                           *int           `json:"page[size],omitempty"`
	FilterSearch                       *string        `json:"filter[search],omitempty"`
	FilterStatus                       *string        `json:"filter[status],omitempty"`
	FilterSeverity                     *string        `json:"filter[severity],omitempty"`
	FilterType                         *string        `json:"filter[type],omitempty"`
	FilterUserId                       *int           `json:"filter[user_id],omitempty"`
	FilterEnvironments                 *string        `json:"filter[environments],omitempty"`
	FilterFunctionalities              *string        `json:"filter[functionalities],omitempty"`
	FilterServices                     *[]interface{} `json:"filter[services],omitempty"`
	FilterTeams                        *[]interface{} `json:"filter[teams],omitempty"`
	FilterCustomFieldSelectedOptionIds *[]interface{} `json:"filter[custom_field_selected_option_ids],omitempty"`
}

// ListIncidentCustomFieldSelectionsParams defines parameters for ListIncidentCustomFieldSelections.
type ListIncidentCustomFieldSelectionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentActionItemsParams defines parameters for ListIncidentActionItems.
type ListIncidentActionItemsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListAlertParams defines parameters for ListAlert.
type ListAlertParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentEventsParams defines parameters for ListIncidentEvents.
type ListIncidentEventsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentFeedbacksParams defines parameters for ListIncidentFeedbacks.
type ListIncidentFeedbacksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentStatusPagesParams defines parameters for ListIncidentStatusPages.
type ListIncidentStatusPagesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPlaybooksParams defines parameters for ListPlaybooks.
type ListPlaybooksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPlaybookTasksParams defines parameters for ListPlaybookTasks.
type ListPlaybookTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListPostmortemTemplatesParams defines parameters for ListPostmortemTemplates.
type ListPostmortemTemplatesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListIncidentPostMortemsParams defines parameters for ListIncidentPostMortems.
type ListIncidentPostMortemsParams struct {
	Include               *string        `json:"include,omitempty"`
	PageNumber            *int           `json:"page[number],omitempty"`
	PageSize              *int           `json:"page[size],omitempty"`
	FilterSearch          *string        `json:"filter[search],omitempty"`
	FilterStatus          *string        `json:"filter[status],omitempty"`
	FilterSeverity        *string        `json:"filter[severity],omitempty"`
	FilterType            *string        `json:"filter[type],omitempty"`
	FilterUserId          *int           `json:"filter[user_id],omitempty"`
	FilterEnvironments    *string        `json:"filter[environments],omitempty"`
	FilterFunctionalities *string        `json:"filter[functionalities],omitempty"`
	FilterServices        *[]interface{} `json:"filter[services],omitempty"`
	FilterTeams           *[]interface{} `json:"filter[teams],omitempty"`
}

// ListPulsesParams defines parameters for ListPulses.
type ListPulsesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	Include           *string `json:"include,omitempty"`
	PageNumber        *int    `json:"page[number],omitempty"`
	PageSize          *int    `json:"page[size],omitempty"`
	FilterName        *string `json:"filter[name],omitempty"`
	FilterSlug        *string `json:"filter[slug],omitempty"`
	FilterBackstageId *string `json:"filter[backstage_id],omitempty"`
}

// GetServiceIncidentsChartParams defines parameters for GetServiceIncidentsChart.
type GetServiceIncidentsChartParams struct {
	Period string `json:"period"`
}

// GetServiceUptimeChartParams defines parameters for GetServiceUptimeChart.
type GetServiceUptimeChartParams struct {
	Period *string `json:"period,omitempty"`
}

// ListSeveritiesParams defines parameters for ListSeverities.
type ListSeveritiesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListStatusPagesParams defines parameters for ListStatusPages.
type ListStatusPagesParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowCustomFieldSelectionsParams defines parameters for ListWorkflowCustomFieldSelections.
type ListWorkflowCustomFieldSelectionsParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// ListWorkflowTasksParams defines parameters for ListWorkflowTasks.
type ListWorkflowTasksParams struct {
	Include    *string `json:"include,omitempty"`
	PageNumber *int    `json:"page[number],omitempty"`
	PageSize   *int    `json:"page[size],omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetScimUsers request
	GetScimUsers(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScimUsers request
	PostScimUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScimUsersId request
	DeleteScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScimUsersId request
	GetScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScimUsersId request
	PatchScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentActionItems request
	GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlerts request
	ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlert request with any body
	CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCauses request
	ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCause request with any body
	CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCause request
	DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCause request with any body
	UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOption request
	GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFields request
	ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomField request
	DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomField request
	GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentEvent request
	DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentEvents request
	GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentFeedback request
	DeleteIncidentFeedback(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionalities request
	ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionality request
	DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionality request
	GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRoleTasks request
	GetIncidentRoleTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoles request
	ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentRole request
	DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentRole request
	GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTypes request
	ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentType request
	DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentType request
	GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncident request
	DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncident request
	GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelIncident request with any body
	CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelections(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentActionItems request
	ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlert request
	ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachAlert request with any body
	AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentEvents request
	ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybookTask request
	DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybookTasks request
	GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybooks request
	ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaybook request
	DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaybook request
	GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaybookTasks request
	ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPulses request
	ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePulse request with any body
	CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePulse request with any body
	UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateService request with any body
	CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request with any body
	UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSeverities request
	ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSeverity request with any body
	CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeverity request
	DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeverity request
	GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStatusPages request
	ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusPage request
	DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusPage request
	GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowTask request
	GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflows request
	ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflow request
	DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflow request
	GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelections(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkflowTasks request
	ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetScimUsers(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScimUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScimUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScimUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScimUsersId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScimUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentActionItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentActionItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentActionItems(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentActionItemsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentActionItemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentActionItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlerts(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCauses(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCausesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCauseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOption(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldOptionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldOptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFields(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldOptions(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldOptionsRequest(c.Server, customFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomFieldOptionWithBody(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomFieldOptionRequestWithBody(c.Server, customFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomField(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomFieldWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomFieldRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentEvent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentEvents(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentEventsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentEventWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentEventRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentFeedback(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentFeedbackRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentFeedbacks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentFeedbacksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentFeedbackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionalities(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionalitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionalityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionalityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionality(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionalityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionalityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityIncidentsChart(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalityUptimeChart(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalityUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRoleTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRoleTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoles(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentRole(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentRoleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentRoleTasks(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentRoleTasksRequest(c.Server, incidentRoleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentRoleTaskWithBody(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRoleTaskRequestWithBody(c.Server, incidentRoleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTypes(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentCustomFieldSelections(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentCustomFieldSelectionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MitigateIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMitigateIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentActionItems(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentActionItemsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentActionItemWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentActionItemRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlert(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachAlertWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachAlertRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentEvents(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentEventsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentEventWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentEventRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentFeedbacks(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentFeedbacksRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentFeedbackWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentFeedbackRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentStatusPages(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentStatusPagesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentStatusPageWithBody(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentStatusPageRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybookTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybookTasks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookTasksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybooks(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaybook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaybookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlaybookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlaybookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaybookTasks(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlaybookTasksRequest(c.Server, playbookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaybookTaskWithBody(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaybookTaskRequestWithBody(c.Server, playbookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPostmortemTemplates(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPostmortemTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostmortemTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostmortemTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostmortemTemplate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostmortemTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostmortemTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostmortemTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostMortems(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostMortemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentPostmortem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentPostmortemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentPostmortemWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentPostmortemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPulses(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPulsesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePulseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePulseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIncidentsChart(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIncidentsChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceUptimeChart(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceUptimeChartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSeverities(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSeveritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSeverityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSeverityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeverity(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeverityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSeverityWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSeverityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentStatusPages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentStatusPagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStatusPages(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStatusPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStatusPageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStatusPageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusPage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusPageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStatusPageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStatusPageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowCustomFieldSelection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowCustomFieldSelectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowTask(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowTaskWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflows(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkflowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowCustomFieldSelections(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowCustomFieldSelectionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowCustomFieldSelectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowCustomFieldSelectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkflowTasks(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkflowTasksRequest(c.Server, workflowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkflowTaskWithBody(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkflowTaskRequestWithBody(c.Server, workflowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetScimUsersRequest generates requests for GetScimUsers
func NewGetScimUsersRequest(server string, params *GetScimUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, params.Filter); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartIndex != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScimUsersRequest generates requests for PostScimUsers
func NewPostScimUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteScimUsersIdRequest generates requests for DeleteScimUsersId
func NewDeleteScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScimUsersIdRequest generates requests for GetScimUsersId
func NewGetScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScimUsersIdRequest generates requests for PatchScimUsersId
func NewPatchScimUsersIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentActionItemRequest generates requests for DeleteIncidentActionItem
func NewDeleteIncidentActionItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentActionItemsRequest generates requests for GetIncidentActionItems
func NewGetIncidentActionItemsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentActionItemRequestWithBody generates requests for UpdateIncidentActionItem with any type of body
func NewUpdateIncidentActionItemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/action_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertsRequest generates requests for ListAlerts
func NewListAlertsRequest(server string, params *ListAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertRequestWithBody generates requests for CreateAlert with any type of body
func NewCreateAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCausesRequest generates requests for ListCauses
func NewListCausesRequest(server string, params *ListCausesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCauseRequestWithBody generates requests for CreateCause with any type of body
func NewCreateCauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCauseRequest generates requests for DeleteCause
func NewDeleteCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCauseRequestWithBody generates requests for UpdateCause with any type of body
func NewUpdateCauseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldOptionRequest generates requests for DeleteCustomFieldOption
func NewDeleteCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldOptionRequest generates requests for GetCustomFieldOption
func NewGetCustomFieldOptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldOptionRequestWithBody generates requests for UpdateCustomFieldOption with any type of body
func NewUpdateCustomFieldOptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldsRequest generates requests for ListCustomFields
func NewListCustomFieldsRequest(server string, params *ListCustomFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldRequestWithBody generates requests for CreateCustomField with any type of body
func NewCreateCustomFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldOptionsRequest generates requests for ListCustomFieldOptions
func NewListCustomFieldOptionsRequest(server string, customFieldId string, params *ListCustomFieldOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomFieldOptionRequestWithBody generates requests for CreateCustomFieldOption with any type of body
func NewCreateCustomFieldOptionRequestWithBody(server string, customFieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, customFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldRequest generates requests for DeleteCustomField
func NewDeleteCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldRequest generates requests for GetCustomField
func NewGetCustomFieldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomFieldRequestWithBody generates requests for UpdateCustomField with any type of body
func NewUpdateCustomFieldRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentEventRequest generates requests for DeleteIncidentEvent
func NewDeleteIncidentEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentEventsRequest generates requests for GetIncidentEvents
func NewGetIncidentEventsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentEventRequestWithBody generates requests for UpdateIncidentEvent with any type of body
func NewUpdateIncidentEventRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentFeedbackRequest generates requests for DeleteIncidentFeedback
func NewDeleteIncidentFeedbackRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentFeedbacksRequest generates requests for GetIncidentFeedbacks
func NewGetIncidentFeedbacksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentFeedbackRequestWithBody generates requests for UpdateIncidentFeedback with any type of body
func NewUpdateIncidentFeedbackRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionalitiesRequest generates requests for ListFunctionalities
func NewListFunctionalitiesRequest(server string, params *ListFunctionalitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionalityRequestWithBody generates requests for CreateFunctionality with any type of body
func NewCreateFunctionalityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionalityRequest generates requests for DeleteFunctionality
func NewDeleteFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityRequest generates requests for GetFunctionality
func NewGetFunctionalityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionalityRequestWithBody generates requests for UpdateFunctionality with any type of body
func NewUpdateFunctionalityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionalityIncidentsChartRequest generates requests for GetFunctionalityIncidentsChart
func NewGetFunctionalityIncidentsChartRequest(server string, id string, params *GetFunctionalityIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalityUptimeChartRequest generates requests for GetFunctionalityUptimeChart
func NewGetFunctionalityUptimeChartRequest(server string, id string, params *GetFunctionalityUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/functionalities/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncidentCustomFieldSelectionRequest generates requests for DeleteIncidentCustomFieldSelection
func NewDeleteIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentCustomFieldSelectionRequest generates requests for GetIncidentCustomFieldSelection
func NewGetIncidentCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentCustomFieldSelectionRequestWithBody generates requests for UpdateIncidentCustomFieldSelection with any type of body
func NewUpdateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleTaskRequest generates requests for DeleteIncidentRoleTask
func NewDeleteIncidentRoleTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleTasksRequest generates requests for GetIncidentRoleTasks
func NewGetIncidentRoleTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleTaskRequestWithBody generates requests for UpdateIncidentRoleTask with any type of body
func NewUpdateIncidentRoleTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_role_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRolesRequest generates requests for ListIncidentRoles
func NewListIncidentRolesRequest(server string, params *ListIncidentRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleRequestWithBody generates requests for CreateIncidentRole with any type of body
func NewCreateIncidentRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRoleRequest generates requests for DeleteIncidentRole
func NewDeleteIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRoleRequest generates requests for GetIncidentRole
func NewGetIncidentRoleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRoleRequestWithBody generates requests for UpdateIncidentRole with any type of body
func NewUpdateIncidentRoleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentRoleTasksRequest generates requests for ListIncidentRoleTasks
func NewListIncidentRoleTasksRequest(server string, incidentRoleId string, params *ListIncidentRoleTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRoleTaskRequestWithBody generates requests for CreateIncidentRoleTask with any type of body
func NewCreateIncidentRoleTaskRequestWithBody(server string, incidentRoleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, incidentRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s/incident_role_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTypesRequest generates requests for ListIncidentTypes
func NewListIncidentTypesRequest(server string, params *ListIncidentTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentTypeRequestWithBody generates requests for CreateIncidentType with any type of body
func NewCreateIncidentTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentTypeRequest generates requests for DeleteIncidentType
func NewDeleteIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentTypeRequest generates requests for GetIncidentType
func NewGetIncidentTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentTypeRequestWithBody generates requests for UpdateIncidentType with any type of body
func NewUpdateIncidentTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCustomFieldSelectedOptionIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[custom_field_selected_option_ids]", runtime.ParamLocationQuery, *params.FilterCustomFieldSelectedOptionIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentRequest generates requests for DeleteIncident
func NewDeleteIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentRequest generates requests for GetIncident
func NewGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentRequestWithBody generates requests for UpdateIncident with any type of body
func NewUpdateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelIncidentRequestWithBody generates requests for CancelIncident with any type of body
func NewCancelIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentCustomFieldSelectionsRequest generates requests for ListIncidentCustomFieldSelections
func NewListIncidentCustomFieldSelectionsRequest(server string, id string, params *ListIncidentCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentCustomFieldSelectionRequestWithBody generates requests for CreateIncidentCustomFieldSelection with any type of body
func NewCreateIncidentCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMitigateIncidentRequestWithBody generates requests for MitigateIncident with any type of body
func NewMitigateIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/mitigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentActionItemsRequest generates requests for ListIncidentActionItems
func NewListIncidentActionItemsRequest(server string, incidentId string, params *ListIncidentActionItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentActionItemRequestWithBody generates requests for CreateIncidentActionItem with any type of body
func NewCreateIncidentActionItemRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/action_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertRequest generates requests for ListAlert
func NewListAlertRequest(server string, incidentId string, params *ListAlertParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachAlertRequestWithBody generates requests for AttachAlert with any type of body
func NewAttachAlertRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentEventsRequest generates requests for ListIncidentEvents
func NewListIncidentEventsRequest(server string, incidentId string, params *ListIncidentEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentEventRequestWithBody generates requests for CreateIncidentEvent with any type of body
func NewCreateIncidentEventRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentFeedbacksRequest generates requests for ListIncidentFeedbacks
func NewListIncidentFeedbacksRequest(server string, incidentId string, params *ListIncidentFeedbacksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentFeedbackRequestWithBody generates requests for CreateIncidentFeedback with any type of body
func NewCreateIncidentFeedbackRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/feedbacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentStatusPagesRequest generates requests for ListIncidentStatusPages
func NewListIncidentStatusPagesRequest(server string, incidentId string, params *ListIncidentStatusPagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentStatusPageRequestWithBody generates requests for CreateIncidentStatusPage with any type of body
func NewCreateIncidentStatusPageRequestWithBody(server string, incidentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/status-page-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookTaskRequest generates requests for DeletePlaybookTask
func NewDeletePlaybookTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookTasksRequest generates requests for GetPlaybookTasks
func NewGetPlaybookTasksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookTaskRequestWithBody generates requests for UpdatePlaybookTask with any type of body
func NewUpdatePlaybookTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbook_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybooksRequest generates requests for ListPlaybooks
func NewListPlaybooksRequest(server string, params *ListPlaybooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookRequestWithBody generates requests for CreatePlaybook with any type of body
func NewCreatePlaybookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaybookRequest generates requests for DeletePlaybook
func NewDeletePlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaybookRequest generates requests for GetPlaybook
func NewGetPlaybookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlaybookRequestWithBody generates requests for UpdatePlaybook with any type of body
func NewUpdatePlaybookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlaybookTasksRequest generates requests for ListPlaybookTasks
func NewListPlaybookTasksRequest(server string, playbookId string, params *ListPlaybookTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaybookTaskRequestWithBody generates requests for CreatePlaybookTask with any type of body
func NewCreatePlaybookTaskRequestWithBody(server string, playbookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, playbookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/playbooks/%s/playbook_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPostmortemTemplatesRequest generates requests for ListPostmortemTemplates
func NewListPostmortemTemplatesRequest(server string, params *ListPostmortemTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostmortemTemplateRequestWithBody generates requests for CreatePostmortemTemplate with any type of body
func NewCreatePostmortemTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostmortemTemplateRequest generates requests for DeletePostmortemTemplate
func NewDeletePostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostmortemTemplateRequest generates requests for GetPostmortemTemplate
func NewGetPostmortemTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostmortemTemplateRequestWithBody generates requests for UpdatePostmortemTemplate with any type of body
func NewUpdatePostmortemTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortem_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentPostMortemsRequest generates requests for ListIncidentPostMortems
func NewListIncidentPostMortemsRequest(server string, params *ListIncidentPostMortemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSearch != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[search]", runtime.ParamLocationQuery, *params.FilterSearch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[type]", runtime.ParamLocationQuery, *params.FilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user_id]", runtime.ParamLocationQuery, *params.FilterUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterEnvironments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[environments]", runtime.ParamLocationQuery, *params.FilterEnvironments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFunctionalities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[functionalities]", runtime.ParamLocationQuery, *params.FilterFunctionalities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterServices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[services]", runtime.ParamLocationQuery, *params.FilterServices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTeams != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[teams]", runtime.ParamLocationQuery, *params.FilterTeams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentPostmortemRequest generates requests for ListIncidentPostmortem
func NewListIncidentPostmortemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentPostmortemRequestWithBody generates requests for UpdateIncidentPostmortem with any type of body
func NewUpdateIncidentPostmortemRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post_mortems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPulsesRequest generates requests for ListPulses
func NewListPulsesRequest(server string, params *ListPulsesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePulseRequestWithBody generates requests for CreatePulse with any type of body
func NewCreatePulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePulseRequestWithBody generates requests for UpdatePulse with any type of body
func NewUpdatePulseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pulses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSlug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[slug]", runtime.ParamLocationQuery, *params.FilterSlug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBackstageId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backstage_id]", runtime.ParamLocationQuery, *params.FilterBackstageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceRequestWithBody generates requests for CreateService with any type of body
func NewCreateServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceIncidentsChartRequest generates requests for GetServiceIncidentsChart
func NewGetServiceIncidentsChartRequest(server string, id string, params *GetServiceIncidentsChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/incidents_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceUptimeChartRequest generates requests for GetServiceUptimeChart
func NewGetServiceUptimeChartRequest(server string, id string, params *GetServiceUptimeChartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/uptime_chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Period != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSeveritiesRequest generates requests for ListSeverities
func NewListSeveritiesRequest(server string, params *ListSeveritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSeverityRequestWithBody generates requests for CreateSeverity with any type of body
func NewCreateSeverityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSeverityRequest generates requests for DeleteSeverity
func NewDeleteSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeverityRequest generates requests for GetSeverity
func NewGetSeverityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSeverityRequestWithBody generates requests for UpdateSeverity with any type of body
func NewUpdateSeverityRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentStatusPageRequest generates requests for DeleteIncidentStatusPage
func NewDeleteIncidentStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentStatusPagesRequest generates requests for GetIncidentStatusPages
func NewGetIncidentStatusPagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentStatusPageRequestWithBody generates requests for UpdateIncidentStatusPage with any type of body
func NewUpdateIncidentStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-page-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStatusPagesRequest generates requests for ListStatusPages
func NewListStatusPagesRequest(server string, params *ListStatusPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStatusPageRequestWithBody generates requests for CreateStatusPage with any type of body
func NewCreateStatusPageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusPageRequest generates requests for DeleteStatusPage
func NewDeleteStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusPageRequest generates requests for GetStatusPage
func NewGetStatusPageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStatusPageRequestWithBody generates requests for UpdateStatusPage with any type of body
func NewUpdateStatusPageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status-pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowCustomFieldSelectionRequest generates requests for DeleteWorkflowCustomFieldSelection
func NewDeleteWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowCustomFieldSelectionRequest generates requests for GetWorkflowCustomFieldSelection
func NewGetWorkflowCustomFieldSelectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowCustomFieldSelectionRequestWithBody generates requests for UpdateWorkflowCustomFieldSelection with any type of body
func NewUpdateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_custom_field_selections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowTaskRequest generates requests for DeleteWorkflowTask
func NewDeleteWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowTaskRequest generates requests for GetWorkflowTask
func NewGetWorkflowTaskRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowTaskRequestWithBody generates requests for UpdateWorkflowTask with any type of body
func NewUpdateWorkflowTaskRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflow_tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowsRequest generates requests for ListWorkflows
func NewListWorkflowsRequest(server string, params *ListWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowRequestWithBody generates requests for CreateWorkflow with any type of body
func NewCreateWorkflowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowRequest generates requests for DeleteWorkflow
func NewDeleteWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowRequest generates requests for GetWorkflow
func NewGetWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkflowRequestWithBody generates requests for UpdateWorkflow with any type of body
func NewUpdateWorkflowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowCustomFieldSelectionsRequest generates requests for ListWorkflowCustomFieldSelections
func NewListWorkflowCustomFieldSelectionsRequest(server string, id string, params *ListWorkflowCustomFieldSelectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowCustomFieldSelectionRequestWithBody generates requests for CreateWorkflowCustomFieldSelection with any type of body
func NewCreateWorkflowCustomFieldSelectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/custom_field_selections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkflowTasksRequest generates requests for ListWorkflowTasks
func NewListWorkflowTasksRequest(server string, workflowId string, params *ListWorkflowTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[number]", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkflowTaskRequestWithBody generates requests for CreateWorkflowTask with any type of body
func NewCreateWorkflowTaskRequestWithBody(server string, workflowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, workflowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workflows/%s/workflow_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetScimUsers request
	GetScimUsersWithResponse(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*GetScimUsersResponse, error)

	// PostScimUsers request
	PostScimUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostScimUsersResponse, error)

	// DeleteScimUsersId request
	DeleteScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteScimUsersIdResponse, error)

	// GetScimUsersId request
	GetScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetScimUsersIdResponse, error)

	// PatchScimUsersId request
	PatchScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PatchScimUsersIdResponse, error)

	// DeleteIncidentActionItem request
	DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error)

	// GetIncidentActionItems request
	GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error)

	// UpdateIncidentActionItem request with any body
	UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error)

	// ListAlerts request
	ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error)

	// CreateAlert request with any body
	CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	// GetAlert request
	GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// ListCauses request
	ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error)

	// CreateCause request with any body
	CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error)

	// DeleteCause request
	DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// UpdateCause request with any body
	UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error)

	// DeleteCustomFieldOption request
	DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error)

	// GetCustomFieldOption request
	GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error)

	// UpdateCustomFieldOption request with any body
	UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error)

	// ListCustomFields request
	ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error)

	// CreateCustomField request with any body
	CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error)

	// ListCustomFieldOptions request
	ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error)

	// CreateCustomFieldOption request with any body
	CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error)

	// DeleteCustomField request
	DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error)

	// GetCustomField request
	GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error)

	// UpdateCustomField request with any body
	UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// DeleteIncidentEvent request
	DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error)

	// GetIncidentEvents request
	GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error)

	// UpdateIncidentEvent request with any body
	UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error)

	// DeleteIncidentFeedback request
	DeleteIncidentFeedbackWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFeedbackResponse, error)

	// GetIncidentFeedbacks request
	GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error)

	// UpdateIncidentFeedback request with any body
	UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error)

	// ListFunctionalities request
	ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error)

	// CreateFunctionality request with any body
	CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error)

	// DeleteFunctionality request
	DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error)

	// GetFunctionality request
	GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error)

	// UpdateFunctionality request with any body
	UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error)

	// GetFunctionalityIncidentsChart request
	GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error)

	// GetFunctionalityUptimeChart request
	GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error)

	// DeleteIncidentCustomFieldSelection request
	DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error)

	// GetIncidentCustomFieldSelection request
	GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error)

	// UpdateIncidentCustomFieldSelection request with any body
	UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error)

	// DeleteIncidentRoleTask request
	DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error)

	// GetIncidentRoleTasks request
	GetIncidentRoleTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTasksResponse, error)

	// UpdateIncidentRoleTask request with any body
	UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error)

	// ListIncidentRoles request
	ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error)

	// CreateIncidentRole request with any body
	CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error)

	// DeleteIncidentRole request
	DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error)

	// GetIncidentRole request
	GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error)

	// UpdateIncidentRole request with any body
	UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error)

	// ListIncidentRoleTasks request
	ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error)

	// CreateIncidentRoleTask request with any body
	CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error)

	// ListIncidentTypes request
	ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error)

	// CreateIncidentType request with any body
	CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error)

	// DeleteIncidentType request
	DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error)

	// GetIncidentType request
	GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error)

	// UpdateIncidentType request with any body
	UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// DeleteIncident request
	DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error)

	// GetIncident request
	GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error)

	// UpdateIncident request with any body
	UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error)

	// CancelIncident request with any body
	CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error)

	// ListIncidentCustomFieldSelections request
	ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error)

	// CreateIncidentCustomFieldSelection request with any body
	CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error)

	// MitigateIncident request with any body
	MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error)

	// ResolveIncident request with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ListIncidentActionItems request
	ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error)

	// CreateIncidentActionItem request with any body
	CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error)

	// ListAlert request
	ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error)

	// AttachAlert request with any body
	AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error)

	// ListIncidentEvents request
	ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error)

	// CreateIncidentEvent request with any body
	CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error)

	// ListIncidentFeedbacks request
	ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error)

	// CreateIncidentFeedback request with any body
	CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error)

	// ListIncidentStatusPages request
	ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error)

	// CreateIncidentStatusPage request with any body
	CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error)

	// DeletePlaybookTask request
	DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error)

	// GetPlaybookTasks request
	GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error)

	// UpdatePlaybookTask request with any body
	UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error)

	// ListPlaybooks request
	ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error)

	// CreatePlaybook request with any body
	CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error)

	// DeletePlaybook request
	DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error)

	// GetPlaybook request
	GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error)

	// UpdatePlaybook request with any body
	UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error)

	// ListPlaybookTasks request
	ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error)

	// CreatePlaybookTask request with any body
	CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error)

	// ListPostmortemTemplates request
	ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error)

	// CreatePostmortemTemplate request with any body
	CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error)

	// DeletePostmortemTemplate request
	DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error)

	// GetPostmortemTemplate request
	GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error)

	// UpdatePostmortemTemplate request with any body
	UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error)

	// ListIncidentPostMortems request
	ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error)

	// ListIncidentPostmortem request
	ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error)

	// UpdateIncidentPostmortem request with any body
	UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error)

	// ListPulses request
	ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error)

	// CreatePulse request with any body
	CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error)

	// GetPulse request
	GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// UpdatePulse request with any body
	UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// CreateService request with any body
	CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// UpdateService request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	// GetServiceIncidentsChart request
	GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error)

	// GetServiceUptimeChart request
	GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error)

	// ListSeverities request
	ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error)

	// CreateSeverity request with any body
	CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error)

	// DeleteSeverity request
	DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error)

	// GetSeverity request
	GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error)

	// UpdateSeverity request with any body
	UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error)

	// DeleteIncidentStatusPage request
	DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error)

	// GetIncidentStatusPages request
	GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error)

	// UpdateIncidentStatusPage request with any body
	UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error)

	// ListStatusPages request
	ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error)

	// CreateStatusPage request with any body
	CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error)

	// DeleteStatusPage request
	DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error)

	// GetStatusPage request
	GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error)

	// UpdateStatusPage request with any body
	UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// DeleteWorkflowCustomFieldSelection request
	DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error)

	// GetWorkflowCustomFieldSelection request
	GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error)

	// UpdateWorkflowCustomFieldSelection request with any body
	UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error)

	// DeleteWorkflowTask request
	DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error)

	// GetWorkflowTask request
	GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error)

	// UpdateWorkflowTask request with any body
	UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error)

	// ListWorkflows request
	ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error)

	// CreateWorkflow request with any body
	CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error)

	// DeleteWorkflow request
	DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error)

	// GetWorkflow request
	GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error)

	// UpdateWorkflow request with any body
	UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error)

	// ListWorkflowCustomFieldSelections request
	ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error)

	// CreateWorkflowCustomFieldSelection request with any body
	CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error)

	// ListWorkflowTasks request
	ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error)

	// CreateWorkflowTask request with any body
	CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error)
}

type GetScimUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScimUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScimUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScimUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostScimUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScimUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScimUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchScimUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScimUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCausesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCausesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCausesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomFieldOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCustomFieldOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomFieldOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionalitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListFunctionalitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionalitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalityUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionalityUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalityUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentRoleTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentRoleTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentRoleTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentRoleTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentRoleTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentRoleTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MitigateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MitigateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MitigateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentActionItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentActionItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentActionItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentActionItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentActionItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentActionItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlaybookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePlaybookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlaybookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlaybookTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPlaybookTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlaybookTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaybookTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaybookTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaybookTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPostmortemTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPostmortemTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPostmortemTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostmortemTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePostmortemTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostmortemTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostMortemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostMortemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostMortemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentPostmortemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentPostmortemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentPostmortemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPulsesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListPulsesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPulsesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIncidentsChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceIncidentsChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIncidentsChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceUptimeChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceUptimeChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceUptimeChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSeveritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListSeveritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSeveritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStatusPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListStatusPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStatusPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStatusPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStatusPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStatusPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowCustomFieldSelectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowCustomFieldSelectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowCustomFieldSelectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowCustomFieldSelectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowCustomFieldSelectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowCustomFieldSelectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkflowTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListWorkflowTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkflowTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkflowTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateWorkflowTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkflowTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetScimUsersWithResponse request returning *GetScimUsersResponse
func (c *ClientWithResponses) GetScimUsersWithResponse(ctx context.Context, params *GetScimUsersParams, reqEditors ...RequestEditorFn) (*GetScimUsersResponse, error) {
	rsp, err := c.GetScimUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScimUsersResponse(rsp)
}

// PostScimUsersWithResponse request returning *PostScimUsersResponse
func (c *ClientWithResponses) PostScimUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostScimUsersResponse, error) {
	rsp, err := c.PostScimUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScimUsersResponse(rsp)
}

// DeleteScimUsersIdWithResponse request returning *DeleteScimUsersIdResponse
func (c *ClientWithResponses) DeleteScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteScimUsersIdResponse, error) {
	rsp, err := c.DeleteScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScimUsersIdResponse(rsp)
}

// GetScimUsersIdWithResponse request returning *GetScimUsersIdResponse
func (c *ClientWithResponses) GetScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetScimUsersIdResponse, error) {
	rsp, err := c.GetScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScimUsersIdResponse(rsp)
}

// PatchScimUsersIdWithResponse request returning *PatchScimUsersIdResponse
func (c *ClientWithResponses) PatchScimUsersIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PatchScimUsersIdResponse, error) {
	rsp, err := c.PatchScimUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScimUsersIdResponse(rsp)
}

// DeleteIncidentActionItemWithResponse request returning *DeleteIncidentActionItemResponse
func (c *ClientWithResponses) DeleteIncidentActionItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentActionItemResponse, error) {
	rsp, err := c.DeleteIncidentActionItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentActionItemResponse(rsp)
}

// GetIncidentActionItemsWithResponse request returning *GetIncidentActionItemsResponse
func (c *ClientWithResponses) GetIncidentActionItemsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentActionItemsResponse, error) {
	rsp, err := c.GetIncidentActionItems(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentActionItemsResponse(rsp)
}

// UpdateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentActionItemResponse
func (c *ClientWithResponses) UpdateIncidentActionItemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentActionItemResponse, error) {
	rsp, err := c.UpdateIncidentActionItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentActionItemResponse(rsp)
}

// ListAlertsWithResponse request returning *ListAlertsResponse
func (c *ClientWithResponses) ListAlertsWithResponse(ctx context.Context, params *ListAlertsParams, reqEditors ...RequestEditorFn) (*ListAlertsResponse, error) {
	rsp, err := c.ListAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertsResponse(rsp)
}

// CreateAlertWithBodyWithResponse request with arbitrary body returning *CreateAlertResponse
func (c *ClientWithResponses) CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// ListCausesWithResponse request returning *ListCausesResponse
func (c *ClientWithResponses) ListCausesWithResponse(ctx context.Context, params *ListCausesParams, reqEditors ...RequestEditorFn) (*ListCausesResponse, error) {
	rsp, err := c.ListCauses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCausesResponse(rsp)
}

// CreateCauseWithBodyWithResponse request with arbitrary body returning *CreateCauseResponse
func (c *ClientWithResponses) CreateCauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCauseResponse, error) {
	rsp, err := c.CreateCauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCauseResponse(rsp)
}

// DeleteCauseWithResponse request returning *DeleteCauseResponse
func (c *ClientWithResponses) DeleteCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCauseResponse, error) {
	rsp, err := c.DeleteCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCauseResponse(rsp)
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCauseResponse(rsp)
}

// UpdateCauseWithBodyWithResponse request with arbitrary body returning *UpdateCauseResponse
func (c *ClientWithResponses) UpdateCauseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCauseResponse, error) {
	rsp, err := c.UpdateCauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCauseResponse(rsp)
}

// DeleteCustomFieldOptionWithResponse request returning *DeleteCustomFieldOptionResponse
func (c *ClientWithResponses) DeleteCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResponse, error) {
	rsp, err := c.DeleteCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldOptionResponse(rsp)
}

// GetCustomFieldOptionWithResponse request returning *GetCustomFieldOptionResponse
func (c *ClientWithResponses) GetCustomFieldOptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResponse, error) {
	rsp, err := c.GetCustomFieldOption(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionResponse(rsp)
}

// UpdateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldOptionResponse
func (c *ClientWithResponses) UpdateCustomFieldOptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldOptionResponse, error) {
	rsp, err := c.UpdateCustomFieldOptionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldOptionResponse(rsp)
}

// ListCustomFieldsWithResponse request returning *ListCustomFieldsResponse
func (c *ClientWithResponses) ListCustomFieldsWithResponse(ctx context.Context, params *ListCustomFieldsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldsResponse, error) {
	rsp, err := c.ListCustomFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldsResponse(rsp)
}

// CreateCustomFieldWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldResponse
func (c *ClientWithResponses) CreateCustomFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldResponse, error) {
	rsp, err := c.CreateCustomFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldResponse(rsp)
}

// ListCustomFieldOptionsWithResponse request returning *ListCustomFieldOptionsResponse
func (c *ClientWithResponses) ListCustomFieldOptionsWithResponse(ctx context.Context, customFieldId string, params *ListCustomFieldOptionsParams, reqEditors ...RequestEditorFn) (*ListCustomFieldOptionsResponse, error) {
	rsp, err := c.ListCustomFieldOptions(ctx, customFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldOptionsResponse(rsp)
}

// CreateCustomFieldOptionWithBodyWithResponse request with arbitrary body returning *CreateCustomFieldOptionResponse
func (c *ClientWithResponses) CreateCustomFieldOptionWithBodyWithResponse(ctx context.Context, customFieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomFieldOptionResponse, error) {
	rsp, err := c.CreateCustomFieldOptionWithBody(ctx, customFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomFieldOptionResponse(rsp)
}

// DeleteCustomFieldWithResponse request returning *DeleteCustomFieldResponse
func (c *ClientWithResponses) DeleteCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResponse, error) {
	rsp, err := c.DeleteCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResponse(rsp)
}

// GetCustomFieldWithResponse request returning *GetCustomFieldResponse
func (c *ClientWithResponses) GetCustomFieldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomFieldResponse, error) {
	rsp, err := c.GetCustomField(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResponse(rsp)
}

// UpdateCustomFieldWithBodyWithResponse request with arbitrary body returning *UpdateCustomFieldResponse
func (c *ClientWithResponses) UpdateCustomFieldWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomFieldResponse, error) {
	rsp, err := c.UpdateCustomFieldWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomFieldResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// DeleteIncidentEventWithResponse request returning *DeleteIncidentEventResponse
func (c *ClientWithResponses) DeleteIncidentEventWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentEventResponse, error) {
	rsp, err := c.DeleteIncidentEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentEventResponse(rsp)
}

// GetIncidentEventsWithResponse request returning *GetIncidentEventsResponse
func (c *ClientWithResponses) GetIncidentEventsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentEventsResponse, error) {
	rsp, err := c.GetIncidentEvents(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentEventsResponse(rsp)
}

// UpdateIncidentEventWithBodyWithResponse request with arbitrary body returning *UpdateIncidentEventResponse
func (c *ClientWithResponses) UpdateIncidentEventWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentEventResponse, error) {
	rsp, err := c.UpdateIncidentEventWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentEventResponse(rsp)
}

// DeleteIncidentFeedbackWithResponse request returning *DeleteIncidentFeedbackResponse
func (c *ClientWithResponses) DeleteIncidentFeedbackWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentFeedbackResponse, error) {
	rsp, err := c.DeleteIncidentFeedback(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentFeedbackResponse(rsp)
}

// GetIncidentFeedbacksWithResponse request returning *GetIncidentFeedbacksResponse
func (c *ClientWithResponses) GetIncidentFeedbacksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentFeedbacksResponse, error) {
	rsp, err := c.GetIncidentFeedbacks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentFeedbacksResponse(rsp)
}

// UpdateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateIncidentFeedbackResponse
func (c *ClientWithResponses) UpdateIncidentFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentFeedbackResponse, error) {
	rsp, err := c.UpdateIncidentFeedbackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentFeedbackResponse(rsp)
}

// ListFunctionalitiesWithResponse request returning *ListFunctionalitiesResponse
func (c *ClientWithResponses) ListFunctionalitiesWithResponse(ctx context.Context, params *ListFunctionalitiesParams, reqEditors ...RequestEditorFn) (*ListFunctionalitiesResponse, error) {
	rsp, err := c.ListFunctionalities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionalitiesResponse(rsp)
}

// CreateFunctionalityWithBodyWithResponse request with arbitrary body returning *CreateFunctionalityResponse
func (c *ClientWithResponses) CreateFunctionalityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionalityResponse, error) {
	rsp, err := c.CreateFunctionalityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionalityResponse(rsp)
}

// DeleteFunctionalityWithResponse request returning *DeleteFunctionalityResponse
func (c *ClientWithResponses) DeleteFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFunctionalityResponse, error) {
	rsp, err := c.DeleteFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionalityResponse(rsp)
}

// GetFunctionalityWithResponse request returning *GetFunctionalityResponse
func (c *ClientWithResponses) GetFunctionalityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFunctionalityResponse, error) {
	rsp, err := c.GetFunctionality(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityResponse(rsp)
}

// UpdateFunctionalityWithBodyWithResponse request with arbitrary body returning *UpdateFunctionalityResponse
func (c *ClientWithResponses) UpdateFunctionalityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionalityResponse, error) {
	rsp, err := c.UpdateFunctionalityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionalityResponse(rsp)
}

// GetFunctionalityIncidentsChartWithResponse request returning *GetFunctionalityIncidentsChartResponse
func (c *ClientWithResponses) GetFunctionalityIncidentsChartWithResponse(ctx context.Context, id string, params *GetFunctionalityIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityIncidentsChartResponse, error) {
	rsp, err := c.GetFunctionalityIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityIncidentsChartResponse(rsp)
}

// GetFunctionalityUptimeChartWithResponse request returning *GetFunctionalityUptimeChartResponse
func (c *ClientWithResponses) GetFunctionalityUptimeChartWithResponse(ctx context.Context, id string, params *GetFunctionalityUptimeChartParams, reqEditors ...RequestEditorFn) (*GetFunctionalityUptimeChartResponse, error) {
	rsp, err := c.GetFunctionalityUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalityUptimeChartResponse(rsp)
}

// DeleteIncidentCustomFieldSelectionWithResponse request returning *DeleteIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentCustomFieldSelectionResponse(rsp)
}

// GetIncidentCustomFieldSelectionWithResponse request returning *GetIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) GetIncidentCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.GetIncidentCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentCustomFieldSelectionResponse(rsp)
}

// UpdateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentCustomFieldSelectionResponse(rsp)
}

// DeleteIncidentRoleTaskWithResponse request returning *DeleteIncidentRoleTaskResponse
func (c *ClientWithResponses) DeleteIncidentRoleTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleTaskResponse, error) {
	rsp, err := c.DeleteIncidentRoleTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleTaskResponse(rsp)
}

// GetIncidentRoleTasksWithResponse request returning *GetIncidentRoleTasksResponse
func (c *ClientWithResponses) GetIncidentRoleTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleTasksResponse, error) {
	rsp, err := c.GetIncidentRoleTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleTasksResponse(rsp)
}

// UpdateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleTaskResponse
func (c *ClientWithResponses) UpdateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleTaskResponse, error) {
	rsp, err := c.UpdateIncidentRoleTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleTaskResponse(rsp)
}

// ListIncidentRolesWithResponse request returning *ListIncidentRolesResponse
func (c *ClientWithResponses) ListIncidentRolesWithResponse(ctx context.Context, params *ListIncidentRolesParams, reqEditors ...RequestEditorFn) (*ListIncidentRolesResponse, error) {
	rsp, err := c.ListIncidentRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRolesResponse(rsp)
}

// CreateIncidentRoleWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleResponse
func (c *ClientWithResponses) CreateIncidentRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleResponse, error) {
	rsp, err := c.CreateIncidentRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleResponse(rsp)
}

// DeleteIncidentRoleWithResponse request returning *DeleteIncidentRoleResponse
func (c *ClientWithResponses) DeleteIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentRoleResponse, error) {
	rsp, err := c.DeleteIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentRoleResponse(rsp)
}

// GetIncidentRoleWithResponse request returning *GetIncidentRoleResponse
func (c *ClientWithResponses) GetIncidentRoleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentRoleResponse, error) {
	rsp, err := c.GetIncidentRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentRoleResponse(rsp)
}

// UpdateIncidentRoleWithBodyWithResponse request with arbitrary body returning *UpdateIncidentRoleResponse
func (c *ClientWithResponses) UpdateIncidentRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentRoleResponse, error) {
	rsp, err := c.UpdateIncidentRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentRoleResponse(rsp)
}

// ListIncidentRoleTasksWithResponse request returning *ListIncidentRoleTasksResponse
func (c *ClientWithResponses) ListIncidentRoleTasksWithResponse(ctx context.Context, incidentRoleId string, params *ListIncidentRoleTasksParams, reqEditors ...RequestEditorFn) (*ListIncidentRoleTasksResponse, error) {
	rsp, err := c.ListIncidentRoleTasks(ctx, incidentRoleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentRoleTasksResponse(rsp)
}

// CreateIncidentRoleTaskWithBodyWithResponse request with arbitrary body returning *CreateIncidentRoleTaskResponse
func (c *ClientWithResponses) CreateIncidentRoleTaskWithBodyWithResponse(ctx context.Context, incidentRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentRoleTaskResponse, error) {
	rsp, err := c.CreateIncidentRoleTaskWithBody(ctx, incidentRoleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentRoleTaskResponse(rsp)
}

// ListIncidentTypesWithResponse request returning *ListIncidentTypesResponse
func (c *ClientWithResponses) ListIncidentTypesWithResponse(ctx context.Context, params *ListIncidentTypesParams, reqEditors ...RequestEditorFn) (*ListIncidentTypesResponse, error) {
	rsp, err := c.ListIncidentTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTypesResponse(rsp)
}

// CreateIncidentTypeWithBodyWithResponse request with arbitrary body returning *CreateIncidentTypeResponse
func (c *ClientWithResponses) CreateIncidentTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentTypeResponse, error) {
	rsp, err := c.CreateIncidentTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentTypeResponse(rsp)
}

// DeleteIncidentTypeWithResponse request returning *DeleteIncidentTypeResponse
func (c *ClientWithResponses) DeleteIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentTypeResponse, error) {
	rsp, err := c.DeleteIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentTypeResponse(rsp)
}

// GetIncidentTypeWithResponse request returning *GetIncidentTypeResponse
func (c *ClientWithResponses) GetIncidentTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentTypeResponse, error) {
	rsp, err := c.GetIncidentType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentTypeResponse(rsp)
}

// UpdateIncidentTypeWithBodyWithResponse request with arbitrary body returning *UpdateIncidentTypeResponse
func (c *ClientWithResponses) UpdateIncidentTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentTypeResponse, error) {
	rsp, err := c.UpdateIncidentTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentTypeResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// DeleteIncidentWithResponse request returning *DeleteIncidentResponse
func (c *ClientWithResponses) DeleteIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentResponse, error) {
	rsp, err := c.DeleteIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentResponse(rsp)
}

// GetIncidentWithResponse request returning *GetIncidentResponse
func (c *ClientWithResponses) GetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentResponse, error) {
	rsp, err := c.GetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentResponse(rsp)
}

// UpdateIncidentWithBodyWithResponse request with arbitrary body returning *UpdateIncidentResponse
func (c *ClientWithResponses) UpdateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentResponse, error) {
	rsp, err := c.UpdateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentResponse(rsp)
}

// CancelIncidentWithBodyWithResponse request with arbitrary body returning *CancelIncidentResponse
func (c *ClientWithResponses) CancelIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIncidentResponse, error) {
	rsp, err := c.CancelIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIncidentResponse(rsp)
}

// ListIncidentCustomFieldSelectionsWithResponse request returning *ListIncidentCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListIncidentCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListIncidentCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListIncidentCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListIncidentCustomFieldSelections(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentCustomFieldSelectionsResponse(rsp)
}

// CreateIncidentCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateIncidentCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateIncidentCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateIncidentCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentCustomFieldSelectionResponse(rsp)
}

// MitigateIncidentWithBodyWithResponse request with arbitrary body returning *MitigateIncidentResponse
func (c *ClientWithResponses) MitigateIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MitigateIncidentResponse, error) {
	rsp, err := c.MitigateIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMitigateIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ListIncidentActionItemsWithResponse request returning *ListIncidentActionItemsResponse
func (c *ClientWithResponses) ListIncidentActionItemsWithResponse(ctx context.Context, incidentId string, params *ListIncidentActionItemsParams, reqEditors ...RequestEditorFn) (*ListIncidentActionItemsResponse, error) {
	rsp, err := c.ListIncidentActionItems(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentActionItemsResponse(rsp)
}

// CreateIncidentActionItemWithBodyWithResponse request with arbitrary body returning *CreateIncidentActionItemResponse
func (c *ClientWithResponses) CreateIncidentActionItemWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentActionItemResponse, error) {
	rsp, err := c.CreateIncidentActionItemWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentActionItemResponse(rsp)
}

// ListAlertWithResponse request returning *ListAlertResponse
func (c *ClientWithResponses) ListAlertWithResponse(ctx context.Context, incidentId string, params *ListAlertParams, reqEditors ...RequestEditorFn) (*ListAlertResponse, error) {
	rsp, err := c.ListAlert(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertResponse(rsp)
}

// AttachAlertWithBodyWithResponse request with arbitrary body returning *AttachAlertResponse
func (c *ClientWithResponses) AttachAlertWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachAlertResponse, error) {
	rsp, err := c.AttachAlertWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachAlertResponse(rsp)
}

// ListIncidentEventsWithResponse request returning *ListIncidentEventsResponse
func (c *ClientWithResponses) ListIncidentEventsWithResponse(ctx context.Context, incidentId string, params *ListIncidentEventsParams, reqEditors ...RequestEditorFn) (*ListIncidentEventsResponse, error) {
	rsp, err := c.ListIncidentEvents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentEventsResponse(rsp)
}

// CreateIncidentEventWithBodyWithResponse request with arbitrary body returning *CreateIncidentEventResponse
func (c *ClientWithResponses) CreateIncidentEventWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentEventResponse, error) {
	rsp, err := c.CreateIncidentEventWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentEventResponse(rsp)
}

// ListIncidentFeedbacksWithResponse request returning *ListIncidentFeedbacksResponse
func (c *ClientWithResponses) ListIncidentFeedbacksWithResponse(ctx context.Context, incidentId string, params *ListIncidentFeedbacksParams, reqEditors ...RequestEditorFn) (*ListIncidentFeedbacksResponse, error) {
	rsp, err := c.ListIncidentFeedbacks(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentFeedbacksResponse(rsp)
}

// CreateIncidentFeedbackWithBodyWithResponse request with arbitrary body returning *CreateIncidentFeedbackResponse
func (c *ClientWithResponses) CreateIncidentFeedbackWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentFeedbackResponse, error) {
	rsp, err := c.CreateIncidentFeedbackWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentFeedbackResponse(rsp)
}

// ListIncidentStatusPagesWithResponse request returning *ListIncidentStatusPagesResponse
func (c *ClientWithResponses) ListIncidentStatusPagesWithResponse(ctx context.Context, incidentId string, params *ListIncidentStatusPagesParams, reqEditors ...RequestEditorFn) (*ListIncidentStatusPagesResponse, error) {
	rsp, err := c.ListIncidentStatusPages(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentStatusPagesResponse(rsp)
}

// CreateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *CreateIncidentStatusPageResponse
func (c *ClientWithResponses) CreateIncidentStatusPageWithBodyWithResponse(ctx context.Context, incidentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentStatusPageResponse, error) {
	rsp, err := c.CreateIncidentStatusPageWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentStatusPageResponse(rsp)
}

// DeletePlaybookTaskWithResponse request returning *DeletePlaybookTaskResponse
func (c *ClientWithResponses) DeletePlaybookTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookTaskResponse, error) {
	rsp, err := c.DeletePlaybookTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookTaskResponse(rsp)
}

// GetPlaybookTasksWithResponse request returning *GetPlaybookTasksResponse
func (c *ClientWithResponses) GetPlaybookTasksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookTasksResponse, error) {
	rsp, err := c.GetPlaybookTasks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookTasksResponse(rsp)
}

// UpdatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookTaskResponse
func (c *ClientWithResponses) UpdatePlaybookTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookTaskResponse, error) {
	rsp, err := c.UpdatePlaybookTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookTaskResponse(rsp)
}

// ListPlaybooksWithResponse request returning *ListPlaybooksResponse
func (c *ClientWithResponses) ListPlaybooksWithResponse(ctx context.Context, params *ListPlaybooksParams, reqEditors ...RequestEditorFn) (*ListPlaybooksResponse, error) {
	rsp, err := c.ListPlaybooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybooksResponse(rsp)
}

// CreatePlaybookWithBodyWithResponse request with arbitrary body returning *CreatePlaybookResponse
func (c *ClientWithResponses) CreatePlaybookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookResponse, error) {
	rsp, err := c.CreatePlaybookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookResponse(rsp)
}

// DeletePlaybookWithResponse request returning *DeletePlaybookResponse
func (c *ClientWithResponses) DeletePlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaybookResponse, error) {
	rsp, err := c.DeletePlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaybookResponse(rsp)
}

// GetPlaybookWithResponse request returning *GetPlaybookResponse
func (c *ClientWithResponses) GetPlaybookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlaybookResponse, error) {
	rsp, err := c.GetPlaybook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaybookResponse(rsp)
}

// UpdatePlaybookWithBodyWithResponse request with arbitrary body returning *UpdatePlaybookResponse
func (c *ClientWithResponses) UpdatePlaybookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlaybookResponse, error) {
	rsp, err := c.UpdatePlaybookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlaybookResponse(rsp)
}

// ListPlaybookTasksWithResponse request returning *ListPlaybookTasksResponse
func (c *ClientWithResponses) ListPlaybookTasksWithResponse(ctx context.Context, playbookId string, params *ListPlaybookTasksParams, reqEditors ...RequestEditorFn) (*ListPlaybookTasksResponse, error) {
	rsp, err := c.ListPlaybookTasks(ctx, playbookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlaybookTasksResponse(rsp)
}

// CreatePlaybookTaskWithBodyWithResponse request with arbitrary body returning *CreatePlaybookTaskResponse
func (c *ClientWithResponses) CreatePlaybookTaskWithBodyWithResponse(ctx context.Context, playbookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaybookTaskResponse, error) {
	rsp, err := c.CreatePlaybookTaskWithBody(ctx, playbookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaybookTaskResponse(rsp)
}

// ListPostmortemTemplatesWithResponse request returning *ListPostmortemTemplatesResponse
func (c *ClientWithResponses) ListPostmortemTemplatesWithResponse(ctx context.Context, params *ListPostmortemTemplatesParams, reqEditors ...RequestEditorFn) (*ListPostmortemTemplatesResponse, error) {
	rsp, err := c.ListPostmortemTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPostmortemTemplatesResponse(rsp)
}

// CreatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *CreatePostmortemTemplateResponse
func (c *ClientWithResponses) CreatePostmortemTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostmortemTemplateResponse, error) {
	rsp, err := c.CreatePostmortemTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostmortemTemplateResponse(rsp)
}

// DeletePostmortemTemplateWithResponse request returning *DeletePostmortemTemplateResponse
func (c *ClientWithResponses) DeletePostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePostmortemTemplateResponse, error) {
	rsp, err := c.DeletePostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostmortemTemplateResponse(rsp)
}

// GetPostmortemTemplateWithResponse request returning *GetPostmortemTemplateResponse
func (c *ClientWithResponses) GetPostmortemTemplateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPostmortemTemplateResponse, error) {
	rsp, err := c.GetPostmortemTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostmortemTemplateResponse(rsp)
}

// UpdatePostmortemTemplateWithBodyWithResponse request with arbitrary body returning *UpdatePostmortemTemplateResponse
func (c *ClientWithResponses) UpdatePostmortemTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostmortemTemplateResponse, error) {
	rsp, err := c.UpdatePostmortemTemplateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostmortemTemplateResponse(rsp)
}

// ListIncidentPostMortemsWithResponse request returning *ListIncidentPostMortemsResponse
func (c *ClientWithResponses) ListIncidentPostMortemsWithResponse(ctx context.Context, params *ListIncidentPostMortemsParams, reqEditors ...RequestEditorFn) (*ListIncidentPostMortemsResponse, error) {
	rsp, err := c.ListIncidentPostMortems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostMortemsResponse(rsp)
}

// ListIncidentPostmortemWithResponse request returning *ListIncidentPostmortemResponse
func (c *ClientWithResponses) ListIncidentPostmortemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListIncidentPostmortemResponse, error) {
	rsp, err := c.ListIncidentPostmortem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentPostmortemResponse(rsp)
}

// UpdateIncidentPostmortemWithBodyWithResponse request with arbitrary body returning *UpdateIncidentPostmortemResponse
func (c *ClientWithResponses) UpdateIncidentPostmortemWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentPostmortemResponse, error) {
	rsp, err := c.UpdateIncidentPostmortemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentPostmortemResponse(rsp)
}

// ListPulsesWithResponse request returning *ListPulsesResponse
func (c *ClientWithResponses) ListPulsesWithResponse(ctx context.Context, params *ListPulsesParams, reqEditors ...RequestEditorFn) (*ListPulsesResponse, error) {
	rsp, err := c.ListPulses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPulsesResponse(rsp)
}

// CreatePulseWithBodyWithResponse request with arbitrary body returning *CreatePulseResponse
func (c *ClientWithResponses) CreatePulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePulseResponse, error) {
	rsp, err := c.CreatePulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePulseResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// UpdatePulseWithBodyWithResponse request with arbitrary body returning *UpdatePulseResponse
func (c *ClientWithResponses) UpdatePulseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePulseResponse, error) {
	rsp, err := c.UpdatePulseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePulseResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// CreateServiceWithBodyWithResponse request with arbitrary body returning *CreateServiceResponse
func (c *ClientWithResponses) CreateServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceResponse, error) {
	rsp, err := c.CreateServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// GetServiceIncidentsChartWithResponse request returning *GetServiceIncidentsChartResponse
func (c *ClientWithResponses) GetServiceIncidentsChartWithResponse(ctx context.Context, id string, params *GetServiceIncidentsChartParams, reqEditors ...RequestEditorFn) (*GetServiceIncidentsChartResponse, error) {
	rsp, err := c.GetServiceIncidentsChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIncidentsChartResponse(rsp)
}

// GetServiceUptimeChartWithResponse request returning *GetServiceUptimeChartResponse
func (c *ClientWithResponses) GetServiceUptimeChartWithResponse(ctx context.Context, id string, params *GetServiceUptimeChartParams, reqEditors ...RequestEditorFn) (*GetServiceUptimeChartResponse, error) {
	rsp, err := c.GetServiceUptimeChart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceUptimeChartResponse(rsp)
}

// ListSeveritiesWithResponse request returning *ListSeveritiesResponse
func (c *ClientWithResponses) ListSeveritiesWithResponse(ctx context.Context, params *ListSeveritiesParams, reqEditors ...RequestEditorFn) (*ListSeveritiesResponse, error) {
	rsp, err := c.ListSeverities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSeveritiesResponse(rsp)
}

// CreateSeverityWithBodyWithResponse request with arbitrary body returning *CreateSeverityResponse
func (c *ClientWithResponses) CreateSeverityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSeverityResponse, error) {
	rsp, err := c.CreateSeverityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSeverityResponse(rsp)
}

// DeleteSeverityWithResponse request returning *DeleteSeverityResponse
func (c *ClientWithResponses) DeleteSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSeverityResponse, error) {
	rsp, err := c.DeleteSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeverityResponse(rsp)
}

// GetSeverityWithResponse request returning *GetSeverityResponse
func (c *ClientWithResponses) GetSeverityWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSeverityResponse, error) {
	rsp, err := c.GetSeverity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeverityResponse(rsp)
}

// UpdateSeverityWithBodyWithResponse request with arbitrary body returning *UpdateSeverityResponse
func (c *ClientWithResponses) UpdateSeverityWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSeverityResponse, error) {
	rsp, err := c.UpdateSeverityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSeverityResponse(rsp)
}

// DeleteIncidentStatusPageWithResponse request returning *DeleteIncidentStatusPageResponse
func (c *ClientWithResponses) DeleteIncidentStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIncidentStatusPageResponse, error) {
	rsp, err := c.DeleteIncidentStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentStatusPageResponse(rsp)
}

// GetIncidentStatusPagesWithResponse request returning *GetIncidentStatusPagesResponse
func (c *ClientWithResponses) GetIncidentStatusPagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIncidentStatusPagesResponse, error) {
	rsp, err := c.GetIncidentStatusPages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentStatusPagesResponse(rsp)
}

// UpdateIncidentStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateIncidentStatusPageResponse
func (c *ClientWithResponses) UpdateIncidentStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentStatusPageResponse, error) {
	rsp, err := c.UpdateIncidentStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentStatusPageResponse(rsp)
}

// ListStatusPagesWithResponse request returning *ListStatusPagesResponse
func (c *ClientWithResponses) ListStatusPagesWithResponse(ctx context.Context, params *ListStatusPagesParams, reqEditors ...RequestEditorFn) (*ListStatusPagesResponse, error) {
	rsp, err := c.ListStatusPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStatusPagesResponse(rsp)
}

// CreateStatusPageWithBodyWithResponse request with arbitrary body returning *CreateStatusPageResponse
func (c *ClientWithResponses) CreateStatusPageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStatusPageResponse, error) {
	rsp, err := c.CreateStatusPageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStatusPageResponse(rsp)
}

// DeleteStatusPageWithResponse request returning *DeleteStatusPageResponse
func (c *ClientWithResponses) DeleteStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStatusPageResponse, error) {
	rsp, err := c.DeleteStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusPageResponse(rsp)
}

// GetStatusPageWithResponse request returning *GetStatusPageResponse
func (c *ClientWithResponses) GetStatusPageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStatusPageResponse, error) {
	rsp, err := c.GetStatusPage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusPageResponse(rsp)
}

// UpdateStatusPageWithBodyWithResponse request with arbitrary body returning *UpdateStatusPageResponse
func (c *ClientWithResponses) UpdateStatusPageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStatusPageResponse, error) {
	rsp, err := c.UpdateStatusPageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStatusPageResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// DeleteWorkflowCustomFieldSelectionWithResponse request returning *DeleteWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) DeleteWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.DeleteWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowCustomFieldSelectionResponse(rsp)
}

// GetWorkflowCustomFieldSelectionWithResponse request returning *GetWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) GetWorkflowCustomFieldSelectionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.GetWorkflowCustomFieldSelection(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowCustomFieldSelectionResponse(rsp)
}

// UpdateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) UpdateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.UpdateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowCustomFieldSelectionResponse(rsp)
}

// DeleteWorkflowTaskWithResponse request returning *DeleteWorkflowTaskResponse
func (c *ClientWithResponses) DeleteWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowTaskResponse, error) {
	rsp, err := c.DeleteWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowTaskResponse(rsp)
}

// GetWorkflowTaskWithResponse request returning *GetWorkflowTaskResponse
func (c *ClientWithResponses) GetWorkflowTaskWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowTaskResponse, error) {
	rsp, err := c.GetWorkflowTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowTaskResponse(rsp)
}

// UpdateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowTaskResponse
func (c *ClientWithResponses) UpdateWorkflowTaskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowTaskResponse, error) {
	rsp, err := c.UpdateWorkflowTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowTaskResponse(rsp)
}

// ListWorkflowsWithResponse request returning *ListWorkflowsResponse
func (c *ClientWithResponses) ListWorkflowsWithResponse(ctx context.Context, params *ListWorkflowsParams, reqEditors ...RequestEditorFn) (*ListWorkflowsResponse, error) {
	rsp, err := c.ListWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowsResponse(rsp)
}

// CreateWorkflowWithBodyWithResponse request with arbitrary body returning *CreateWorkflowResponse
func (c *ClientWithResponses) CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowResponse, error) {
	rsp, err := c.CreateWorkflowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowResponse(rsp)
}

// DeleteWorkflowWithResponse request returning *DeleteWorkflowResponse
func (c *ClientWithResponses) DeleteWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteWorkflowResponse, error) {
	rsp, err := c.DeleteWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowResponse(rsp)
}

// GetWorkflowWithResponse request returning *GetWorkflowResponse
func (c *ClientWithResponses) GetWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkflowResponse, error) {
	rsp, err := c.GetWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowResponse(rsp)
}

// UpdateWorkflowWithBodyWithResponse request with arbitrary body returning *UpdateWorkflowResponse
func (c *ClientWithResponses) UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkflowResponse, error) {
	rsp, err := c.UpdateWorkflowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkflowResponse(rsp)
}

// ListWorkflowCustomFieldSelectionsWithResponse request returning *ListWorkflowCustomFieldSelectionsResponse
func (c *ClientWithResponses) ListWorkflowCustomFieldSelectionsWithResponse(ctx context.Context, id string, params *ListWorkflowCustomFieldSelectionsParams, reqEditors ...RequestEditorFn) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	rsp, err := c.ListWorkflowCustomFieldSelections(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowCustomFieldSelectionsResponse(rsp)
}

// CreateWorkflowCustomFieldSelectionWithBodyWithResponse request with arbitrary body returning *CreateWorkflowCustomFieldSelectionResponse
func (c *ClientWithResponses) CreateWorkflowCustomFieldSelectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	rsp, err := c.CreateWorkflowCustomFieldSelectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowCustomFieldSelectionResponse(rsp)
}

// ListWorkflowTasksWithResponse request returning *ListWorkflowTasksResponse
func (c *ClientWithResponses) ListWorkflowTasksWithResponse(ctx context.Context, workflowId string, params *ListWorkflowTasksParams, reqEditors ...RequestEditorFn) (*ListWorkflowTasksResponse, error) {
	rsp, err := c.ListWorkflowTasks(ctx, workflowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkflowTasksResponse(rsp)
}

// CreateWorkflowTaskWithBodyWithResponse request with arbitrary body returning *CreateWorkflowTaskResponse
func (c *ClientWithResponses) CreateWorkflowTaskWithBodyWithResponse(ctx context.Context, workflowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkflowTaskResponse, error) {
	rsp, err := c.CreateWorkflowTaskWithBody(ctx, workflowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkflowTaskResponse(rsp)
}

// ParseGetScimUsersResponse parses an HTTP response from a GetScimUsersWithResponse call
func ParseGetScimUsersResponse(rsp *http.Response) (*GetScimUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScimUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostScimUsersResponse parses an HTTP response from a PostScimUsersWithResponse call
func ParsePostScimUsersResponse(rsp *http.Response) (*PostScimUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScimUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteScimUsersIdResponse parses an HTTP response from a DeleteScimUsersIdWithResponse call
func ParseDeleteScimUsersIdResponse(rsp *http.Response) (*DeleteScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScimUsersIdResponse parses an HTTP response from a GetScimUsersIdWithResponse call
func ParseGetScimUsersIdResponse(rsp *http.Response) (*GetScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchScimUsersIdResponse parses an HTTP response from a PatchScimUsersIdWithResponse call
func ParsePatchScimUsersIdResponse(rsp *http.Response) (*PatchScimUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScimUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentActionItemResponse parses an HTTP response from a DeleteIncidentActionItemWithResponse call
func ParseDeleteIncidentActionItemResponse(rsp *http.Response) (*DeleteIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentActionItemsResponse parses an HTTP response from a GetIncidentActionItemsWithResponse call
func ParseGetIncidentActionItemsResponse(rsp *http.Response) (*GetIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentActionItemResponse parses an HTTP response from a UpdateIncidentActionItemWithResponse call
func ParseUpdateIncidentActionItemResponse(rsp *http.Response) (*UpdateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertsResponse parses an HTTP response from a ListAlertsWithResponse call
func ParseListAlertsResponse(rsp *http.Response) (*ListAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAlertResponse parses an HTTP response from a CreateAlertWithResponse call
func ParseCreateAlertResponse(rsp *http.Response) (*CreateAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCausesResponse parses an HTTP response from a ListCausesWithResponse call
func ParseListCausesResponse(rsp *http.Response) (*ListCausesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCausesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCauseResponse parses an HTTP response from a CreateCauseWithResponse call
func ParseCreateCauseResponse(rsp *http.Response) (*CreateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCauseResponse parses an HTTP response from a DeleteCauseWithResponse call
func ParseDeleteCauseResponse(rsp *http.Response) (*DeleteCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCauseResponse parses an HTTP response from a UpdateCauseWithResponse call
func ParseUpdateCauseResponse(rsp *http.Response) (*UpdateCauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldOptionResponse parses an HTTP response from a DeleteCustomFieldOptionWithResponse call
func ParseDeleteCustomFieldOptionResponse(rsp *http.Response) (*DeleteCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldOptionResponse parses an HTTP response from a GetCustomFieldOptionWithResponse call
func ParseGetCustomFieldOptionResponse(rsp *http.Response) (*GetCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldOptionResponse parses an HTTP response from a UpdateCustomFieldOptionWithResponse call
func ParseUpdateCustomFieldOptionResponse(rsp *http.Response) (*UpdateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldsResponse parses an HTTP response from a ListCustomFieldsWithResponse call
func ParseListCustomFieldsResponse(rsp *http.Response) (*ListCustomFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldResponse parses an HTTP response from a CreateCustomFieldWithResponse call
func ParseCreateCustomFieldResponse(rsp *http.Response) (*CreateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldOptionsResponse parses an HTTP response from a ListCustomFieldOptionsWithResponse call
func ParseListCustomFieldOptionsResponse(rsp *http.Response) (*ListCustomFieldOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCustomFieldOptionResponse parses an HTTP response from a CreateCustomFieldOptionWithResponse call
func ParseCreateCustomFieldOptionResponse(rsp *http.Response) (*CreateCustomFieldOptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomFieldOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldResponse parses an HTTP response from a DeleteCustomFieldWithResponse call
func ParseDeleteCustomFieldResponse(rsp *http.Response) (*DeleteCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldResponse parses an HTTP response from a GetCustomFieldWithResponse call
func ParseGetCustomFieldResponse(rsp *http.Response) (*GetCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCustomFieldResponse parses an HTTP response from a UpdateCustomFieldWithResponse call
func ParseUpdateCustomFieldResponse(rsp *http.Response) (*UpdateCustomFieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentEventResponse parses an HTTP response from a DeleteIncidentEventWithResponse call
func ParseDeleteIncidentEventResponse(rsp *http.Response) (*DeleteIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentEventsResponse parses an HTTP response from a GetIncidentEventsWithResponse call
func ParseGetIncidentEventsResponse(rsp *http.Response) (*GetIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentEventResponse parses an HTTP response from a UpdateIncidentEventWithResponse call
func ParseUpdateIncidentEventResponse(rsp *http.Response) (*UpdateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentFeedbackResponse parses an HTTP response from a DeleteIncidentFeedbackWithResponse call
func ParseDeleteIncidentFeedbackResponse(rsp *http.Response) (*DeleteIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentFeedbacksResponse parses an HTTP response from a GetIncidentFeedbacksWithResponse call
func ParseGetIncidentFeedbacksResponse(rsp *http.Response) (*GetIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentFeedbackResponse parses an HTTP response from a UpdateIncidentFeedbackWithResponse call
func ParseUpdateIncidentFeedbackResponse(rsp *http.Response) (*UpdateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListFunctionalitiesResponse parses an HTTP response from a ListFunctionalitiesWithResponse call
func ParseListFunctionalitiesResponse(rsp *http.Response) (*ListFunctionalitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionalitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateFunctionalityResponse parses an HTTP response from a CreateFunctionalityWithResponse call
func ParseCreateFunctionalityResponse(rsp *http.Response) (*CreateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFunctionalityResponse parses an HTTP response from a DeleteFunctionalityWithResponse call
func ParseDeleteFunctionalityResponse(rsp *http.Response) (*DeleteFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityResponse parses an HTTP response from a GetFunctionalityWithResponse call
func ParseGetFunctionalityResponse(rsp *http.Response) (*GetFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateFunctionalityResponse parses an HTTP response from a UpdateFunctionalityWithResponse call
func ParseUpdateFunctionalityResponse(rsp *http.Response) (*UpdateFunctionalityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityIncidentsChartResponse parses an HTTP response from a GetFunctionalityIncidentsChartWithResponse call
func ParseGetFunctionalityIncidentsChartResponse(rsp *http.Response) (*GetFunctionalityIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionalityUptimeChartResponse parses an HTTP response from a GetFunctionalityUptimeChartWithResponse call
func ParseGetFunctionalityUptimeChartResponse(rsp *http.Response) (*GetFunctionalityUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalityUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentCustomFieldSelectionResponse parses an HTTP response from a DeleteIncidentCustomFieldSelectionWithResponse call
func ParseDeleteIncidentCustomFieldSelectionResponse(rsp *http.Response) (*DeleteIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentCustomFieldSelectionResponse parses an HTTP response from a GetIncidentCustomFieldSelectionWithResponse call
func ParseGetIncidentCustomFieldSelectionResponse(rsp *http.Response) (*GetIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentCustomFieldSelectionResponse parses an HTTP response from a UpdateIncidentCustomFieldSelectionWithResponse call
func ParseUpdateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*UpdateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleTaskResponse parses an HTTP response from a DeleteIncidentRoleTaskWithResponse call
func ParseDeleteIncidentRoleTaskResponse(rsp *http.Response) (*DeleteIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleTasksResponse parses an HTTP response from a GetIncidentRoleTasksWithResponse call
func ParseGetIncidentRoleTasksResponse(rsp *http.Response) (*GetIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleTaskResponse parses an HTTP response from a UpdateIncidentRoleTaskWithResponse call
func ParseUpdateIncidentRoleTaskResponse(rsp *http.Response) (*UpdateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRolesResponse parses an HTTP response from a ListIncidentRolesWithResponse call
func ParseListIncidentRolesResponse(rsp *http.Response) (*ListIncidentRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleResponse parses an HTTP response from a CreateIncidentRoleWithResponse call
func ParseCreateIncidentRoleResponse(rsp *http.Response) (*CreateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentRoleResponse parses an HTTP response from a DeleteIncidentRoleWithResponse call
func ParseDeleteIncidentRoleResponse(rsp *http.Response) (*DeleteIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentRoleResponse parses an HTTP response from a GetIncidentRoleWithResponse call
func ParseGetIncidentRoleResponse(rsp *http.Response) (*GetIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentRoleResponse parses an HTTP response from a UpdateIncidentRoleWithResponse call
func ParseUpdateIncidentRoleResponse(rsp *http.Response) (*UpdateIncidentRoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentRoleTasksResponse parses an HTTP response from a ListIncidentRoleTasksWithResponse call
func ParseListIncidentRoleTasksResponse(rsp *http.Response) (*ListIncidentRoleTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentRoleTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentRoleTaskResponse parses an HTTP response from a CreateIncidentRoleTaskWithResponse call
func ParseCreateIncidentRoleTaskResponse(rsp *http.Response) (*CreateIncidentRoleTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentRoleTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentTypesResponse parses an HTTP response from a ListIncidentTypesWithResponse call
func ParseListIncidentTypesResponse(rsp *http.Response) (*ListIncidentTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentTypeResponse parses an HTTP response from a CreateIncidentTypeWithResponse call
func ParseCreateIncidentTypeResponse(rsp *http.Response) (*CreateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentTypeResponse parses an HTTP response from a DeleteIncidentTypeWithResponse call
func ParseDeleteIncidentTypeResponse(rsp *http.Response) (*DeleteIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentTypeResponse parses an HTTP response from a GetIncidentTypeWithResponse call
func ParseGetIncidentTypeResponse(rsp *http.Response) (*GetIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentTypeResponse parses an HTTP response from a UpdateIncidentTypeWithResponse call
func ParseUpdateIncidentTypeResponse(rsp *http.Response) (*UpdateIncidentTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentResponse parses an HTTP response from a DeleteIncidentWithResponse call
func ParseDeleteIncidentResponse(rsp *http.Response) (*DeleteIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentResponse parses an HTTP response from a GetIncidentWithResponse call
func ParseGetIncidentResponse(rsp *http.Response) (*GetIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentResponse parses an HTTP response from a UpdateIncidentWithResponse call
func ParseUpdateIncidentResponse(rsp *http.Response) (*UpdateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelIncidentResponse parses an HTTP response from a CancelIncidentWithResponse call
func ParseCancelIncidentResponse(rsp *http.Response) (*CancelIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentCustomFieldSelectionsResponse parses an HTTP response from a ListIncidentCustomFieldSelectionsWithResponse call
func ParseListIncidentCustomFieldSelectionsResponse(rsp *http.Response) (*ListIncidentCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentCustomFieldSelectionResponse parses an HTTP response from a CreateIncidentCustomFieldSelectionWithResponse call
func ParseCreateIncidentCustomFieldSelectionResponse(rsp *http.Response) (*CreateIncidentCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMitigateIncidentResponse parses an HTTP response from a MitigateIncidentWithResponse call
func ParseMitigateIncidentResponse(rsp *http.Response) (*MitigateIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MitigateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentActionItemsResponse parses an HTTP response from a ListIncidentActionItemsWithResponse call
func ParseListIncidentActionItemsResponse(rsp *http.Response) (*ListIncidentActionItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentActionItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentActionItemResponse parses an HTTP response from a CreateIncidentActionItemWithResponse call
func ParseCreateIncidentActionItemResponse(rsp *http.Response) (*CreateIncidentActionItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentActionItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAlertResponse parses an HTTP response from a ListAlertWithResponse call
func ParseListAlertResponse(rsp *http.Response) (*ListAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAttachAlertResponse parses an HTTP response from a AttachAlertWithResponse call
func ParseAttachAlertResponse(rsp *http.Response) (*AttachAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentEventsResponse parses an HTTP response from a ListIncidentEventsWithResponse call
func ParseListIncidentEventsResponse(rsp *http.Response) (*ListIncidentEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentEventResponse parses an HTTP response from a CreateIncidentEventWithResponse call
func ParseCreateIncidentEventResponse(rsp *http.Response) (*CreateIncidentEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentFeedbacksResponse parses an HTTP response from a ListIncidentFeedbacksWithResponse call
func ParseListIncidentFeedbacksResponse(rsp *http.Response) (*ListIncidentFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentFeedbackResponse parses an HTTP response from a CreateIncidentFeedbackWithResponse call
func ParseCreateIncidentFeedbackResponse(rsp *http.Response) (*CreateIncidentFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentStatusPagesResponse parses an HTTP response from a ListIncidentStatusPagesWithResponse call
func ParseListIncidentStatusPagesResponse(rsp *http.Response) (*ListIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateIncidentStatusPageResponse parses an HTTP response from a CreateIncidentStatusPageWithResponse call
func ParseCreateIncidentStatusPageResponse(rsp *http.Response) (*CreateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookTaskResponse parses an HTTP response from a DeletePlaybookTaskWithResponse call
func ParseDeletePlaybookTaskResponse(rsp *http.Response) (*DeletePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookTasksResponse parses an HTTP response from a GetPlaybookTasksWithResponse call
func ParseGetPlaybookTasksResponse(rsp *http.Response) (*GetPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookTaskResponse parses an HTTP response from a UpdatePlaybookTaskWithResponse call
func ParseUpdatePlaybookTaskResponse(rsp *http.Response) (*UpdatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybooksResponse parses an HTTP response from a ListPlaybooksWithResponse call
func ParseListPlaybooksResponse(rsp *http.Response) (*ListPlaybooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookResponse parses an HTTP response from a CreatePlaybookWithResponse call
func ParseCreatePlaybookResponse(rsp *http.Response) (*CreatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePlaybookResponse parses an HTTP response from a DeletePlaybookWithResponse call
func ParseDeletePlaybookResponse(rsp *http.Response) (*DeletePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaybookResponse parses an HTTP response from a GetPlaybookWithResponse call
func ParseGetPlaybookResponse(rsp *http.Response) (*GetPlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePlaybookResponse parses an HTTP response from a UpdatePlaybookWithResponse call
func ParseUpdatePlaybookResponse(rsp *http.Response) (*UpdatePlaybookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlaybookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPlaybookTasksResponse parses an HTTP response from a ListPlaybookTasksWithResponse call
func ParseListPlaybookTasksResponse(rsp *http.Response) (*ListPlaybookTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlaybookTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePlaybookTaskResponse parses an HTTP response from a CreatePlaybookTaskWithResponse call
func ParseCreatePlaybookTaskResponse(rsp *http.Response) (*CreatePlaybookTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaybookTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPostmortemTemplatesResponse parses an HTTP response from a ListPostmortemTemplatesWithResponse call
func ParseListPostmortemTemplatesResponse(rsp *http.Response) (*ListPostmortemTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPostmortemTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePostmortemTemplateResponse parses an HTTP response from a CreatePostmortemTemplateWithResponse call
func ParseCreatePostmortemTemplateResponse(rsp *http.Response) (*CreatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePostmortemTemplateResponse parses an HTTP response from a DeletePostmortemTemplateWithResponse call
func ParseDeletePostmortemTemplateResponse(rsp *http.Response) (*DeletePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPostmortemTemplateResponse parses an HTTP response from a GetPostmortemTemplateWithResponse call
func ParseGetPostmortemTemplateResponse(rsp *http.Response) (*GetPostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePostmortemTemplateResponse parses an HTTP response from a UpdatePostmortemTemplateWithResponse call
func ParseUpdatePostmortemTemplateResponse(rsp *http.Response) (*UpdatePostmortemTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostmortemTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostMortemsResponse parses an HTTP response from a ListIncidentPostMortemsWithResponse call
func ParseListIncidentPostMortemsResponse(rsp *http.Response) (*ListIncidentPostMortemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostMortemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIncidentPostmortemResponse parses an HTTP response from a ListIncidentPostmortemWithResponse call
func ParseListIncidentPostmortemResponse(rsp *http.Response) (*ListIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentPostmortemResponse parses an HTTP response from a UpdateIncidentPostmortemWithResponse call
func ParseUpdateIncidentPostmortemResponse(rsp *http.Response) (*UpdateIncidentPostmortemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentPostmortemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPulsesResponse parses an HTTP response from a ListPulsesWithResponse call
func ParseListPulsesResponse(rsp *http.Response) (*ListPulsesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPulsesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePulseResponse parses an HTTP response from a CreatePulseWithResponse call
func ParseCreatePulseResponse(rsp *http.Response) (*CreatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePulseResponse parses an HTTP response from a UpdatePulseWithResponse call
func ParseUpdatePulseResponse(rsp *http.Response) (*UpdatePulseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateServiceResponse parses an HTTP response from a CreateServiceWithResponse call
func ParseCreateServiceResponse(rsp *http.Response) (*CreateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceIncidentsChartResponse parses an HTTP response from a GetServiceIncidentsChartWithResponse call
func ParseGetServiceIncidentsChartResponse(rsp *http.Response) (*GetServiceIncidentsChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIncidentsChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceUptimeChartResponse parses an HTTP response from a GetServiceUptimeChartWithResponse call
func ParseGetServiceUptimeChartResponse(rsp *http.Response) (*GetServiceUptimeChartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceUptimeChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSeveritiesResponse parses an HTTP response from a ListSeveritiesWithResponse call
func ParseListSeveritiesResponse(rsp *http.Response) (*ListSeveritiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSeveritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSeverityResponse parses an HTTP response from a CreateSeverityWithResponse call
func ParseCreateSeverityResponse(rsp *http.Response) (*CreateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSeverityResponse parses an HTTP response from a DeleteSeverityWithResponse call
func ParseDeleteSeverityResponse(rsp *http.Response) (*DeleteSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSeverityResponse parses an HTTP response from a GetSeverityWithResponse call
func ParseGetSeverityResponse(rsp *http.Response) (*GetSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateSeverityResponse parses an HTTP response from a UpdateSeverityWithResponse call
func ParseUpdateSeverityResponse(rsp *http.Response) (*UpdateSeverityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIncidentStatusPageResponse parses an HTTP response from a DeleteIncidentStatusPageWithResponse call
func ParseDeleteIncidentStatusPageResponse(rsp *http.Response) (*DeleteIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentStatusPagesResponse parses an HTTP response from a GetIncidentStatusPagesWithResponse call
func ParseGetIncidentStatusPagesResponse(rsp *http.Response) (*GetIncidentStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateIncidentStatusPageResponse parses an HTTP response from a UpdateIncidentStatusPageWithResponse call
func ParseUpdateIncidentStatusPageResponse(rsp *http.Response) (*UpdateIncidentStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStatusPagesResponse parses an HTTP response from a ListStatusPagesWithResponse call
func ParseListStatusPagesResponse(rsp *http.Response) (*ListStatusPagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStatusPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateStatusPageResponse parses an HTTP response from a CreateStatusPageWithResponse call
func ParseCreateStatusPageResponse(rsp *http.Response) (*CreateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStatusPageResponse parses an HTTP response from a DeleteStatusPageWithResponse call
func ParseDeleteStatusPageResponse(rsp *http.Response) (*DeleteStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusPageResponse parses an HTTP response from a GetStatusPageWithResponse call
func ParseGetStatusPageResponse(rsp *http.Response) (*GetStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateStatusPageResponse parses an HTTP response from a UpdateStatusPageWithResponse call
func ParseUpdateStatusPageResponse(rsp *http.Response) (*UpdateStatusPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStatusPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowCustomFieldSelectionResponse parses an HTTP response from a DeleteWorkflowCustomFieldSelectionWithResponse call
func ParseDeleteWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*DeleteWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowCustomFieldSelectionResponse parses an HTTP response from a GetWorkflowCustomFieldSelectionWithResponse call
func ParseGetWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*GetWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowCustomFieldSelectionResponse parses an HTTP response from a UpdateWorkflowCustomFieldSelectionWithResponse call
func ParseUpdateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*UpdateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowTaskResponse parses an HTTP response from a DeleteWorkflowTaskWithResponse call
func ParseDeleteWorkflowTaskResponse(rsp *http.Response) (*DeleteWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowTaskResponse parses an HTTP response from a GetWorkflowTaskWithResponse call
func ParseGetWorkflowTaskResponse(rsp *http.Response) (*GetWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowTaskResponse parses an HTTP response from a UpdateWorkflowTaskWithResponse call
func ParseUpdateWorkflowTaskResponse(rsp *http.Response) (*UpdateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowsResponse parses an HTTP response from a ListWorkflowsWithResponse call
func ParseListWorkflowsResponse(rsp *http.Response) (*ListWorkflowsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowResponse parses an HTTP response from a CreateWorkflowWithResponse call
func ParseCreateWorkflowResponse(rsp *http.Response) (*CreateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWorkflowResponse parses an HTTP response from a DeleteWorkflowWithResponse call
func ParseDeleteWorkflowResponse(rsp *http.Response) (*DeleteWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkflowResponse parses an HTTP response from a GetWorkflowWithResponse call
func ParseGetWorkflowResponse(rsp *http.Response) (*GetWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkflowResponse parses an HTTP response from a UpdateWorkflowWithResponse call
func ParseUpdateWorkflowResponse(rsp *http.Response) (*UpdateWorkflowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowCustomFieldSelectionsResponse parses an HTTP response from a ListWorkflowCustomFieldSelectionsWithResponse call
func ParseListWorkflowCustomFieldSelectionsResponse(rsp *http.Response) (*ListWorkflowCustomFieldSelectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowCustomFieldSelectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowCustomFieldSelectionResponse parses an HTTP response from a CreateWorkflowCustomFieldSelectionWithResponse call
func ParseCreateWorkflowCustomFieldSelectionResponse(rsp *http.Response) (*CreateWorkflowCustomFieldSelectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowCustomFieldSelectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListWorkflowTasksResponse parses an HTTP response from a ListWorkflowTasksWithResponse call
func ParseListWorkflowTasksResponse(rsp *http.Response) (*ListWorkflowTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkflowTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateWorkflowTaskResponse parses an HTTP response from a CreateWorkflowTaskWithResponse call
func ParseCreateWorkflowTaskResponse(rsp *http.Response) (*CreateWorkflowTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkflowTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET
	// (GET /scim/Users)
	GetScimUsers(ctx echo.Context, params GetScimUsersParams) error
	// POST
	// (POST /scim/Users)
	PostScimUsers(ctx echo.Context) error
	// DELETE
	// (DELETE /scim/Users/{id})
	DeleteScimUsersId(ctx echo.Context, id int) error
	// GET
	// (GET /scim/Users/{id})
	GetScimUsersId(ctx echo.Context, id int) error
	// PATCH
	// (PATCH /scim/Users/{id})
	PatchScimUsersId(ctx echo.Context, id int) error
	// Delete a incident action item
	// (DELETE /v1/action_items/{id})
	DeleteIncidentActionItem(ctx echo.Context, id string) error
	// Retrieves a incident action item
	// (GET /v1/action_items/{id})
	GetIncidentActionItems(ctx echo.Context, id string) error
	// Update a incident action item
	// (PUT /v1/action_items/{id})
	UpdateIncidentActionItem(ctx echo.Context, id string) error
	// List alerts
	// (GET /v1/alerts)
	ListAlerts(ctx echo.Context, params ListAlertsParams) error
	// Creates a alert
	// (POST /v1/alerts)
	CreateAlert(ctx echo.Context) error
	// Retrieves a alert
	// (GET /v1/alerts/{id})
	GetAlert(ctx echo.Context, id string) error
	// List causes
	// (GET /v1/causes)
	ListCauses(ctx echo.Context, params ListCausesParams) error
	// Creates a cause
	// (POST /v1/causes)
	CreateCause(ctx echo.Context) error
	// Delete a cause
	// (DELETE /v1/causes/{id})
	DeleteCause(ctx echo.Context, id string) error
	// Retrieves a cause
	// (GET /v1/causes/{id})
	GetCause(ctx echo.Context, id string) error
	// Update a cause
	// (PUT /v1/causes/{id})
	UpdateCause(ctx echo.Context, id string) error
	// Delete a custom_field_option
	// (DELETE /v1/custom_field_options/{id})
	DeleteCustomFieldOption(ctx echo.Context, id string) error
	// Retrieves a custom_field_option
	// (GET /v1/custom_field_options/{id})
	GetCustomFieldOption(ctx echo.Context, id string) error
	// Update a custom_field_option
	// (PUT /v1/custom_field_options/{id})
	UpdateCustomFieldOption(ctx echo.Context, id string) error
	// List custom_fields
	// (GET /v1/custom_fields)
	ListCustomFields(ctx echo.Context, params ListCustomFieldsParams) error
	// Creates a custom_field
	// (POST /v1/custom_fields)
	CreateCustomField(ctx echo.Context) error
	// List custom_field_options
	// (GET /v1/custom_fields/{custom_field_id}/options)
	ListCustomFieldOptions(ctx echo.Context, customFieldId string, params ListCustomFieldOptionsParams) error
	// Creates a custom_field_option
	// (POST /v1/custom_fields/{custom_field_id}/options)
	CreateCustomFieldOption(ctx echo.Context, customFieldId string) error
	// Delete a custom_field
	// (DELETE /v1/custom_fields/{id})
	DeleteCustomField(ctx echo.Context, id string) error
	// Retrieves a custom_field
	// (GET /v1/custom_fields/{id})
	GetCustomField(ctx echo.Context, id string) error
	// Update a custom_field
	// (PUT /v1/custom_fields/{id})
	UpdateCustomField(ctx echo.Context, id string) error
	// List environments
	// (GET /v1/environments)
	ListEnvironments(ctx echo.Context, params ListEnvironmentsParams) error
	// Creates a environment
	// (POST /v1/environments)
	CreateEnvironment(ctx echo.Context) error
	// Delete a environment
	// (DELETE /v1/environments/{id})
	DeleteEnvironment(ctx echo.Context, id string) error
	// Retrieves a environment
	// (GET /v1/environments/{id})
	GetEnvironment(ctx echo.Context, id string) error
	// Update a environment
	// (PUT /v1/environments/{id})
	UpdateEnvironment(ctx echo.Context, id string) error
	// Delete a incident event
	// (DELETE /v1/events/{id})
	DeleteIncidentEvent(ctx echo.Context, id string) error
	// Retrieves a incident event
	// (GET /v1/events/{id})
	GetIncidentEvents(ctx echo.Context, id string) error
	// Update a incident event
	// (PUT /v1/events/{id})
	UpdateIncidentEvent(ctx echo.Context, id string) error
	// Delete a incident feedback
	// (DELETE /v1/feedbacks/{id})
	DeleteIncidentFeedback(ctx echo.Context, id string) error
	// Retrieves a incident feedback
	// (GET /v1/feedbacks/{id})
	GetIncidentFeedbacks(ctx echo.Context, id string) error
	// Update a incident feedback
	// (PUT /v1/feedbacks/{id})
	UpdateIncidentFeedback(ctx echo.Context, id string) error
	// List functionalities
	// (GET /v1/functionalities)
	ListFunctionalities(ctx echo.Context, params ListFunctionalitiesParams) error
	// Creates a functionality
	// (POST /v1/functionalities)
	CreateFunctionality(ctx echo.Context) error
	// Delete a functionality
	// (DELETE /v1/functionalities/{id})
	DeleteFunctionality(ctx echo.Context, id string) error
	// Retrieves a functionality
	// (GET /v1/functionalities/{id})
	GetFunctionality(ctx echo.Context, id string) error
	// Update a functionality
	// (PUT /v1/functionalities/{id})
	UpdateFunctionality(ctx echo.Context, id string) error
	// Get functionality incidents chart
	// (GET /v1/functionalities/{id}/incidents_chart)
	GetFunctionalityIncidentsChart(ctx echo.Context, id string, params GetFunctionalityIncidentsChartParams) error
	// Get functionality uptime chart
	// (GET /v1/functionalities/{id}/uptime_chart)
	GetFunctionalityUptimeChart(ctx echo.Context, id string, params GetFunctionalityUptimeChartParams) error
	// Delete a incident_custom_field_selection
	// (DELETE /v1/incident_custom_field_selections/{id})
	DeleteIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Retrieves a incident_custom_field_selection
	// (GET /v1/incident_custom_field_selections/{id})
	GetIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Update a incident_custom_field_selection
	// (PUT /v1/incident_custom_field_selections/{id})
	UpdateIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Delete a incident_role task
	// (DELETE /v1/incident_role_tasks/{id})
	DeleteIncidentRoleTask(ctx echo.Context, id string) error
	// Retrieves a incident_role task
	// (GET /v1/incident_role_tasks/{id})
	GetIncidentRoleTasks(ctx echo.Context, id string) error
	// Update a incident_role task
	// (PUT /v1/incident_role_tasks/{id})
	UpdateIncidentRoleTask(ctx echo.Context, id string) error
	// List incident roles
	// (GET /v1/incident_roles)
	ListIncidentRoles(ctx echo.Context, params ListIncidentRolesParams) error
	// Creates a incident role
	// (POST /v1/incident_roles)
	CreateIncidentRole(ctx echo.Context) error
	// Delete a incident role
	// (DELETE /v1/incident_roles/{id})
	DeleteIncidentRole(ctx echo.Context, id string) error
	// Retrieves a incident role
	// (GET /v1/incident_roles/{id})
	GetIncidentRole(ctx echo.Context, id string) error
	// Update a incident role
	// (PUT /v1/incident_roles/{id})
	UpdateIncidentRole(ctx echo.Context, id string) error
	// List incident_role tasks
	// (GET /v1/incident_roles/{incident_role_id}/incident_role_tasks)
	ListIncidentRoleTasks(ctx echo.Context, incidentRoleId string, params ListIncidentRoleTasksParams) error
	// Creates a incident_role task
	// (POST /v1/incident_roles/{incident_role_id}/incident_role_tasks)
	CreateIncidentRoleTask(ctx echo.Context, incidentRoleId string) error
	// List incident_types
	// (GET /v1/incident_types)
	ListIncidentTypes(ctx echo.Context, params ListIncidentTypesParams) error
	// Creates a incident_type
	// (POST /v1/incident_types)
	CreateIncidentType(ctx echo.Context) error
	// Delete a incident_type
	// (DELETE /v1/incident_types/{id})
	DeleteIncidentType(ctx echo.Context, id string) error
	// Retrieves a incident_type
	// (GET /v1/incident_types/{id})
	GetIncidentType(ctx echo.Context, id string) error
	// Update a incident_type
	// (PUT /v1/incident_types/{id})
	UpdateIncidentType(ctx echo.Context, id string) error
	// List incidents
	// (GET /v1/incidents)
	ListIncidents(ctx echo.Context, params ListIncidentsParams) error
	// Creates a incident
	// (POST /v1/incidents)
	CreateIncident(ctx echo.Context) error
	// Delete a incident
	// (DELETE /v1/incidents/{id})
	DeleteIncident(ctx echo.Context, id string) error
	// Retrieves a incident
	// (GET /v1/incidents/{id})
	GetIncident(ctx echo.Context, id string) error
	// Update a incident
	// (PUT /v1/incidents/{id})
	UpdateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/cancel)
	CancelIncident(ctx echo.Context, id string) error
	// List incident_custom_field_selections
	// (GET /v1/incidents/{id}/custom_field_selections)
	ListIncidentCustomFieldSelections(ctx echo.Context, id string, params ListIncidentCustomFieldSelectionsParams) error
	// Creates a incident_custom_field_selection
	// (POST /v1/incidents/{id}/custom_field_selections)
	CreateIncidentCustomFieldSelection(ctx echo.Context, id string) error
	// Mitigate an incident
	// (PUT /v1/incidents/{id}/mitigate)
	MitigateIncident(ctx echo.Context, id string) error
	// Resolve an incident
	// (PUT /v1/incidents/{id}/resolve)
	ResolveIncident(ctx echo.Context, id string) error
	// List incident action items
	// (GET /v1/incidents/{incident_id}/action_items)
	ListIncidentActionItems(ctx echo.Context, incidentId string, params ListIncidentActionItemsParams) error
	// Creates a incident action item
	// (POST /v1/incidents/{incident_id}/action_items)
	CreateIncidentActionItem(ctx echo.Context, incidentId string) error
	// List alerts
	// (GET /v1/incidents/{incident_id}/alerts)
	ListAlert(ctx echo.Context, incidentId string, params ListAlertParams) error
	// Attach alerts to an incident
	// (POST /v1/incidents/{incident_id}/alerts)
	AttachAlert(ctx echo.Context, incidentId string) error
	// List incident events
	// (GET /v1/incidents/{incident_id}/events)
	ListIncidentEvents(ctx echo.Context, incidentId string, params ListIncidentEventsParams) error
	// Creates a incident event
	// (POST /v1/incidents/{incident_id}/events)
	CreateIncidentEvent(ctx echo.Context, incidentId string) error
	// List incident feedbacks
	// (GET /v1/incidents/{incident_id}/feedbacks)
	ListIncidentFeedbacks(ctx echo.Context, incidentId string, params ListIncidentFeedbacksParams) error
	// Creates a incident feedback
	// (POST /v1/incidents/{incident_id}/feedbacks)
	CreateIncidentFeedback(ctx echo.Context, incidentId string) error
	// List incident status page events
	// (GET /v1/incidents/{incident_id}/status-page-events)
	ListIncidentStatusPages(ctx echo.Context, incidentId string, params ListIncidentStatusPagesParams) error
	// Creates a incident status page event
	// (POST /v1/incidents/{incident_id}/status-page-events)
	CreateIncidentStatusPage(ctx echo.Context, incidentId string) error
	// Delete a playbook task
	// (DELETE /v1/playbook_tasks/{id})
	DeletePlaybookTask(ctx echo.Context, id string) error
	// Retrieves a playbook task
	// (GET /v1/playbook_tasks/{id})
	GetPlaybookTasks(ctx echo.Context, id string) error
	// Update a playbook task
	// (PUT /v1/playbook_tasks/{id})
	UpdatePlaybookTask(ctx echo.Context, id string) error
	// List playbooks
	// (GET /v1/playbooks)
	ListPlaybooks(ctx echo.Context, params ListPlaybooksParams) error
	// Creates a playbook
	// (POST /v1/playbooks)
	CreatePlaybook(ctx echo.Context) error
	// Delete a playbook
	// (DELETE /v1/playbooks/{id})
	DeletePlaybook(ctx echo.Context, id string) error
	// Retrieves a playbook
	// (GET /v1/playbooks/{id})
	GetPlaybook(ctx echo.Context, id string) error
	// Update a playbook
	// (PUT /v1/playbooks/{id})
	UpdatePlaybook(ctx echo.Context, id string) error
	// List playbook tasks
	// (GET /v1/playbooks/{playbook_id}/playbook_tasks)
	ListPlaybookTasks(ctx echo.Context, playbookId string, params ListPlaybookTasksParams) error
	// Creates a playbook task
	// (POST /v1/playbooks/{playbook_id}/playbook_tasks)
	CreatePlaybookTask(ctx echo.Context, playbookId string) error
	// List Postmortem Templates
	// (GET /v1/post_mortem_templates)
	ListPostmortemTemplates(ctx echo.Context, params ListPostmortemTemplatesParams) error
	// Creates a postmortem template
	// (POST /v1/post_mortem_templates)
	CreatePostmortemTemplate(ctx echo.Context) error
	// Delete a Postmortem Template
	// (DELETE /v1/post_mortem_templates/{id})
	DeletePostmortemTemplate(ctx echo.Context, id string) error
	// Retrieves a Postmortem Template
	// (GET /v1/post_mortem_templates/{id})
	GetPostmortemTemplate(ctx echo.Context, id string) error
	// Update a Postmortem Template
	// (PUT /v1/post_mortem_templates/{id})
	UpdatePostmortemTemplate(ctx echo.Context, id string) error
	// List incident postmortems
	// (GET /v1/post_mortems)
	ListIncidentPostMortems(ctx echo.Context, params ListIncidentPostMortemsParams) error
	// Retrieves a incident postmortem
	// (GET /v1/post_mortems/{id})
	ListIncidentPostmortem(ctx echo.Context, id string) error
	// Update a incident postmortem
	// (PUT /v1/post_mortems/{id})
	UpdateIncidentPostmortem(ctx echo.Context, id string) error
	// List pulses
	// (GET /v1/pulses)
	ListPulses(ctx echo.Context, params ListPulsesParams) error
	// Creates a pulse
	// (POST /v1/pulses)
	CreatePulse(ctx echo.Context) error
	// Retrieves a pulse
	// (GET /v1/pulses/{id})
	GetPulse(ctx echo.Context, id string) error
	// Update a pulse
	// (PUT /v1/pulses/{id})
	UpdatePulse(ctx echo.Context, id string) error
	// List services
	// (GET /v1/services)
	ListServices(ctx echo.Context, params ListServicesParams) error
	// Creates a service
	// (POST /v1/services)
	CreateService(ctx echo.Context) error
	// Delete a service
	// (DELETE /v1/services/{id})
	DeleteService(ctx echo.Context, id string) error
	// Retrieves a service
	// (GET /v1/services/{id})
	GetService(ctx echo.Context, id string) error
	// Update a service
	// (PUT /v1/services/{id})
	UpdateService(ctx echo.Context, id string) error
	// Get service incidents chart
	// (GET /v1/services/{id}/incidents_chart)
	GetServiceIncidentsChart(ctx echo.Context, id string, params GetServiceIncidentsChartParams) error
	// Get service uptime chart
	// (GET /v1/services/{id}/uptime_chart)
	GetServiceUptimeChart(ctx echo.Context, id string, params GetServiceUptimeChartParams) error
	// List severities
	// (GET /v1/severities)
	ListSeverities(ctx echo.Context, params ListSeveritiesParams) error
	// Creates a severity
	// (POST /v1/severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a severity
	// (DELETE /v1/severities/{id})
	DeleteSeverity(ctx echo.Context, id string) error
	// Retrieves a severity
	// (GET /v1/severities/{id})
	GetSeverity(ctx echo.Context, id string) error
	// Update a severity
	// (PUT /v1/severities/{id})
	UpdateSeverity(ctx echo.Context, id string) error
	// Delete a incident status page event
	// (DELETE /v1/status-page-events/{id})
	DeleteIncidentStatusPage(ctx echo.Context, id string) error
	// Retrieves a incident status page event
	// (GET /v1/status-page-events/{id})
	GetIncidentStatusPages(ctx echo.Context, id string) error
	// Update a incident status page event
	// (PUT /v1/status-page-events/{id})
	UpdateIncidentStatusPage(ctx echo.Context, id string) error
	// List public status pages
	// (GET /v1/status-pages)
	ListStatusPages(ctx echo.Context, params ListStatusPagesParams) error
	// Creates a public status page
	// (POST /v1/status-pages)
	CreateStatusPage(ctx echo.Context) error
	// Delete a public status page
	// (DELETE /v1/status-pages/{id})
	DeleteStatusPage(ctx echo.Context, id string) error
	// Retrieves a public status page
	// (GET /v1/status-pages/{id})
	GetStatusPage(ctx echo.Context, id string) error
	// Update a public status page
	// (PUT /v1/status-pages/{id})
	UpdateStatusPage(ctx echo.Context, id string) error
	// List teams
	// (GET /v1/teams)
	ListTeams(ctx echo.Context, params ListTeamsParams) error
	// Creates a team
	// (POST /v1/teams)
	CreateTeam(ctx echo.Context) error
	// Delete a team
	// (DELETE /v1/teams/{id})
	DeleteTeam(ctx echo.Context, id string) error
	// Retrieves a team
	// (GET /v1/teams/{id})
	GetTeam(ctx echo.Context, id string) error
	// Update a team
	// (PUT /v1/teams/{id})
	UpdateTeam(ctx echo.Context, id string) error
	// Delete a workflow_custom_field_selection
	// (DELETE /v1/workflow_custom_field_selections/{id})
	DeleteWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Retrieves a workflow_custom_field_selection
	// (GET /v1/workflow_custom_field_selections/{id})
	GetWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Update a genius_workflow_custom_field_selection
	// (PUT /v1/workflow_custom_field_selections/{id})
	UpdateWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// Delete a workflow task
	// (DELETE /v1/workflow_tasks/{id})
	DeleteWorkflowTask(ctx echo.Context, id string) error
	// Retrieves a workflow task
	// (GET /v1/workflow_tasks/{id})
	GetWorkflowTask(ctx echo.Context, id string) error
	// Update a workflow task
	// (PUT /v1/workflow_tasks/{id})
	UpdateWorkflowTask(ctx echo.Context, id string) error
	// List workflows
	// (GET /v1/workflows)
	ListWorkflows(ctx echo.Context, params ListWorkflowsParams) error
	// Creates a workflow
	// (POST /v1/workflows)
	CreateWorkflow(ctx echo.Context) error
	// Delete a workflow
	// (DELETE /v1/workflows/{id})
	DeleteWorkflow(ctx echo.Context, id string) error
	// Retrieves a workflow
	// (GET /v1/workflows/{id})
	GetWorkflow(ctx echo.Context, id string) error
	// Update a workflow
	// (PUT /v1/workflows/{id})
	UpdateWorkflow(ctx echo.Context, id string) error
	// List workflow_custom_field_selections
	// (GET /v1/workflows/{id}/custom_field_selections)
	ListWorkflowCustomFieldSelections(ctx echo.Context, id string, params ListWorkflowCustomFieldSelectionsParams) error
	// Creates a workflow_custom_field_selection
	// (POST /v1/workflows/{id}/custom_field_selections)
	CreateWorkflowCustomFieldSelection(ctx echo.Context, id string) error
	// List workflow tasks
	// (GET /v1/workflows/{workflow_id}/workflow_tasks)
	ListWorkflowTasks(ctx echo.Context, workflowId string, params ListWorkflowTasksParams) error
	// Creates a workflow task
	// (POST /v1/workflows/{workflow_id}/workflow_tasks)
	CreateWorkflowTask(ctx echo.Context, workflowId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScimUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetScimUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScimUsersParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "startIndex" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndex", ctx.QueryParams(), &params.StartIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startIndex: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScimUsers(ctx, params)
	return err
}

// PostScimUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostScimUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScimUsers(ctx)
	return err
}

// DeleteScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScimUsersId(ctx, id)
	return err
}

// GetScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScimUsersId(ctx, id)
	return err
}

// PatchScimUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScimUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScimUsersId(ctx, id)
	return err
}

// DeleteIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentActionItem(ctx, id)
	return err
}

// GetIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentActionItems(ctx, id)
	return err
}

// UpdateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentActionItem(ctx, id)
	return err
}

// ListAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlerts(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlerts(ctx, params)
	return err
}

// CreateAlert converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAlert(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAlert(ctx)
	return err
}

// GetAlert converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlert(ctx, id)
	return err
}

// ListCauses converts echo context to params.
func (w *ServerInterfaceWrapper) ListCauses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCausesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCauses(ctx, params)
	return err
}

// CreateCause converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCause(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCause(ctx)
	return err
}

// DeleteCause converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCause(ctx, id)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, id)
	return err
}

// UpdateCause converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCause(ctx, id)
	return err
}

// DeleteCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomFieldOption(ctx, id)
	return err
}

// GetCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomFieldOption(ctx, id)
	return err
}

// UpdateCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomFieldOption(ctx, id)
	return err
}

// ListCustomFields converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomFields(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomFieldsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCustomFields(ctx, params)
	return err
}

// CreateCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomField(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomField(ctx)
	return err
}

// ListCustomFieldOptions converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomFieldOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_field_id" -------------
	var customFieldId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, ctx.Param("custom_field_id"), &customFieldId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_field_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomFieldOptionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCustomFieldOptions(ctx, customFieldId, params)
	return err
}

// CreateCustomFieldOption converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomFieldOption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_field_id" -------------
	var customFieldId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "custom_field_id", runtime.ParamLocationPath, ctx.Param("custom_field_id"), &customFieldId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_field_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomFieldOption(ctx, customFieldId)
	return err
}

// DeleteCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomField(ctx, id)
	return err
}

// GetCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomField(ctx, id)
	return err
}

// UpdateCustomField converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomField(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomField(ctx, id)
	return err
}

// ListEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) ListEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, id)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, id)
	return err
}

// UpdateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateEnvironment(ctx, id)
	return err
}

// DeleteIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentEvent(ctx, id)
	return err
}

// GetIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentEvents(ctx, id)
	return err
}

// UpdateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentEvent(ctx, id)
	return err
}

// DeleteIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentFeedback(ctx, id)
	return err
}

// GetIncidentFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentFeedbacks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentFeedbacks(ctx, id)
	return err
}

// UpdateIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentFeedback(ctx, id)
	return err
}

// ListFunctionalities converts echo context to params.
func (w *ServerInterfaceWrapper) ListFunctionalities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFunctionalitiesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[name]", ctx.QueryParams(), &params.FilterName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[name]: %s", err))
	}

	// ------------- Optional query parameter "filter[slug]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[slug]", ctx.QueryParams(), &params.FilterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[slug]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFunctionalities(ctx, params)
	return err
}

// CreateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunctionality(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFunctionality(ctx)
	return err
}

// DeleteFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFunctionality(ctx, id)
	return err
}

// GetFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionality(ctx, id)
	return err
}

// UpdateFunctionality converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunctionality(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFunctionality(ctx, id)
	return err
}

// GetFunctionalityIncidentsChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionalityIncidentsChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFunctionalityIncidentsChartParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionalityIncidentsChart(ctx, id, params)
	return err
}

// GetFunctionalityUptimeChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionalityUptimeChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFunctionalityUptimeChartParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFunctionalityUptimeChart(ctx, id, params)
	return err
}

// DeleteIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentCustomFieldSelection(ctx, id)
	return err
}

// GetIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentCustomFieldSelection(ctx, id)
	return err
}

// UpdateIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentCustomFieldSelection(ctx, id)
	return err
}

// DeleteIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRoleTask(ctx, id)
	return err
}

// GetIncidentRoleTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRoleTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRoleTasks(ctx, id)
	return err
}

// UpdateIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRoleTask(ctx, id)
	return err
}

// ListIncidentRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRolesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoles(ctx, params)
	return err
}

// CreateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRole(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRole(ctx)
	return err
}

// DeleteIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentRole(ctx, id)
	return err
}

// GetIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentRole(ctx, id)
	return err
}

// UpdateIncidentRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentRole(ctx, id)
	return err
}

// ListIncidentRoleTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentRoleTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_role_id" -------------
	var incidentRoleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, ctx.Param("incident_role_id"), &incidentRoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_role_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentRoleTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentRoleTasks(ctx, incidentRoleId, params)
	return err
}

// CreateIncidentRoleTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentRoleTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_role_id" -------------
	var incidentRoleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_role_id", runtime.ParamLocationPath, ctx.Param("incident_role_id"), &incidentRoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_role_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentRoleTask(ctx, incidentRoleId)
	return err
}

// ListIncidentTypes converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentTypesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentTypes(ctx, params)
	return err
}

// CreateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentType(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentType(ctx)
	return err
}

// DeleteIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentType(ctx, id)
	return err
}

// GetIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentType(ctx, id)
	return err
}

// UpdateIncidentType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentType(ctx, id)
	return err
}

// ListIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[status]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[status]", ctx.QueryParams(), &params.FilterStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[status]: %s", err))
	}

	// ------------- Optional query parameter "filter[severity]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[severity]", ctx.QueryParams(), &params.FilterSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[severity]: %s", err))
	}

	// ------------- Optional query parameter "filter[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[type]", ctx.QueryParams(), &params.FilterType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[type]: %s", err))
	}

	// ------------- Optional query parameter "filter[user_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[user_id]", ctx.QueryParams(), &params.FilterUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[user_id]: %s", err))
	}

	// ------------- Optional query parameter "filter[environments]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[environments]", ctx.QueryParams(), &params.FilterEnvironments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[environments]: %s", err))
	}

	// ------------- Optional query parameter "filter[functionalities]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[functionalities]", ctx.QueryParams(), &params.FilterFunctionalities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[functionalities]: %s", err))
	}

	// ------------- Optional query parameter "filter[services]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[services]", ctx.QueryParams(), &params.FilterServices)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[services]: %s", err))
	}

	// ------------- Optional query parameter "filter[teams]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[teams]", ctx.QueryParams(), &params.FilterTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[teams]: %s", err))
	}

	// ------------- Optional query parameter "filter[custom_field_selected_option_ids]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[custom_field_selected_option_ids]", ctx.QueryParams(), &params.FilterCustomFieldSelectedOptionIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[custom_field_selected_option_ids]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, id)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, id)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, id)
	return err
}

// CancelIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CancelIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelIncident(ctx, id)
	return err
}

// ListIncidentCustomFieldSelections converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentCustomFieldSelections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentCustomFieldSelectionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentCustomFieldSelections(ctx, id, params)
	return err
}

// CreateIncidentCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentCustomFieldSelection(ctx, id)
	return err
}

// MitigateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) MitigateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MitigateIncident(ctx, id)
	return err
}

// ResolveIncident converts echo context to params.
func (w *ServerInterfaceWrapper) ResolveIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResolveIncident(ctx, id)
	return err
}

// ListIncidentActionItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentActionItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentActionItemsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentActionItems(ctx, incidentId, params)
	return err
}

// CreateIncidentActionItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentActionItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentActionItem(ctx, incidentId)
	return err
}

// ListAlert converts echo context to params.
func (w *ServerInterfaceWrapper) ListAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlertParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAlert(ctx, incidentId, params)
	return err
}

// AttachAlert converts echo context to params.
func (w *ServerInterfaceWrapper) AttachAlert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachAlert(ctx, incidentId)
	return err
}

// ListIncidentEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentEventsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentEvents(ctx, incidentId, params)
	return err
}

// CreateIncidentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentEvent(ctx, incidentId)
	return err
}

// ListIncidentFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentFeedbacks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentFeedbacksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentFeedbacks(ctx, incidentId, params)
	return err
}

// CreateIncidentFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentFeedback(ctx, incidentId)
	return err
}

// ListIncidentStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentStatusPages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentStatusPagesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentStatusPages(ctx, incidentId, params)
	return err
}

// CreateIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incident_id" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, ctx.Param("incident_id"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incident_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentStatusPage(ctx, incidentId)
	return err
}

// DeletePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybookTask(ctx, id)
	return err
}

// GetPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookTasks(ctx, id)
	return err
}

// UpdatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybookTask(ctx, id)
	return err
}

// ListPlaybooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybooks(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybooksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybooks(ctx, params)
	return err
}

// CreatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybook(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybook(ctx)
	return err
}

// DeletePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlaybook(ctx, id)
	return err
}

// GetPlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybook(ctx, id)
	return err
}

// UpdatePlaybook converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlaybook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlaybook(ctx, id)
	return err
}

// ListPlaybookTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlaybookTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlaybookTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlaybookTasks(ctx, playbookId, params)
	return err
}

// CreatePlaybookTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlaybookTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "playbook_id" -------------
	var playbookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "playbook_id", runtime.ParamLocationPath, ctx.Param("playbook_id"), &playbookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter playbook_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlaybookTask(ctx, playbookId)
	return err
}

// ListPostmortemTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) ListPostmortemTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostmortemTemplatesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPostmortemTemplates(ctx, params)
	return err
}

// CreatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostmortemTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePostmortemTemplate(ctx)
	return err
}

// DeletePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostmortemTemplate(ctx, id)
	return err
}

// GetPostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostmortemTemplate(ctx, id)
	return err
}

// UpdatePostmortemTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostmortemTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePostmortemTemplate(ctx, id)
	return err
}

// ListIncidentPostMortems converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentPostMortems(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentPostMortemsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[search]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[search]", ctx.QueryParams(), &params.FilterSearch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[search]: %s", err))
	}

	// ------------- Optional query parameter "filter[status]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[status]", ctx.QueryParams(), &params.FilterStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[status]: %s", err))
	}

	// ------------- Optional query parameter "filter[severity]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[severity]", ctx.QueryParams(), &params.FilterSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[severity]: %s", err))
	}

	// ------------- Optional query parameter "filter[type]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[type]", ctx.QueryParams(), &params.FilterType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[type]: %s", err))
	}

	// ------------- Optional query parameter "filter[user_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[user_id]", ctx.QueryParams(), &params.FilterUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[user_id]: %s", err))
	}

	// ------------- Optional query parameter "filter[environments]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[environments]", ctx.QueryParams(), &params.FilterEnvironments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[environments]: %s", err))
	}

	// ------------- Optional query parameter "filter[functionalities]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[functionalities]", ctx.QueryParams(), &params.FilterFunctionalities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[functionalities]: %s", err))
	}

	// ------------- Optional query parameter "filter[services]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[services]", ctx.QueryParams(), &params.FilterServices)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[services]: %s", err))
	}

	// ------------- Optional query parameter "filter[teams]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[teams]", ctx.QueryParams(), &params.FilterTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[teams]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentPostMortems(ctx, params)
	return err
}

// ListIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncidentPostmortem(ctx, id)
	return err
}

// UpdateIncidentPostmortem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentPostmortem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentPostmortem(ctx, id)
	return err
}

// ListPulses converts echo context to params.
func (w *ServerInterfaceWrapper) ListPulses(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPulsesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPulses(ctx, params)
	return err
}

// CreatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePulse(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePulse(ctx)
	return err
}

// GetPulse converts echo context to params.
func (w *ServerInterfaceWrapper) GetPulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPulse(ctx, id)
	return err
}

// UpdatePulse converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePulse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePulse(ctx, id)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "filter[name]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[name]", ctx.QueryParams(), &params.FilterName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[name]: %s", err))
	}

	// ------------- Optional query parameter "filter[slug]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[slug]", ctx.QueryParams(), &params.FilterSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[slug]: %s", err))
	}

	// ------------- Optional query parameter "filter[backstage_id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[backstage_id]", ctx.QueryParams(), &params.FilterBackstageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter[backstage_id]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx, params)
	return err
}

// CreateService converts echo context to params.
func (w *ServerInterfaceWrapper) CreateService(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateService(ctx)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, id)
	return err
}

// UpdateService converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateService(ctx, id)
	return err
}

// GetServiceIncidentsChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceIncidentsChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceIncidentsChartParams
	// ------------- Required query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, true, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceIncidentsChart(ctx, id, params)
	return err
}

// GetServiceUptimeChart converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceUptimeChart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceUptimeChartParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceUptimeChart(ctx, id, params)
	return err
}

// ListSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) ListSeverities(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeveritiesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSeverities(ctx, params)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSeverity(ctx, id)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSeverity(ctx, id)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSeverity(ctx, id)
	return err
}

// DeleteIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentStatusPage(ctx, id)
	return err
}

// GetIncidentStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentStatusPages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentStatusPages(ctx, id)
	return err
}

// UpdateIncidentStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentStatusPage(ctx, id)
	return err
}

// ListStatusPages converts echo context to params.
func (w *ServerInterfaceWrapper) ListStatusPages(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStatusPagesParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStatusPages(ctx, params)
	return err
}

// CreateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStatusPage(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStatusPage(ctx)
	return err
}

// DeleteStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStatusPage(ctx, id)
	return err
}

// GetStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusPage(ctx, id)
	return err
}

// UpdateStatusPage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStatusPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStatusPage(ctx, id)
	return err
}

// ListTeams converts echo context to params.
func (w *ServerInterfaceWrapper) ListTeams(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTeams(ctx, params)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTeam(ctx)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTeam(ctx, id)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, id)
	return err
}

// UpdateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTeam(ctx, id)
	return err
}

// DeleteWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflowCustomFieldSelection(ctx, id)
	return err
}

// GetWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflowCustomFieldSelection(ctx, id)
	return err
}

// UpdateWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflowCustomFieldSelection(ctx, id)
	return err
}

// DeleteWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflowTask(ctx, id)
	return err
}

// GetWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflowTask(ctx, id)
	return err
}

// UpdateWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflowTask(ctx, id)
	return err
}

// ListWorkflows converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflows(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflows(ctx, params)
	return err
}

// CreateWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflow(ctx echo.Context) error {
	var err error

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflow(ctx)
	return err
}

// DeleteWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorkflow(ctx, id)
	return err
}

// GetWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkflow(ctx, id)
	return err
}

// UpdateWorkflow converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorkflow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorkflow(ctx, id)
	return err
}

// ListWorkflowCustomFieldSelections converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflowCustomFieldSelections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowCustomFieldSelectionsParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflowCustomFieldSelections(ctx, id, params)
	return err
}

// CreateWorkflowCustomFieldSelection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflowCustomFieldSelection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflowCustomFieldSelection(ctx, id)
	return err
}

// ListWorkflowTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkflowTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow_id" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, ctx.Param("workflow_id"), &workflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowTasksParams
	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[number]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkflowTasks(ctx, workflowId, params)
	return err
}

// CreateWorkflowTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkflowTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workflow_id" -------------
	var workflowId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workflow_id", runtime.ParamLocationPath, ctx.Param("workflow_id"), &workflowId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflow_id: %s", err))
	}

	ctx.Set(Bearer_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkflowTask(ctx, workflowId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scim/Users", wrapper.GetScimUsers)
	router.POST(baseURL+"/scim/Users", wrapper.PostScimUsers)
	router.DELETE(baseURL+"/scim/Users/:id", wrapper.DeleteScimUsersId)
	router.GET(baseURL+"/scim/Users/:id", wrapper.GetScimUsersId)
	router.PATCH(baseURL+"/scim/Users/:id", wrapper.PatchScimUsersId)
	router.DELETE(baseURL+"/v1/action_items/:id", wrapper.DeleteIncidentActionItem)
	router.GET(baseURL+"/v1/action_items/:id", wrapper.GetIncidentActionItems)
	router.PUT(baseURL+"/v1/action_items/:id", wrapper.UpdateIncidentActionItem)
	router.GET(baseURL+"/v1/alerts", wrapper.ListAlerts)
	router.POST(baseURL+"/v1/alerts", wrapper.CreateAlert)
	router.GET(baseURL+"/v1/alerts/:id", wrapper.GetAlert)
	router.GET(baseURL+"/v1/causes", wrapper.ListCauses)
	router.POST(baseURL+"/v1/causes", wrapper.CreateCause)
	router.DELETE(baseURL+"/v1/causes/:id", wrapper.DeleteCause)
	router.GET(baseURL+"/v1/causes/:id", wrapper.GetCause)
	router.PUT(baseURL+"/v1/causes/:id", wrapper.UpdateCause)
	router.DELETE(baseURL+"/v1/custom_field_options/:id", wrapper.DeleteCustomFieldOption)
	router.GET(baseURL+"/v1/custom_field_options/:id", wrapper.GetCustomFieldOption)
	router.PUT(baseURL+"/v1/custom_field_options/:id", wrapper.UpdateCustomFieldOption)
	router.GET(baseURL+"/v1/custom_fields", wrapper.ListCustomFields)
	router.POST(baseURL+"/v1/custom_fields", wrapper.CreateCustomField)
	router.GET(baseURL+"/v1/custom_fields/:custom_field_id/options", wrapper.ListCustomFieldOptions)
	router.POST(baseURL+"/v1/custom_fields/:custom_field_id/options", wrapper.CreateCustomFieldOption)
	router.DELETE(baseURL+"/v1/custom_fields/:id", wrapper.DeleteCustomField)
	router.GET(baseURL+"/v1/custom_fields/:id", wrapper.GetCustomField)
	router.PUT(baseURL+"/v1/custom_fields/:id", wrapper.UpdateCustomField)
	router.GET(baseURL+"/v1/environments", wrapper.ListEnvironments)
	router.POST(baseURL+"/v1/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/v1/environments/:id", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/v1/environments/:id", wrapper.GetEnvironment)
	router.PUT(baseURL+"/v1/environments/:id", wrapper.UpdateEnvironment)
	router.DELETE(baseURL+"/v1/events/:id", wrapper.DeleteIncidentEvent)
	router.GET(baseURL+"/v1/events/:id", wrapper.GetIncidentEvents)
	router.PUT(baseURL+"/v1/events/:id", wrapper.UpdateIncidentEvent)
	router.DELETE(baseURL+"/v1/feedbacks/:id", wrapper.DeleteIncidentFeedback)
	router.GET(baseURL+"/v1/feedbacks/:id", wrapper.GetIncidentFeedbacks)
	router.PUT(baseURL+"/v1/feedbacks/:id", wrapper.UpdateIncidentFeedback)
	router.GET(baseURL+"/v1/functionalities", wrapper.ListFunctionalities)
	router.POST(baseURL+"/v1/functionalities", wrapper.CreateFunctionality)
	router.DELETE(baseURL+"/v1/functionalities/:id", wrapper.DeleteFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id", wrapper.GetFunctionality)
	router.PUT(baseURL+"/v1/functionalities/:id", wrapper.UpdateFunctionality)
	router.GET(baseURL+"/v1/functionalities/:id/incidents_chart", wrapper.GetFunctionalityIncidentsChart)
	router.GET(baseURL+"/v1/functionalities/:id/uptime_chart", wrapper.GetFunctionalityUptimeChart)
	router.DELETE(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.DeleteIncidentCustomFieldSelection)
	router.GET(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.GetIncidentCustomFieldSelection)
	router.PUT(baseURL+"/v1/incident_custom_field_selections/:id", wrapper.UpdateIncidentCustomFieldSelection)
	router.DELETE(baseURL+"/v1/incident_role_tasks/:id", wrapper.DeleteIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_role_tasks/:id", wrapper.GetIncidentRoleTasks)
	router.PUT(baseURL+"/v1/incident_role_tasks/:id", wrapper.UpdateIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_roles", wrapper.ListIncidentRoles)
	router.POST(baseURL+"/v1/incident_roles", wrapper.CreateIncidentRole)
	router.DELETE(baseURL+"/v1/incident_roles/:id", wrapper.DeleteIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:id", wrapper.GetIncidentRole)
	router.PUT(baseURL+"/v1/incident_roles/:id", wrapper.UpdateIncidentRole)
	router.GET(baseURL+"/v1/incident_roles/:incident_role_id/incident_role_tasks", wrapper.ListIncidentRoleTasks)
	router.POST(baseURL+"/v1/incident_roles/:incident_role_id/incident_role_tasks", wrapper.CreateIncidentRoleTask)
	router.GET(baseURL+"/v1/incident_types", wrapper.ListIncidentTypes)
	router.POST(baseURL+"/v1/incident_types", wrapper.CreateIncidentType)
	router.DELETE(baseURL+"/v1/incident_types/:id", wrapper.DeleteIncidentType)
	router.GET(baseURL+"/v1/incident_types/:id", wrapper.GetIncidentType)
	router.PUT(baseURL+"/v1/incident_types/:id", wrapper.UpdateIncidentType)
	router.GET(baseURL+"/v1/incidents", wrapper.ListIncidents)
	router.POST(baseURL+"/v1/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/v1/incidents/:id", wrapper.DeleteIncident)
	router.GET(baseURL+"/v1/incidents/:id", wrapper.GetIncident)
	router.PUT(baseURL+"/v1/incidents/:id", wrapper.UpdateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/cancel", wrapper.CancelIncident)
	router.GET(baseURL+"/v1/incidents/:id/custom_field_selections", wrapper.ListIncidentCustomFieldSelections)
	router.POST(baseURL+"/v1/incidents/:id/custom_field_selections", wrapper.CreateIncidentCustomFieldSelection)
	router.PUT(baseURL+"/v1/incidents/:id/mitigate", wrapper.MitigateIncident)
	router.PUT(baseURL+"/v1/incidents/:id/resolve", wrapper.ResolveIncident)
	router.GET(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.ListIncidentActionItems)
	router.POST(baseURL+"/v1/incidents/:incident_id/action_items", wrapper.CreateIncidentActionItem)
	router.GET(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.ListAlert)
	router.POST(baseURL+"/v1/incidents/:incident_id/alerts", wrapper.AttachAlert)
	router.GET(baseURL+"/v1/incidents/:incident_id/events", wrapper.ListIncidentEvents)
	router.POST(baseURL+"/v1/incidents/:incident_id/events", wrapper.CreateIncidentEvent)
	router.GET(baseURL+"/v1/incidents/:incident_id/feedbacks", wrapper.ListIncidentFeedbacks)
	router.POST(baseURL+"/v1/incidents/:incident_id/feedbacks", wrapper.CreateIncidentFeedback)
	router.GET(baseURL+"/v1/incidents/:incident_id/status-page-events", wrapper.ListIncidentStatusPages)
	router.POST(baseURL+"/v1/incidents/:incident_id/status-page-events", wrapper.CreateIncidentStatusPage)
	router.DELETE(baseURL+"/v1/playbook_tasks/:id", wrapper.DeletePlaybookTask)
	router.GET(baseURL+"/v1/playbook_tasks/:id", wrapper.GetPlaybookTasks)
	router.PUT(baseURL+"/v1/playbook_tasks/:id", wrapper.UpdatePlaybookTask)
	router.GET(baseURL+"/v1/playbooks", wrapper.ListPlaybooks)
	router.POST(baseURL+"/v1/playbooks", wrapper.CreatePlaybook)
	router.DELETE(baseURL+"/v1/playbooks/:id", wrapper.DeletePlaybook)
	router.GET(baseURL+"/v1/playbooks/:id", wrapper.GetPlaybook)
	router.PUT(baseURL+"/v1/playbooks/:id", wrapper.UpdatePlaybook)
	router.GET(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.ListPlaybookTasks)
	router.POST(baseURL+"/v1/playbooks/:playbook_id/playbook_tasks", wrapper.CreatePlaybookTask)
	router.GET(baseURL+"/v1/post_mortem_templates", wrapper.ListPostmortemTemplates)
	router.POST(baseURL+"/v1/post_mortem_templates", wrapper.CreatePostmortemTemplate)
	router.DELETE(baseURL+"/v1/post_mortem_templates/:id", wrapper.DeletePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortem_templates/:id", wrapper.GetPostmortemTemplate)
	router.PUT(baseURL+"/v1/post_mortem_templates/:id", wrapper.UpdatePostmortemTemplate)
	router.GET(baseURL+"/v1/post_mortems", wrapper.ListIncidentPostMortems)
	router.GET(baseURL+"/v1/post_mortems/:id", wrapper.ListIncidentPostmortem)
	router.PUT(baseURL+"/v1/post_mortems/:id", wrapper.UpdateIncidentPostmortem)
	router.GET(baseURL+"/v1/pulses", wrapper.ListPulses)
	router.POST(baseURL+"/v1/pulses", wrapper.CreatePulse)
	router.GET(baseURL+"/v1/pulses/:id", wrapper.GetPulse)
	router.PUT(baseURL+"/v1/pulses/:id", wrapper.UpdatePulse)
	router.GET(baseURL+"/v1/services", wrapper.ListServices)
	router.POST(baseURL+"/v1/services", wrapper.CreateService)
	router.DELETE(baseURL+"/v1/services/:id", wrapper.DeleteService)
	router.GET(baseURL+"/v1/services/:id", wrapper.GetService)
	router.PUT(baseURL+"/v1/services/:id", wrapper.UpdateService)
	router.GET(baseURL+"/v1/services/:id/incidents_chart", wrapper.GetServiceIncidentsChart)
	router.GET(baseURL+"/v1/services/:id/uptime_chart", wrapper.GetServiceUptimeChart)
	router.GET(baseURL+"/v1/severities", wrapper.ListSeverities)
	router.POST(baseURL+"/v1/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/v1/severities/:id", wrapper.DeleteSeverity)
	router.GET(baseURL+"/v1/severities/:id", wrapper.GetSeverity)
	router.PUT(baseURL+"/v1/severities/:id", wrapper.UpdateSeverity)
	router.DELETE(baseURL+"/v1/status-page-events/:id", wrapper.DeleteIncidentStatusPage)
	router.GET(baseURL+"/v1/status-page-events/:id", wrapper.GetIncidentStatusPages)
	router.PUT(baseURL+"/v1/status-page-events/:id", wrapper.UpdateIncidentStatusPage)
	router.GET(baseURL+"/v1/status-pages", wrapper.ListStatusPages)
	router.POST(baseURL+"/v1/status-pages", wrapper.CreateStatusPage)
	router.DELETE(baseURL+"/v1/status-pages/:id", wrapper.DeleteStatusPage)
	router.GET(baseURL+"/v1/status-pages/:id", wrapper.GetStatusPage)
	router.PUT(baseURL+"/v1/status-pages/:id", wrapper.UpdateStatusPage)
	router.GET(baseURL+"/v1/teams", wrapper.ListTeams)
	router.POST(baseURL+"/v1/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/v1/teams/:id", wrapper.DeleteTeam)
	router.GET(baseURL+"/v1/teams/:id", wrapper.GetTeam)
	router.PUT(baseURL+"/v1/teams/:id", wrapper.UpdateTeam)
	router.DELETE(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.DeleteWorkflowCustomFieldSelection)
	router.GET(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.GetWorkflowCustomFieldSelection)
	router.PUT(baseURL+"/v1/workflow_custom_field_selections/:id", wrapper.UpdateWorkflowCustomFieldSelection)
	router.DELETE(baseURL+"/v1/workflow_tasks/:id", wrapper.DeleteWorkflowTask)
	router.GET(baseURL+"/v1/workflow_tasks/:id", wrapper.GetWorkflowTask)
	router.PUT(baseURL+"/v1/workflow_tasks/:id", wrapper.UpdateWorkflowTask)
	router.GET(baseURL+"/v1/workflows", wrapper.ListWorkflows)
	router.POST(baseURL+"/v1/workflows", wrapper.CreateWorkflow)
	router.DELETE(baseURL+"/v1/workflows/:id", wrapper.DeleteWorkflow)
	router.GET(baseURL+"/v1/workflows/:id", wrapper.GetWorkflow)
	router.PUT(baseURL+"/v1/workflows/:id", wrapper.UpdateWorkflow)
	router.GET(baseURL+"/v1/workflows/:id/custom_field_selections", wrapper.ListWorkflowCustomFieldSelections)
	router.POST(baseURL+"/v1/workflows/:id/custom_field_selections", wrapper.CreateWorkflowCustomFieldSelection)
	router.GET(baseURL+"/v1/workflows/:workflow_id/workflow_tasks", wrapper.ListWorkflowTasks)
	router.POST(baseURL+"/v1/workflows/:workflow_id/workflow_tasks", wrapper.CreateWorkflowTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9e3PbtrYwDn8VDM+7J0kfSdXNtuxn9uzXSdzWp7k9sdN99qkzGoiEJNQUoRKkHbeT",
	"7/4bALyAFHiVRF2Mf9pYxH0tLKz7+tswyWJJHOR41Lj426DmHC0g/yc0PUycMfbQYuy5eDZD7ngJXbjg",
	"X5cuWSLXw4j/hR0TW8jxxnInkzgWZn+yFsjxF8bF78blu3dGy7j88B+jZXz4+OHK+NoyvKclMi4M6rnY",
	"mRnfWwXDjWcu8ZfyoNc3yTFbxs3VrdEyvnxg/68xwz12rK1OsHQxcbH3tNVJqAc9n25hCnY8Au4eWiQm",
	"8CC9N1rGlNg2eRz7S+WYwQ/QdeFT5hzBCYUIlp5ojmdzo2UskIX9hdEybPJYfy5xUBkzkSVyDNZxvHTJ",
	"zEWUGi3DhI6JbBtZRsuwiIOqzb2BmxFDGTkP2CXOAjnehkAdjz31HX5M0N4crm7nHsejRj+JxhsefYOU",
	"QbqoyH3AJtrCuA/I3QbkNkpZ4mEfMMUTvEFcyyZU6BtcLG1ktAwPUc9oGQ5xF9A2WvwJtHx2tSvd6Vwa",
	"Qj3oeoJYIA+Z4p/QvHfIo42sGf9zgT08g+KTiyixH/g/ZUoTL22FHhG2G6/qoqMDT5PZoMeEEBtBRzVG",
	"yBKkb5lEV9VrEf2S01mImi5eCpJoXPIhKPDm0ANBe+DNEXgk7v3UJo8do6Wab2y6CIZnG//qL63wV0rx",
	"zEHW2KfIlX6n/mIB3SfpF2lBcjsOY+mH8BmXfvIQXMhNqA3N+7FJFgvolIHOdwb9P33sIos/qPIxx73J",
	"5A9keqw3tKzEW8Ze4Ew+LToAj4gzwNbq8d/OEWAfAbaAN8cUiOEBGx6wP4NBgEcMxXYSg6nGloeTvnZU",
	"g4XkNn8U1krZfUmox/Yavwl4gWzsIDWOh80DmM2h4yA7iakpvteSBoqndeACKT58V4Avfa1kxjB/02FL",
	"+TIwLkhiijiTpEK5mH7nzyHayTPU54aCS1ZiUtFQCVCO3SskJ3kFFLOnLlW4lOggpHPPumMusdE2Lhcb",
	"t8StijCYryNrZDEYGwNAi/+Pkc2wb6UDZUMVn+TKsrKOT1ypCSH3C+jepw8SOk8fp8bF738naR/2+Att",
	"Y+fe+Pq9lfy6tOETG4/P+v1rKwWN4PZu486iBfkDqwEQbhDwNkoU5rvJ78yadMDnYLMAT4FDPABBuOWo",
	"pZroSQejnCcaBvOxo2kxBWQKoBMhTNSy2l1Mwlr95nHQ5p8Cb1P3GFJ4GmJDFnqyVzv/dnNhJfNIWX+A",
	"rWrnxDoVX7Fo4sy1k+hZy98CeghkRMX6gwEAb1P4LO/BQ5l9qvFxKFHPd20Fywm+fH4HpkTwmcnTKMYu",
	"cbBK+NjI9VaPI2BUx1ABjrfQQ+we8jbsJxWPBT2o2IQl5ChoA96gZTi+bcMJu2me6yMVKYuVBwp24Er6",
	"CqDnQSZ/hK+K2Forhji07YCI//9cNDUujP/6MVYu/hhoFn+U1RXfv5YAtA0nadxKbyt5uPdIwWT8ip7Y",
	"oXLowpnqTB+g7StI0m/s59yuKWRg04ejldlfIPwrjv8m+LKpow/VDKWOnRLfNTNItPgWHgpfDXiJZhfg",
	"L+RYiN6/khjGJZwh1/I9dihkSWfIwexNf8CmR1yyZLwXQ1aLzLgQPrHPjZYRjMNFNugwTP4Du7A6Wxl8",
	"TKxUBftAXMu9jzakHhANC3EgOLyWxGlKVz4xXybVGNuYKkhHePUzCC30PBdPfA9VwAtxLEqsUL13Xxz8",
	"p4/A9dvCYz0UHFp5RthqaAnu1wp33ZIPvhRVw859BRCJ5goQpVYU0H3RPBu1XESXxKEoG700Vu0/Vqlg",
	"nw3zIhueaFXfNJHqP+bv9np63PSQMeTrj5mpt+To1ojGUuwq0FVuQSPomnP8gFLMeb5osEcsvHL1xbdG",
	"0VI6Es5AjYPrPLYgnU8IdK2CU4nbNasD3FfpKusUi6GjbCvBx/fIWGjAhCYppMf58KmkFFMKsqFFZStn",
	"qjzDrJ3W0LVJyy91qNGDV079Fg+eVr0hakIbCkcGYmPzSaWAW220hTM+BgyI+ZANqVvTEwiOhmHa8V+n",
	"eK+bv1AmtO3xEpFlkSXAJI6XqWpbIErhDDFZfoKAi6AFJk/AQ9+8tkfaDwSbSHW04UmtDsi/qJR0c+Kg",
	"seMvJgXMC3CRiZeYK3xZHyD6GCUsyUqgSOdUDITkKoN9tqIjVMPBMZEdGfVqCjGRsuyT1GoKbbqiUArM",
	"W4KWBeBbPcZ/z5/AI6QJiwuILGP/ytbGFb/L8dGGA5fA7k1KECb0VcLi2mrMIlOx9Eso04mlFB5m0YVJ",
	"D7dKymx/liFj2v6ssPumNUrhtaigReJra06LJI6ivryfeZSr5IX72RyjdkaArAntzOFCqzTN4ldlDLHr",
	"MToxFv91kUlcK//5nkCKxkorArdPQoqAUPKvbN70qUcW4ylGtkXHC7hcsg8rw7zhzQBvBoJWtAPeQAew",
	"dw9iB9j4Tx+zj+69vwTQsYCDhAFggsADtLEF/vvm44dOGUoodp5ND/n3TDZC/cTnHG4xrKMDTqwtD4gU",
	"OnBM/YlYTD7vxT3hgidl00yoQ4JbtsptQZc7GLG1ZRreeRvA2oAY30sftnwIVa3qQTcQ+lQUMGXJzbQi",
	"VwzpdAvBtWtYLV3C/rkHipOVY6kKvTzQtYxH4t7TJTS3IHal8CKeSTreqthhEmdq+8gxhehb4FTlmIh6",
	"xG0UiLnyG1szCFtk+UYsiMudMdFiabM9Z1IEQj0gGoOwMSPyWUzpdqCcj7YpeFXFXX5e5chOiFqidQ4K",
	"hSpIRo65q1N9cTwcIg+k2V6oUW/eRLItEeoJsBotw/Ud1oa7TT4gyt28hURkEdNfIMcL/3bRkmRYIUqj",
	"1adslAKPc+QEEpkzixbfAnjKRC0Ghk7VVykNiqroEZ1gORQJW/HzzsMQlywn5Nt4CZfc5jVbR2VTdOXZ",
	"Rdva1Qze4imxLeRuZYLNY5a485CuiVorMKxHe8rzPYWEZ4a9uT8ZY0r9AoSaECtDgOCdAf+u2A0jARR7",
	"xH1qms7Le6t60GJP5Q5Z2mEJUj8jZGajsQlt5FjQHXNfuwKewfOQYyGVS9XVAmJbuLlGjVorYS/Z+k4T",
	"OuOZj6hHx9h5wB4aE28eqFdX4wmk1gti4enTOHLBzG1MUTBu8IO6gwWf6Nh3PGyPFwh5SkmTK9HgEwW8",
	"HQjbtYwF/IYXDPyDXstYYEf80Y12HKiAyyjpVlxGVWiNvpm2b6HxI0L3KAjKWt1SsL6x5btQPeF70QKE",
	"LQB2wJS4C+gBG98j8KIH5sR3X7TAi0EXLLDje4i+2EBsCEWOFYT1KF31HAtAByCGX5GbXohi7JHD0ye2",
	"bm+OFqEORSBDSzVZnlObOO/Ys6wSTVVep4zbvkBjMs3BLSzUqEEDCRK//HLx/r2RNeZfxIlWRrkTh+Mh",
	"14GB6yrXjr7DDgL/FpF5lwvkYhM64AYuCDRaxntsPcIncE1tyJmuX+AjxJi1tCG9Zy0+QRNPsQn4El9+",
	"uQF3frfbPwVvoAMt+MpoGbf4D1/471y6+C/C//Vmjuc+nPt8DvgX9GzIcPk98YVOJnu0N8jxXGiDYKnS",
	"L9l9fvahBW34B3T5fOgbNgl4g7k70nvGa7gu15DcsD155hw98tW8JjPCtYhXkLJjy5nh2rEwdCB4yZqy",
	"H97hBev5/3zMg0wu2Qa96Jik7UAXmpBRxp8RcWfII49s6ncQfIJ/seP1kesR8BmbhC/Q8TCcsX9+QI9T",
	"4jtWAJjXLqTYxmzO1z5yCAWX2OUU92cXISdoxTf7gC1EBGzb4brYEv8iosMbuETgN+RaCFzzgKQ3kMKJ",
	"DR1+2m/9iY3ZEq8s7Ex8l8eGv8N0wonRO+JYREDScckDX8+X2zcctdgZWpBx6a+RPXOhhfg/XTHca+Q6",
	"Yh8epjZ84DtxfUqRTfmmLLgUSPqGLJEzhzMeHfXuD39i/yHQ6z20XK5C+QRdzDp9cuHMZ7N8JlzhdgNd",
	"+Ad64Cd5T5Z/8N88Yt7Pic3W9RtGDh/p39Cl8JH9A1EPRCg3DTDuf+HMRRP2D9/F5pzDd44csU5zDt1g",
	"oRC7hF8aF7psrl+QTbFzz+7PfyPXp9DmQsuv0MYOdtiRsL+e8ANfO/KIyw/wM56x/92QKf/zFto2dhy+",
	"XtvBPKbqNZzNLd79mnrQmfg2G8l/hNjjkHa4H917Qk0etvaBrWyC+dhP0Jrzc+iAT8hDLmVAZYMTe0aC",
	"Nd2iucuvxOXEB2/nkHd9De99NqhPTW4juYELccFuJ9jGlDX5D3LRA+/4KxRrurqHHnIF5vDV2nABJ2Lj",
	"7CrMMd8hnd8Lgv1mzkDCfvyV2PdCqf/eX0z4Tx/QI3iLbN7nxsXgv+ETfISuhRy09PlSfoXefAEdy+ck",
	"awH5lb9kR8RxeQ45Dfvi+os/+WlAZ0Y4/r6GzuyeC5K/QIdwiMF76PL5f3UhdcgTdPmhfiAPhOIJFn+9",
	"RvgP8ey/mRNn9qf49y/EmYFfCf/3tXvve7ztrz60IXjnL5a+yyCOXI9DAjszuCQcY24hXiI2+xcbQmcC",
	"oQdZ049ULPwGLpeE49gNIvx8b8n9E/v7PzCc5dJCNsT8sr2F7qO4bC6mE+ggjqTOBLn8sH72+e38hUwg",
	"dwd9j+wJ8V3e7BNxPfCeUYgJp5RPlsNJ5m82tPADoR4/q/dwBi0ObwaaN9BGFnGwQF6bLIgTUJQbF1kO",
	"uif200Ks0TfvAxL1E/6DQxsuzDn07sW9dukc2nbQ+d+I4f/M43B6M4feHC6CTx/8e/8FtMlUHI54w27J",
	"PbKhz5t8LWMaljlomXdVcIGrb7eCs5J90+V3vZgVt4hJty1RWy5+OFBpGrkLTCkmjoJN/MS2LbWIbDhN",
	"qHvYma8lj6fhv0VNYFmxMETrfDfOIgkm5GALZJjDiybPlSPCXa8nSYQkpkLQdUlyEx9zblBjHE82xpYy",
	"i0W2OJ/Ib1O9exiaWbFbIkNN9e5LFz9AL1NM5TFe1UcNc8WMM7AwF5Uif6eauBS5clVVO4Xzboiq/IFd",
	"WEa5F3gc8ih/LvJnZDUIY/pZwxdUaAc6h+M4UEg4hdqvKFrY8rmZIAOGFhsBekjZNYBFgDWZesenJU97",
	"wHZrYbq04RN3Z+gYrY2T2DgcNWs1ooX6Vc/N7hF+bWorgQU329UlaADukTobhzBXIbfwIoQNiy9CXmYS",
	"8a2p08mjVzGdWENRXhxXLgMotrJLd6KIlJXymNHErCFith7pEIKLAH6BgxFvpAnQgROg8PLu3xtYSBpr",
	"OqmtQRzT1yMml4pjzCGbTJyDbhkecEP0ZL9uJMNwlI38e4FhMojUGIbgIjdNTzNb2BCeR6IN4opQAaFi",
	"DE6hfROYfIQv1AHdhwTAt0t5s2ltEXIusOkSSqbeWOTJLKW/y/ZcD1VYmSFwB6ixE58KNHaiUUUtS8bh",
	"F6vuguMNp82Br0NEwG+hdSDAoaUylE4iFFxn3BQ7uq+OcNKplgiolE42B1KhotAhjyU1rUlv/VWIxd+b",
	"AtihCpqh1rLI3rBXT2EegqqQade6XDonrmf63ph6xH0qUIHwpCMwJ2dx3KCp894YGuVrLPjpRHoL8PL6",
	"5uPotNsLXLle5WZlDrFg4s+MlmHOhXvAFEHPd9UsSJ4KRKwkV3tKst/GUFWwD7chgXmN3IP4cFoJZC52",
	"lI8WWzVcax8egMI7wn2/i8iseDAFmSiQW2jotlzl+U4ccekHPFpPcptlo6w8F9k2GZuwKNp1H2kfTxWU",
	"lR4Yutbe4Bc73vXobyblzdcgNyaQhPkDVlfOvuwDuZUwvSqt5eCrRmcFagbnknP/HtEEfSsn3y4hpY8k",
	"C+FDoS9qdRRybh5AE0enBilZYjP/uESTQqjyVjlgDPI9jj1s3qNiAWmRk2GbDQCCNmq72d69r2lGb+mS",
	"iXAPlmoK/OkjGtK+LKX/nmn18pQsAaCCNhmy+ozmdmYNKkv5SVQr5hOCkNMSWpm/CFmUI0U8n5ZI4xCI",
	"0uEiHcJdbm1i8ipJpk18NbmNgt3z7HFRnIxPEcDTWGEC82xzmlCmMEaC687opKSD2ZMMUfKKSuhrokS1",
	"BZmiksOqUAtnrzP8mj9aHHUXH35m3rZ/z5GLVgYDmIKoc2slcdiYcZcS/R4HZcd4tb/UJ16FzFd+klWl",
	"6W/isuTMo24gzSY1UGF1BkRjHfqcPDq1Dk70PPxTU89ZqjZcybxnBZdh0+nPxB0NVhdCWGoiXb+KSdKk",
	"jTSYK00+vjWScBVAYeXZkPXlx5lATQYnWapTC5nEFgllVnF8jr4B/ll1xOGAmUxP/XcuMU2WDioGfKCN",
	"MiXDhuoRqf8krWw1HnTtq51ZaoUt6kEut1Lq8FMoIsZuBUDeDF0QU++GPIT73gyVyEHhPGIRdHs2NKOZ",
	"FIzPAMqlkzXKy2j68I/gBS57zqli4RnvYqHItAuxTl76xtL/JgetmQS4YJA9SAUsB8k19ooVVnordcMK",
	"Djd9wRIF7Y7xtZJB2QShPCYolqaSrktcmnFTxMecu2ISC5WiohbyAgVpYdM4KiHbvFXOfhWMVIziKuVk",
	"Il720B6Q5OJLPCGK0OK8+piUEhOzXYFH7M1Fdeew5GKx0qrce5Xew+qzxzNNCdV7dv6zdEHJeJnZAcNF",
	"G1j6Exub40LIiHYbAVC557nwzPbggU4Gojf2RCePpj55LzziNIGXO+AjTeafhGkTb/URgrPskz1DXpjA",
	"0iSLBfZoySJXUr6ElTpXwYBxwkqeqJ6qql1NXOiY8wyXJfFNcY5ZE1TLBwGpl5Mx8RfyCKbQBRNo3jN6",
	"P0WeOQfBIYGXcda+F70gX2KQPNGCT5T/EyyI483Zv5Fndl7taUHwrMwXydMQSB60BXixhCZ7sSdPQPJo",
	"qFf2aBUFS1RCCFEjCcQcDLfhhjGcDbhVDFdOoDH8cDFcQsGNY/jStymi9VP+qM5Cal/7PBSelxpty6Gt",
	"i6aVcxE1h+iipnDFBWbeDoG+ZXy8iy7D3POWY9PGhWFZ6kTjv9zefuI5xpWOVCKJtu/ayt3OEbSCnNbJ",
	"Qf/75uMHsIBLdu58gqClco4F8ubEyliZ+ChXRf6Z123+9PGG/+8L++/bq3dXt1dGy/j46fb644cbtWdh",
	"dCwFa/3TR+4T4M15RtHOvlJ53zQRssbEGWflouD7CZJRmMRC5V0NJaxSnqYaJVYyuaVX+DWnNKtCtDHv",
	"HfJoI2tWIHTHDctq/dfXK3nILBpANBIjrK9EYvyTpEgC129fUPYcCB1NqKGRSFp9FY0y3d3qan6Sm21z",
	"PYn8eavruEVwsc3pE3n46M6hkxUb947/nj0p7QA0uwB/3xlLG3qMZ7gzLu4MQr/dGS1wZzwgl2Li3BkX",
	"4M7odfrnd8b3bMyNL3Dge1ZwGWIPtTK3gburPRQMGfu0lVICJpmFVfDdBBzCFkGXSp6oWoNoAK7f5i6h",
	"jCHALQIJb1NqsLycjsHHUCdUZZF5lczYJ8WYW1fKRjXKKmhlIwIBOT0cMwTZvY9zFCAqVgWwqDJVCJXs",
	"KlbsSxomqdFDBoJHeLSMKbFt8jj2l+tEe5SbcY55Nv8FsrC/4BEIj8pJSyTukg+PF+hQTkiWPIk/dsZL",
	"l8xcRKkR1py2uaupRRx1dHOd+5RaxNbvQZyhdd2b0JyZQnkP66u3yx59VvFteRnHabpQgrsJC8YzgXRZ",
	"q0a0joR/HEV2IH+snLn4hCI/xnwNCidLQQ8gegBsgSlxg595NN7Ctz0cTMqfCqpyC06jblkf36ItVq2N",
	"EPr/qk6ixhHvgMhlHMT6tyD7iMtfCPUQR04FM1CjUYL4zLGiMsWMKu1tllmPhi3P4KXKvMVjEdP0Xbdg",
	"MbwRcky0FeawZTxgiifYzuTW4+8l+XUsqrnZ7KdvwT8L8SA8I/lIanKoQrfdPNkWW9gAr5KJL5nXj/c4",
	"choswNooyT0miFamn1OErAk071Ul2YnztCAqWfuaCv+hoC+Imv5LWeZyXWIsr3GVckWrSIMj6qZSUMLs",
	"QqriW95wARyHrUGr3+q1uvEJM6o421AAXbqeLgxqfEkLiWFUk4qGY+2AkEbb2MDNywN15uULOx05RY1A",
	"3ChRPUroVqaujd+qDRx3lVM+8qsjJ1WoVvgw+LiCymzEIKPwy4+O/QTwFISc9KsmLN+HYu2bk8cxtJHr",
	"0XEYxaAoxz0nj0C0Wol1WEVnuXwaGz7lzTwOXYsy5gkMkDR2QcoGbvak3BZeOJdotd5M4XqL5kodw3qT",
	"ynmWFHMJfheErdaaIqm0zcCNWHSlADt8ss1MPkO8+rF62kfi3k/teL8bndmD9D5rYv5tw9O5yuxeYjr2",
	"bVObLGvxRhaAZW3oJSyF2WsMHzvLhVM2IY9ooowQfd2AMVx5HhtV+QROXqvr8V07TSVzV7NJE7ucG6l5",
	"mUN+0DfAmOaDMJM1lVbxfBioZsWPowZ0ZTGkyaM/YAmk+rkSG+1HMsQIU/mSNpY3Iz1szdDc4mHqeNSU",
	"3eoexP0mMGYH7x4/qg3QwSz4ZVJA1uHI3zgO0kYft6OBZi2CK8or7I97ZuAqWUiGanpLBsNXdZMMDymj",
	"VkbGLNt3zxXz1KedPNxlNwRUIN4G7l3WYefeu0DuP35SyiHcOD09MuBWpqxCISIq+h2AT02Q/4b6EzbU",
	"RBnG+IG3AdC2Q3UP2x0Fcqe1NFHGZpRO4SZjzHhAVOjfub2Xt8JTzJ3SF8TBHnHFl1Dxzt3Ym+rEro/l",
	"28EAsvP8A3Lx9El0CIpYZCjLZGzLDOiRgAawxWN6mEAtEo09FMXypInbpl+ycAUSttR811au3g7et9Xr",
	"vxN/mJVlHPmDtwr6Rh++5wD1yi+h5+LZDLmZgfixNyxxrCjvdripy3fvjJZx+eE/Rsv48PHDlZL8rQ4x",
	"VgRLx3legsGZiMFTu4ST3fBg+i8f2P9X5/mqnikV+7ylWVIZaMOxrm+Sp9MqGF059kp6wo2Ozm2vGx81",
	"JUNv7+AT0c4b30a6UtRGBk37JGzpZFJuCluaJcyxuOlDCmOPNz9wgt3d1qlEbPFm1x7rjbe08KTf/CYX",
	"D+0xdqDp4Ydg8OIdXN8ULVzEbclMYpRr9xtkHDl7NRHl9nPiLrj7fszQlykck3q1kXq2AKmMONUGe6el",
	"N86QXJGS8oUcgpsta+TLF5mLjsCJ1bmAJDFwJRlQwBdksTHqhYhOedF5lyKIBnhz6IGgPeeoQi+SjqpS",
	"USBpyCWAAnnDCHwRpL+DayL/Ilgu6YcwtUH8k5ydWfo5lU5DHiJwOIp/SrtYSUtEcJH4O/Q3iX/iihFI",
	"KZ6trCHI20MWC+iUwYC0FlIGZT4zGAD7kBIgx6oowR5v2hYYDLuuLTBrmH0y17EvO5DG+YI2oYvMOOJM",
	"SYxf6eMWuTlIG5WyjwaaVUVpOjbn0E3qNEoO8IA9tJKgbUyWdIYcjArq86rSuaW8F9mwIGgIrt+WyiAY",
	"8CJbSQ6nSuJWdArFkI2WXOWQl3CGXMv3nsrlnUXUhLYoXbgkNjafVrPPxstYTTe7JWCtrmoLUNsbjIhA",
	"pkaJ0qAvl2iYd/Ep42pXQR19DDzdc2C+FZCszN9oTkfpaHZePDgDyMVUY7VhMeY8YNMjLiNNz5s2x+ew",
	"JnWO+KTkdqbYFcyoorxxxgcHffNKySpLFz2Uq1KD7GmJ9KGsVStYcTB6sJpgtV9zshGOs/OKlmLRrFDJ",
	"8klqNYU2RWlqJNXeXSBK4Qypczg/QprkxyL9xb9KZa/JuMW1XFo3ya05KIi02vpJh8Ol9B/RACDg4gtT",
	"ViLHyhAQP/k2RQA5FhsLeZiLfiK/tnHBFoDawY9NZXTlqaI3lDA0GiPdJXnO90jhZPYritwrPDirUK71",
	"NzmNk7JrCtPY9OFoX6vnu6+a2XP9Axa5wTNUF/xbuH1+T8BLNLsAfzEkpPevJOVczIa1jIhJbxniTWBP",
	"QotfAYvMuPp1Yp8bLSMYh91mCh2G/n9gF2Z5TWQ6pgjE5y3WR/0q7tjh8ZdLR/i1BB0UAZ3NE0ET+rU1",
	"AhWIYA2NnljZxjR54XAl9GZl4MWH2wW85KKsewm2ZNXYQuiJ6vfF4CsoRlu/HLgq4V8MjkyO/d9z5KKV",
	"wQCmQCrcv5qggbgL2Zwg8WHpT3Hs+MonOcIs/U2w5jnzqBtIs0kNVAS58GGZk0en1sGJnod/ahnJFCpb",
	"bMTVKEWNqpVe3iZRCutzb5s2Reao1ds+R98A/1yxfnh9GrIyaExKyuYKLbVGZT7QqghSvhT6pvEkt0L3",
	"tvCjRKnaQyjYXZdRqVZueNMQLyiqe1Aw1zV2oxq7K/LoQRbZrXulKlcE3fStakxNuM1qRqHHU76biGhV",
	"OiuTcHgYh/yYGHgKfduLdpic6A3vAKATqziJA4Q6HlLwiGwbvAzyVc1ESTOAHLYGKyd1leRRpasuPdeq",
	"S9nLuA5R7fZpudXaPdXKosilUIS7ZOw/WdJx8jnUeSr3RD4RHzxCx2M7FT3WgqQuLrVucalKjnrG1stT",
	"rR8yuSl34/0apqbz816X+6qQk6xkIrKv+21aLVdcbA+01bre2POpN7aGda5mzaStXauyJZM2rV+Rp816",
	"sUUjILT6U+KGioyV2iuxjvQgKjtFUwq1Ld8Z+ibGTmya1q7rlD7fSqhZu07N1rA0I6XGhpFykxk29qlg",
	"TCXgl40g3xqss0tqbFoltbEKHYdYYaOwPEYlrKlQLmBriKNOJ7lPrGHT2SW3lxayrsK7ai68rSJLRiq8",
	"fcKYI86Op0ptVxmFymb+2hoelUj8tcdcSlYesDw7R7m8YMXmDJ3qay9Tfa3PQdbJR7S1+6mOQD8ob4Hd",
	"BKSv/cKXDJ/dNOSXNnyaELL9d32fjKehRDjOVBCHLbimOPQ9D4+qBE5p8+wmgy42bfGihSav7a2iSrBD",
	"BYQray6RxtyUuSMccofU64hEk50KC4nz3AU8JU9xDy2WNvSa0FEE/PuKbVl8iBXQ4ZLA4xw5ALEZnBmA",
	"yYItxax8OYZDKt4XHcXG2A7VQe8C3jycS0eC6kjQHUSCumi6yd25aFp3d8quzyfOlc8l4lzvR/RVSS+e",
	"5xCcykfcAV2W0ooesCag0Id/RxEDM+zN/cnYRTyyibhP44kLHXOu3tjP2PvFn4C4NRCt5VXwSxuvQfh0",
	"LiAu5Y64upxsBmV1MZxlKVqKS4hnP83//HHx1K4AlRn2bFjloGy45YNKLSf3oFKL2eZBleMo4wH3Kfok",
	"SrOW5dfyMWgQzgawlXOOpcw/UdKxrDk/sRZvfe9pg5OuHWVTYbLw9bfQkjGtjpmh9rgJy0yHDXkURiV6",
	"VlcECRO47uJ1i5NbH/TzFmxjgwQiGlGBUfGhqXy0AtXZ6khRJKyLPWxyj5xyhtP6iMXn3kmAmGTM2b5D",
	"DvdepQi65nyMnBl20Bg7FvqmkHVZUyCaAtGUU3PsmLZvIfBEfDckPAnrmBN2chH1bY92SoZe1cDmeNpy",
	"DBsPBVMxavwD+BG8xZT9s/zososSIR5yxzmx7ok4d9G8A65mHXBn/Ffvp/5Pw96dUWYjcwStCjOJ5tFM",
	"3e5p76d+uZkEfFfneA/vVw4JQNNElGJ+fqFEyLuXslXPuVs1l7HUtdyDjxUHG9uQemMLPtHcYQF5QC74",
	"BnjDiAANuq3Tbuu8+zVz0sjZq7w6PYlXm9KoS1RkBzTMQ3A/Ywb4wjb22AWjbejRCfOPNg2sMG1/A7yM",
	"SH+/mlYmWAEIWnTKgKgO+KOtVnseVimKQtgvX9ktYUkt300ZoFq+ezZKJ8iRdEQVk6wQ10IueJxjJtxJ",
	"IwE6J75tAdd3hK6DeHPWMPjMGQJFFqclgtw32n0aW76I3l6d9zNvFk/F24OwfSk8CmYieXmPgmmIAx4R",
	"umePglzj4sZoGe+NlnFrtIx/Gy3js9EyfjJaxpdSpT5SWtbyAE1boyv0LBVPmYcJqzXHiIMq5ZhPDvC9",
	"ld9Pit2p3NVGbuX5uNa0aifqQceCNnFWe3793jIeIVaomv8NsSek5RBrwQRNiYsA+oZM38POrLM97+Do",
	"Eu7u2Tm2gCh1uT0F1Q0q58TNWmuUa9qXMKx0qYbVw6gXKlWALbvE30YcR6rlN4vew6RvhwS0ZM7zcsQb",
	"WtY4QYilQQqpsGVJ1bIrdBK5+SaE3C+ge1+5O2PRq3ci46i8U6W+rjnHDyiZYp1WG4Irx8dB2t2xBel8",
	"QqBrVRzF90hQiUqcurIQSeVR1JU2Kg+TkXu/aBwT2vZ4iciyIhYFeYUgdj32go7Ff11kEteqNRCFDhxT",
	"fyIS7dcdoG5vkzhT20eOKeBRZ4gQuxziochXq+oYLllOyLfxEi45n1NvJYHhEFPq1+tPyMxGYxPayLGg",
	"G9QkrjKQqKy1gYGSK7KISeufihhjgRBj/+qMEPPZ1fv+gV1YHyK89xqXgxFd6NafP+gfrqD2OAtsuoSS",
	"qTcWlf/WAIZDRF2fmtgQCogOeVwLrnROXM/0vTHlhud1RqgLXM9Ftk3GJqxHeR/RBH1bBxJB7vqxh817",
	"VOsQ/yJkUWsFM+SF1M4kiwX2aJ3uNqzfXXgCVeo297zl2LRxVYyrVA+t7mD1uJEypaTqjlGTseGEIToa",
	"4ow5pyOK0FnIrTFYfDSbGE3a1rrDubgiJnGTEZ3XI3wusjCtg78ucuACrYEhru+E1V7Hc+SSe79Sd4oc",
	"S3jSVO8mFh1UBqrRfVENpNSBSzonXsRUzly4nNcbYubCKWONI6mn3jA2IffI5f+rNwAT711kY7PGZrxH",
	"xF6WR+x5yK0FhoAjXV9eCQeqJ26EjHFdDj3oX+vipvvGgQx1hqnJ0Aa9azOkQf+12bdwnPrsW3qEuriQ",
	"oodkic1awwjbdI2edfnHoHse+/dVFfEUfq2kodxB4FMlDmJFKSmnsgh386lntIxPffafAfvPkC3V90hm",
	"doqVioNFa1KPhIIVNlaKsunil9+zwFeaZ1tZYrp2bLjypo5QqkKY5UXaWJ3LwqNUop3vzpBjJi5A4GAo",
	"7J+ZmL8D7EmWrBSnm0kTyrPumeVzMwrnqpBOUTp317iZjSS5R7MvwF6FamayBaGgKEjJz9pkVNDZfkaD",
	"/Q1cbxmCQ8g/PRtSD4iGJT31WjJUEpN8zYHt2MY0J6tRBvbVKfkfnUj9av95h7pGmH/pGv+KoNOwEnG5",
	"MxDNv5djvsLRc8EnyEjtqOTnArnSzG1+hoZ16V5VP8LdpGPYAoUS89QiUPxVbZxKCQSoj/CFR7xuLotD",
	"JlocpE1SruOBZmlCVio1yfr07HBzkWyeyvHFVaRyCjA1SOxUSLLGI68arsxlqZfd5RApoArcjRDC5wHp",
	"0tRxxTa4csqSommV2AQfeSpONpRRWlHJWxduOJxcufY8K+Wqvk6dT/Y6kXRVZjtVW8muI7i+GiKIM4/k",
	"6pwaI887MWz5kAs15qXQpsStixMIJoDUMsKsswFoVperxltl8qy1WZDNZcuSCuAWJFThjrNhXgVF9qFy",
	"RFmu4/u91LOlU1wdfoqrvLQWG0KsUFVfCqm2m/hq/XxUm+fTw0VVZNV5mFZzvDk/jTVYtKzTrJu06xDZ",
	"bQ6yRvjrg4VWaZZZFaW4at7nrRLRaOHKL9+9SwaaKavYJfuP+Ysnj1I9Wi09ZEzv6o8ZHoMSOnk98gLl",
	"LkV0GfDm0Isi9uQIKzkOONiVoF8lYn/TCll5AypwZ7ozrjJwwvVQzZqK0IY8o71oEdgBVVHg3orv6x5Y",
	"deXjybDy2+r5EuZu1xaSgDhANRwKvENX4SEaNeYFoVqhGiEzRLzSeUcCGau5svZxneRxpjrgF/IIHiFN",
	"lVkKpMF/lYqm3tcKrQWOxavnvFyOM7CpJSfk2MdbTvFf6Zw2jgVdq937HyHfir/6/1PeKW31+IrBF55S",
	"Kz7MYG0qAGW4bq8c14RYGSw47wz491J1qJBI6JRViCr8XEoyENvIkAzEx7JHHR+EGjykID7dRSZe4owy",
	"SvkPKTHivbTESWeCKttdPtMjKroMK05RYrAMj6n44zhM9bPqL7Wbi7ayst3MvgdMxCpOZPipfvMK1NDo",
	"m9cpNsKzcbJxc0GL+DzHy6xNdvP+JlyNUTnFlTL9z5w4aCySCOQyzfHdBbwPCBIPtGrqScPDKKbVySW2",
	"IvNfcE7qk87wUC2ferNpFxSdmVpnptaZqTecmTqt59WJqXVi6rKp0nKQbw8cWsIDa0xPnmvrKKV7zTnQ",
	"+knAD1BbHoKuCX35oUOtrAolO3f7vnN8x52svTyxzV71XlDbIC1ng+Q2OJB1bm72ma6THP8gSW4Av2Zo",
	"7uGDrjTdLc4UoTjpMP9dwxGtnovN8Z8+ctMBi4UajCVPMJ+ZsRg7QJQRAy96YIEd30MvWuDFoMtzzfN/",
	"ggVxvDn7N/LMTkYi5r00walBXIxrEpjTB5iLSfkJQ/YFm/YeWivHWAliuRDKysWiYVMSNtIBbg4qeQlu",
	"FF7XETF8Uu49aJDewuWnt1f/Y7SMy89Xl0bLeH35mf/35urdNXfoeH397t3rj5ef37J/f3n3jvt3XP12",
	"9eF2/NPVFfv1py8fPly9M1rGL1eXt+8vP7F/Xd/cfvz58+V7o2UE43y65u4hby5vb6/YFDe3l29+vXo7",
	"/uXj5+v//fjh9vLdWMx9e/n6HWv629Xn2+s3wc9fD5G8BkhRkromAJgElxJLMtOYr+w7y+eG4sXSbsbp",
	"JoBRYKPdvNNNbjmm/a2ftBMBVddf0vWXjqv+0n4khpBDOZrTKkiEbw3pNP901ytbdYjaBQmUjSgYjgiK",
	"ZRUN6upju3gRmyg3thdKT15moTHSxA+iPjZnnWPdgmwHSIY4vJqgP4cKqtK0pjDda14UczlPSuUc6wUs",
	"l84xu+q3CikaK6P8GLliX4EIwlu1mUmVe+h4AZdL9mFlmDdyyaWgFe2AN9ABJnE8iB1g4z99zD669/6S",
	"lypykHBcmCDwAG1sgf+++fihZPk3vucsZwnxGcR4k4QWO7WcwnpceMlyp1PCOg8wxSCPgJNYm7zJPGRQ",
	"5wlWBZcsbaSu0bWheIYsaPCESVmwyDnNaGf5QRAZE4Yse3E+pTFfm3RAOcdtQp+ivSySKla2MbYlHK5G",
	"kAXv2nCERQgeiVrtJ5TkBZYAVhS2VwCt5LAVa4CmC5GpR5PLfIYQydQG/nuOXLQyGMAURJ1bK1E54ylx",
	"F4ZUjG+BRcoI4qx8kiKK0p/k3Cjpb0LxmDOPuoE0m9RARZYKXdPm5NGpdXCi5+GfmnrOclVXS7ma5F+G",
	"UhRMZnp2TsiC6pANVHrOVIXO0bekOlS1vo3SnZVBY/KTkXaCjfggp54otcaq6BAMtBuskPOcNIYNW6np",
	"Le9kYzxLctAagE5krtkFgKe+Ywr4KF0dDwrEyb3sW8RLOYxK76FmlIJHgkCFTYYprO++XxFCZW6QPCTe",
	"kRCQWfymQjgv7xyG86pCsLcoTIuFZ0nTYmXVxWn5VKoK1GLOchJ1tPqyInVxEc9Vimf94VOPEwq1UfIt",
	"fBK3jjcEQek/MOGeFPAbXrCjGfRaxgI74o+ugtGAnoccC6Hsi02mIG7UquBvaEJnPPMR9eg4qEtHvHng",
	"YKHwC4hbL4jFCU6YjTC3MUXBuMEP6g6FFKRUakMBtiysFUNcv1X1DAszZrtfvg/gFxXbj/0xbXyPwIse",
	"mBPfDVwyhX8mfZHngxnnfAxKRquPxkVLG5ponMAEhakcOdZYoLMypMmxAHSCFAHBCxCNCMQTwrbnzdEi",
	"4mUeElyMPFleJjBxznFernIkIq8ubwatWKAxmYY1NRVrweIRDW9eDLBffrl4/76QikTYlEM4GsteAs17",
	"hzzayJoV2OvihmUZWxM6JrLtIgunaBVaOUuwax5PFp07qGhUcsRC3owhn8Sfgeu3LxR8j5QJsz7jk2Bb",
	"slfzk9xsm+vhZqzsddwiuNjm9DEpe1qi7GVEiWpvn5Zom+uJc2smF/GO/549KRXxxn/fGUsbeoxa3BkX",
	"dwah3+6MFrgzHpBLMXHujAtwZ/Q6/fM743uZdKSBmqrgNsTKrHL2J5GWKHfIWP1VJUA2E4BBZOw2QRdF",
	"0WQ94zdhBNn129wlFO/Wg24RSHibTefGrLLIss5o0piHk5MqXa0TcmI5Zsizl5aTKCWYWCjAuZUOYiDe",
	"YycDmdmXgtEjY76oVjEl3HXYX6od0KWKjKqcTuJryRlLR19GSb0VqC8cwBLlbxjrqZyQLJGzkmc7Yk+M",
	"lmERRy041rl+qUWscW1kxN3xFUroiUXBjib09mFpkEA1vZLmXBUIHBQTET0Athh3HvzMXTMWvu3hYA/8",
	"olCVJj79fuRo5qMphYqeTeehb2LsQFMPAnvLRjP9ZQBlx5gSie9bRYyMkgV51zIldkq5vjHFE2xnkrf4",
	"e0kChx1Rl9CIixiqYVIe1HzxO4bsFCFrAs377QulDnGeFkRF+69FEs1wKSBq+i+lQkFe8ipgo1HSYI26",
	"qfhjmKEWmCMgvuUNFwB22Bq0+q1eq/t1NVKgEl6EQ+8YNWRr99ZNO9CnObLEG/a5QJJIVpSqL1Qcivw1",
	"J49jaCPXo+Mwq1RGtItotZJ7alUMSEfTpKwjY7xYQvYoZswTplsBYbuVS5MAUcakwsu2aC7Rar2ZwvUW",
	"zZU6hvUmlRW4irnEmwDCVmtNkWQ1M3AjfuwowI7wh97I5DPkYD9r2jDIMtzvRmcWpffUE/NvG57OhdjO",
	"mo5929Qmy+ogkAVgWa1GCWEse43hy2W5cBpVC6LzrLz0FdUTyvOoxWhJL9kevKlhGbQ8i6HUThnC8CVZ",
	"ki2seTiHHvdSp4GbehBQo0zvEQO/VHHZLDutYmuVzbWRtB9YbGvIU+nVuMRG+60X4ivcmC9RetjNaD3K",
	"rbHSXWRD7vgSsiVk1HneJwQpW/q5ph4vGL6qAm8jhaYrY0zZcrrbRBs5qvbwFCKB5xf1J2yoMLl2VMc3",
	"mD850QfeB0DbloNzKZAHKRWaX53PCPfxvEs/Zh6XyNoh3nn28CZ8MOrKvpVu5cpt2PHtzHfAWvWIqOqU",
	"UMflYMM+Axsy+W/AdJ/p7BdeX8y1DFmh4BlOAJvT2ZR5Mx+CwugqL6qEtqaqKXxj9uyKVukK4t56JuoI",
	"yrHf1kZEiH2QG8IlHrAje3wsgtxuWsIIhl2HpWMfdvNe/IFdWMbVGlKKZ44oVyPqCykPSDRDFmANX1Dh",
	"M9k5nMD0QvwSrtTS78rNlXMBV3bNcr+KO4oW6hSl5UQfbPFjsjBd2lDUkWDDbbyiuUvYP7MTFwQNwD16",
	"Um7HRUviesgtRLuwYTHalWC9GzqdvBcgvpVruPp3qvj6y7DKIRc2dhB0yxCM3d+k/boMDLlQNt6hfUA7",
	"GbrNIF4OqrFTmBCyfaXUPvlGh64UYR1YRYRA0AL4rh2pvMOjKvHCae9rVS36fXHbpYV+u9tbRZUK9RUQ",
	"rqyZSxqzBisd9t4NFx3OfkRa9Mb02omz2xH4pNwZHlos7eCp3jIUA1Xziu1afIhdLsMlgcc5cgBiMzgz",
	"AJP24GKtczmxVjafhkdRD66KQ90ReHkx+q3DMxgulYE6GgAE+QELA16QY2V4NXxiGwGIcYnQQ0EmYBGX",
	"Z1ywBaB2fnrgjQeEiaPdTLhRNEa6S/KcldLkryh6mzw4UzrAqn2bf5Mzjii7ppBNJHoTo5VJNumi6SZ3",
	"56Jp3d0pu665uzXZp/XRhxLfNbPkKv4tImz88rxEswtwP6Kv1o1yEneRt1j/NlbivYIzq0OSWdcSNDjW",
	"Y2+SDGfW/D0obbIuAaxLAOsSwBssAbyV5Dq6BvBh1wAu85qVr2a6BZkiPAuHPJb0uUgmHVKVKwm/N6UK",
	"PlQTXKhzKMhoU8U7Y//tB3l6exUyru08UKDBlw4395pklf09MKbvuKsAlyO35cuYboPgzonrmb43ppxJ",
	"yndWcM05foDZIJYaNHV/N0bWLB+NrRxbImMLLR9xoRS8vL75ODrt9oLsTa8quxyI8XJcDgQ4skis6F49",
	"210S2lumZdEWWgnMKYOMVRP378OzX4iJXMFfgIVL6Aqv1zzoi0YCCTIxYMNlBxKgKUGpogIC6R2VzX+Y",
	"qFc59sgSmwUYIZpurY5D1sGsrlN9r/gX5XzywYW7CDvknVBeNcdNh9XvbXFIXdxRF3fUxR3LsZqVStlt",
	"g9kUC8gl49iBpocfsPfEQ5+JrzASXMt158MUpz0Gg5w687GLonQerifibULH/mS4TZzn6WvV51JMVmwS",
	"SLdbOTN1AcA9cH1ooh5gGawuWy5tC/jsuci2ydgsLNa/j5KTKI6vrnzGPjWmLoM5JctMmFmwrBBned+1",
	"pL5MeS9f3GussHpYpHJ15ezLPqjQpBtSVdrk4CsnaYYoVFrQDPOCNKA/E7XcVwsahZlJghab0eEqyHS0",
	"1WqM7ipvVCnwsGZkYKkkvuW751QzlBkr6YgqluohroVc8DjH5jwxEqBz4tsWcH1HWJ15uvnos6zykeuH",
	"LRHk6drcp5ys7595s0RqG66aEu07NZLqlj/QtEtthZ6lalTlQcJz8WyGXOmNJQ4qUbU1xqHkAN9b+f2k",
	"rEaVu9rIrTwf9yKp2ol60LGgTZzVnl/jM8tLfHkpEj+KpC5B+wQsOqriakE9ZblqWZAExgiIuvR34Pci",
	"/yIEAemHELHin+SqQ9LPyeC+xBBBmq34p3RiMWmJCC4Sf4dZluKfeD4IEXiXXkOg8wloe5kSbY8QK17q",
	"f0PsCQNuVMJhgqbERQB9Q6bvYWfW2UxelIjy7IRPDmffVSrYGG2JY+WQ8xD942Yx6l/fGC3j8sN/jJbx",
	"4eOHK6Nl3FzdGi3jywf2f2WihT1JQFsFP/YqL2y0qEbc/6sV5Yue36SHvgSDpDwInacSbxW0rHHi3ZEG",
	"KXx0LCvOYVOlk6BmE0LuF9C9r9ydl1+v3Ikk8+iV7sv5+5TWnVYbgntFMakPWmQ2tiCdc3m34ii+R4LX",
	"QZx65Bq11iixt9Nawzxg0yMuW1OlcUxo2+MlIsuKWBQUyimuwF52IF7jmvqTFTtgpQHq9jaJM7V95JgC",
	"HnWGCLHLIR6KonCqjuGS5YR8Gy/hkrN19VaSWfatbP/COmRFA5UuaFZtRRYxaf1TEWOENbZqjKD0TivZ",
	"NyM7RJXea1yOzGDzav3DFdQeZ4FNl1Ay9caCG18DGA7hb2ZdbCj0Oiw7TrYzTdUR6gI3SyVdsvsjmqBv",
	"60DiL+RYiC0dm/eo1iH+Rcii1gpmyAupHRPNsEfrdLdh/e4iEKRSt7nnLcemjatiXFAe0SMpB4RabEjW",
	"YPW4kazRNjFGTcaGE4boaIgz5pyOi+iSOBZyawwWH80mRpO2te5wLq6ISUE25XqEz0UWpnXw10UOXKA1",
	"MMT1nVADM54jl9z7lbrz2pQ8hKJ6N7HoBaK06nsjui+qgZQ6cEnnxIuYypkLl/N6Q8xcOGWscST11BvG",
	"JuQeufx/9QZw0OPYRTY2a2zGe0TsZXnEnofcWmAIONL15ZVwoHriRlFh5pL9a13ckhnDSw5Tk6Etyn5U",
	"sv/a7FuxL3TVEeriQpHXY9lhVh1tSvasyz8G3fPYv6/VNJG7y1uRs4kD8EPes/xcvvhnhhWWHTAI2nTU",
	"PskzmtuZNehU9WZOQjjDM4EDP9ONWsyuzJGWxtBoJDXOcW9Dcw5dL2D6RFaNUhib7ciwWc+DwN6XX46Z",
	"tcnys9GeC9pzYQOeC8FMYvQMS1owDXHAI0L3Fnyisgn7xmgZ742WcWu0jH8bLeOz0TJ+MlrGFyUVqJjn",
	"THtSaE8K7UmxVU+KoG/uS2RD6uVkhd+yM4b8cHM6nng+EzvIe9JLO0sk2mU60srR5rzMrMgbEI6qoOrP",
	"3msi4WKaOmTl8ahXXwPI49CzV+3xkOFgnHJ9sO0SNL0I276rVq+sFebgP30E4oJhRSNn3vVNeqXEruMF",
	"IqLKudq5r3CQovn3csJnOHod1JBlhBoOMRorKmBFWcVBtKTG7+0GQFHlzI/8yjV5tw4YcpWvhdqBb12l",
	"wnY99srJRNpjT3vsaY897bGnPfa0x5722NMee9pjT3vsaY897bGnPfa0x5722NMee9pjT3vsHbDH3mbs",
	"raEaMMs4GWs2g9SW2QrOlOpRHjqpwZPUgzXtr3y05g1xXD25vm44o3TY+g6Xh6zf5yBt1IB2NNAsp/Pn",
	"BnzTd7H3dMOOQpzZBEEXuWPoe7wcCD8k7qPHf4+3xUQr4/t37nswJavH81/gF3YUBMyQg1xGfKADLj9d",
	"g1/R053TBj/8cGmaxHe8H34Ad363O0Dghx/eQwfOEG92j56o/OnncJgP6DEc54cf7pz/4mn1L9gvN0tk",
	"4ik2uRHizvnMa34ATIFPsTMDP/wQtvzhB/CSrZ9e/PjjH5Q4cIk7xJ29AlQe4QKwdUajYwpgsgF3XZiT",
	"RwCB4NEjhzz0p4+oJ7yLXCSKMFEwQWCKPHOOLEBcsCAWnmJktbjbgxiGvbXIjYfhQopItEkoCselnZWV",
	"WSgoOu4RsMAOXuC/EJgQTzgMCrsJw9NwBD4n+wQXDAbsE8MS4LnQoQvG+1lgghgv6AR7E13EAmkH3M4x",
	"BWg6xSZGjslPGZpzjB6C2j3E97g/tUsWmJ++i6AFJ9jG3lMLTG30DYd/EBdYmJrkAblBg9T+AlxmcIy8",
	"KaOPC2RhyAvQg5c//ACXSzuAzo8PjtWBS/x/GIR/+OEVhxb6xl7/GVsQ22+H4c+l782R44VAZdv8HBzT",
	"nfNvxGcVHmeuBX65vf2U7sHTirIPN7ySi+/NicvOn2fPjWB253BcNpcuEkgt/jSJFfxt+q4N2u0QeX6+",
	"ugV3d3dOuy1yu4IXb4jjIcdr3z4t0QXI2uqLVK/LYD0BTr/m9xj85+OXz+3bj79efQjbs9nDS8EuhCiZ",
	"0zHJ4seH3o+hn5lY9I/xqoMfol0ZUaI4I7iADEoPPaNlMMwRxIH/+a1tkxkRdNqLmrNH37UDAsPXQiny",
	"qLwc8cuPrDf/T9s6mZyeoeFZ//QMDqYngymE5wOz1zUHp1N0fgoHvd7J5KRrDSa9s2531B2ZyJyc9IYI",
	"mRM0OTE7y4DakiVixMC4MAadbqfHU2J7c04Xf6QmXvz4hQZ+hTPEWQ329vCDvbaMC+Nn5N2YeCEa8XTa",
	"cIE83uP3vw3Mdv6nj3gicOE0bEyx7XGqGtNr4aomHiel4756JJ4g9ZqneVb0jlLYZnXnpDi/51eeb5U/",
	"x/wI+t3uKtlnPBi/qC4F1CRLQZLY2Y09co+4j/ew21vtGBA7KjyZfSe6RsJDDDuihkowiPR28bNNvFq/",
	"f2VrjQrKGT9zNzYRnfC7cfPm+j17Db+1GRLfwMXSRgJANnRmPGMwsm3wf8AbhodxeT0j434CIO7Oi4zL",
	"E+PNvwS0/3nz8f3V+Ob28/WHn8e/Xb77csVuTv80hqBocf3h9urnq89yEw4lxdcX0Uryb/3nq0/vLt9c",
	"jV9fXX6++jwW959LH8HeP/uTJ/B/wAfo4Qckbz7AT/DCd/GLOyf600Ee17LKv7FbRKn94s65c9jJ/BN8",
	"+Xz98s7Y4QHdGa/YatgKwD/BB+RdXDCC3XHQ40vftTtzQr0WYP9aEtd7JVp2fIrGlLINsEsZ/PiAXDx9",
	"Gi+IhcA/wcclcm5u3l1c8P/8dvX5+qf/jD98/HDFpgtRRZrx4uJn5IXTvoqa/H5nJCB2Z3wF/wQv8sAm",
	"JhD3EfyTk+5OMNrL4P+v7pyl71EQNuuwR3g8IdaTDPMPbCcqmJvEoR4IziyAbgjGO+PV/2UrEG2EByUF",
	"/wR/MzS8MxbImxPrzrgAd+z63Rkt8Ts7Z0ZxxJckIkSNGAhYA8e37fAn6M1Fn4bQJVwvv06UTc13xn5L",
	"AYotKgdOdwbr9/3O+S6dl4v+TIMsOMIWCN23wUsX0VdiWtHLnPvOPTvk37/ysQADbIc4L+84i39nyJ15",
	"41fhqkXXztKn8+DL/+XLepUeCDlWcpx4CL4Ghjzgn+C1P50it2MSx4SeGJGKIUVDYqOOTWYvWfOOR274",
	"4/XylTRrMLWL/uwgx3r56v/KKPkzUSLkEpr3TD5YQOywznjBUAW8vHPuvDtjuvDYYbN/hlQp/BuTHzHx",
	"PWyzHzglYBvk44gNsmaMVF38E+yYTom1uOjPFhiz5XAk+YAeA5b0ZXifGLFqAQfbr6IenV9EEYBLy3q5",
	"gqatIjSNxqHyzEEl7jdcBui8JYy0BC0tNEUux5zXDMpvbELRS/bNY1APBhHH3vmMoHVp2y/D1sEQ04XX",
	"+eRix7Mdju3p3wTTw7HoFe/yXSi6loQq2K9PhCb4rxS3omQ6li55wJQTLwvZiMk9jHmpyGF8+nizDRaD",
	"DZvgMQox8zj4gD16rRlOPa/nmiHddt5r/arqVzX31he/fQFyPuPH73tLvlI//o2t7+JdY4/X6pv4lv8e",
	"vYrXVoZegl3YWBuArTIqiTzVwHD1sRVLFMoBMOEl8aq9sm+v3l3dXm3hnRUDV3tpf/zH2Wts/ePs7XE8",
	"udF29ujtFbj7vF5fgYrbeX8lGOuHWD/EZWhB8YscIeyzFkgLzQGNPbwKnfwMeWu8us1oz/V7qzXTx6OZ",
	"1i+tfmk3/tJqvS+7bOZcofhlP+/FU5tQKNdRJF/evvllG5pkNq5+cPfsweV4+8y0ywwR9aOrH90DeXRD",
	"fH3mGueHnpwZUKV2TkUb8N8lh1kQho4AMQ5g4wTyaEups74OOohUfdceWhjqF9gUbpHckTDDJ5J7XX/j",
	"r6fsO57yFg8DliaQovE9ejIuOMmJPwQxTNjK+sI9F1OfxH8F0xF8igOapKHiH+VRqPDrHXsk/EnOxGL0",
	"u/1+u3vW7p7d9noX3f5F96wzPDlvd88uul0jlcvV+MDO3QF/+hhQxJPJTl1E52GET2pFq9+khSU/xvl3",
	"s79KnRMxWXGvxM9S8yjqiDU1pr2zkdWdTNonA3jSHvbQsA0H5/32qDc57Y4m6Hw4YSglBU3FM0g/SuPf",
	"Y4cPTGybPI79pYhPiIOm4v6Jn6UR4jzOhoiESQU7xSOkPkhjJKObFD3SIAiL5HOvVUPmIj8gE1GKPejh",
	"iU+B4y/+9OECeIhRXP6ThU0P8vywUkRSPKf8qzSjHF+kQL1RZzQYRaiXClaKB099iMYP4iyMXv8U9aZn",
	"w/bQ6k/bw7P+oH2OYK897Q5GZ70pmvT73TgOIUIOmT4Jrjvi5UslSpUzA0VhJzzAIXmJVB1C3xHJu7U6",
	"VUKuSwJxJQItGyx2qP5APDAlvsPjB2QXWSEdlduwmEYESym2l/C8Ddibqna6kPiraL4k3IQUHggSD645",
	"6Bq156XftWOQebL2pC17R2bZywa0ln+0/FOaKmgbXyUbXzqBvedi9ICoStZJsAhqWedn5K0KOlRLOlrS",
	"0ZLO/ko6SdR7VpIOlz+0nPOUov27EnVK+lFoOUd7VBygR4WWcLSE04iEo30rNuYxESUq+Noylr5CZPrC",
	"eauatiHROcM2xKHJjqICY1KOmUgndJMQjTEX37W8tp68dikBXi4vKFW10vLbEcpvMtyDXyWYb9Y4ddI/",
	"fZ4iW3igWmiTX59dSWyfvuxMYlvpG+BB2yuRUYr14znCXvwd8rMXf99xTL8zLu7UuM4YdekxE10CYPBe",
	"glvgzSRQpz8xusd/Y5SF/xLSMf7rHM/m/FeBmvw3RmruGA5pObWEI6KvllNl/AjE1EwkWU++Dfp2Avnl",
	"zvj77i5AszuONXcBqrG/2H/U6HbH0OAugXJR9xDtwhEC/Aq7yOiX0YSjYfiNo2L4JULH8CtHyfBrgJbh",
	"N46adxw5hWxyGJ6bX3Yv2ifxUcytRsdgGK0P2II+4NHFHsOg53JF2c63owcRi6c7VYss4ZNNoMXGCJYj",
	"VCPs9j0nIJfwBf4SK4mCU8tSFCUJVSuXUL16pv7ENnI9OZdmktV/h6kHgjZpJRD7dhl+KpFlEzum7VvI",
	"qJFWcwln6HeRP/drrcSafACK/0Jfa2XX3KgWS1RozxKuqG+aiNKK8lQSTqH0FECnwTSbEUb9K4B2VnY2",
	"BpB/nLwWMP3HydvMHG1BQwY7dbMXh249a/i8tGHuqAxzjWOPtvlpm98+UDFtTqyQojPJY7zhJiIKIHDQ",
	"o2AbwNQlC8DDpi1kgaBASJLhE904U7FlQ5+DHsd8WWqzXm+TZr08e1nvot/rnA9ji0U4RDo5PnQgvwnc",
	"0kN/7BnfW4xgZA7bG3a63W40LHIesEucBTsExty1DBtOkC04NW5pDPX9LeMB2j4KGUVkcc0+YxVFZQDR",
	"O6ILfGVGS+SlV62me3Fynl6NZBhi3YGwwoDgoIx8I0/qyCKLTc/qmYPpadvqn5ntYe9s0j4fnI7a/UG/",
	"e3520h10R2ZssQk42fImGsFT59lkBJaHe9iuEeY6mSZ/y4aXljHs9+ttJcST3w2AKXCIByAQSxePriEL",
	"Gb8bJnReeGCCwMSGzr2xsX2FZQXq2ZJiagYD0rR5+adsDuDoJdxbA5FYntoixDfPW0WlP4VBR20qCg32",
	"2GID/B5/+9q6k0maukFMkvi4/W7vvN0dtfvD297wondy0e//L58lJKP5rQS9ZLP8fccoZnqtnGomfvzO",
	"FhEe0Pd9MVEF0Nn/zMt7bJQKDjFX+ylQPewRo3ukpMxXj8qof8dxO9HmK2+UvgKZDaWrEM6nRPRw9uhK",
	"lGodXI07cTnuxPXI2Je4Jqsfv4uFxof+/cDMZhtOpy1dVW0oOxJDmSYbTZGNwzflBXd/I7Y7jXeN4V3F",
	"1PbavLgZ82KUqKh88K4Q1zOjdWMl1Pb8vQsUQ93O6KybVgwl1D7ClzVHt5Ott4lueJ7uRrWOWCx+D2cO",
	"Bugb+NPHlP2nU6y5kccKNTcmGp2Nzk9HbWti9tpD8/S0PYGDQXt0bp2OTiw4OBn2G9Dc6IhHZcTj9lQe",
	"FWIaxSU/lmjG5G60ufT4zKU6glFbM0ElGqCNjTuJXQy4SBP6AYuX7aQWtFE5qb0JP2kntdIWWH6c23BS",
	"i+AUciwBdJp1UhOr0E5qZZmips9Lc13HxHU1jz2ardNs3T5QMc03bshJjYOuvJMaZyoacFLjy9q9k9qw",
	"czLsZiR1uJ1jCjA7R/n3iOn8hTwCj4A5dCwbAdOnHlkgtz2FJnZmUXj2v4p1h/IaQt2hNTnvTXpw2j6Z",
	"WtP28HzabZ9b1mm7Ox2Zg4HZ6/V6Z7HuMGANy+sOBZOapzsUaKO9vhJbEZDff3cuM7jEm5cUKrhzCaTc",
	"W3cusTylO1fAt5WK7t8T96dwN9r9aQ33p+AQ8+zJHDVqRX4+e7ef+MJpt5+jcPvZ/nU5eHeXEOc34u7S",
	"wHlrN4+G3TwETGvUoxL8eV4BqliS25mnx7Az7GamzPM9MPVnEPgesIhNXLToxMLVa39WLDiddIZn5+lw",
	"maHZH/XgsD21RpP2cHTabcOTE9QewZHZ7/Ymp/3hoAHBSRfUURXU2Z5cUqlkTnDpjsTtIrUbXSbn+Mrk",
	"rIBYa+m1lr4EJdClcTZdGieP7foZecfPc8nD7xnPpR1dlY6u22O6yju6ao5Lu1wclMuF5rU0r7VpXks7",
	"LOyySEce5yZaN+H6EBTiyPF+2BdesZL3Q8iZVHF7OOn0u4P95CR1xQFVxYEtehV82QEjqb0LjoDhPcDM",
	"/9rLYIs5+atw79rbQHsbHKG3waYz5O+H24HOXb9JrwPurDyeYmRb44D21PFBWB0m3yOBt/+JNf8YihNb",
	"lX6ITVzGOP/0+mp4yUScAnnorHM66EfyUGJ7TDzpj7jLPRYH0iuUcEad07M4A2qYfvSaegggBy8Adh6Q",
	"4xEXAfSAHIy8TiQInYwkMUcBrSpCz2r3fBFIAVXtzqB0Z1g9KVk8SmP7DhwdVPf8WJTweXvTThBH6ASR",
	"D3Ctptdq+spUQjtIbNxBojRP+DPynhtDmBzukBlC7Wuh9rXYAUdYwQtDs4PaQ+MIPDQ0I6gZwcYZQe29",
	"sVPvjdJsZeDLoeQst+/XoXj/G/Dy2Lmec3A2WmFrb9nbJ3oGLwQQn/aUpdVOH0qnjx1wtBXcQbbF0W7X",
	"OUSxaqWryGrtndaduO3pH8PremdcdPfFaeRAOPJDdCFRIVCegTYr3T/vIBAq42OEWHcBaj1v95Laood2",
	"NjkoZ5OdXrDDd0QpI2yt65ayWxBpl5XduawUJbRONFXmtY7ZVp3dulp2a/nWbSPJdQp2CkGj8YzX8pJ0",
	"4us67L/Of61V/Wvz2zoNtjYi7JERQWfDPshs2BIEKyTFjrmPJlJjS2vceYbsQa/TG/XUMaJhmT44sWNr",
	"zz122MF56JtnBBX7QmOA2BiYBucYmxj6stFIjErn5NFhnF8YUTqeEndhtOK/qQ3N+5VfGRKMF8T10ILX",
	"4Lf9GV8N9dpi+nY4fb5RI7Hv0GIx6HLw2/yk6Rwv+QGG5orohH/nUovCslHbpFHWlqETdie3EqDfAWTs",
	"lu/89sSeKum7Zbw9CFOK2obCUaBsvG3rThAeXsA3SXp4Dd+ITGU22HNDjE4RvjnLS766UeBdraA4USua",
	"42FUSjqJalFF6QgfixoetB1nC8nI03RDG26OznBz6PfzqMxAdAtmn4MHsE63vksr0o9/pzzfvv8oiXLl",
	"7EuRr1qBmelj1Ewbm+oZmwKvvi3bnCR4Nhu1UdYA9eM/zl6n0PYfZ29DxNXmqVpC0b4cqjZeHa3xan9Q",
	"TJu2tGnrYOihNnxtJC4nHeJRNUinomUtihKuYWBrJFwnbWbLjdXp7ThW52w4LBurMygRgi4Pl4jVUQbp",
	"nHb3KkhH27cSWwngd1j2rcbCiGoau/JfPx1VdChymzZ16SCjwzdOFeG4Nl3pmCMdc1Tx0jyTCCRtPNqi",
	"8WitdLll8+TutJbcoNfpnnYz6oN8Qi5dYhNDD1Mw9WfYA0voYuj5LqDY8TpGSdfQKw8gDzwQ21960EML",
	"MIUmtjHtGKksFNt1EUVeG3nteBntYBnFnqL9TneYLonXP993T1Gd0rcope8W/TBrZ/E9ynxtOm/vc8nb",
	"q/O0aTtURTZeZ+ptIFNvqRS9mhfdf15UPqWqvOjfgcWnV2TxaYUt+0Utd8fe6gTFhQmKG0yvoJlbnYX4",
	"2L27NFur2dotsLXav2lf8g6XTTjcfKrhnVeSboY7lzMKZ+YS6DWSS0CsonJKgbPRSDPnlk61XJhqeZs5",
	"AL7sjjffx1wA7Frr/AD7LK0ceIbmNcJUOW7qHAJ7nwtaJ4HWuQQO9g4fn+vXtvJMHzUW6IzWzbqTIecB",
	"u8RZMHEjP+FAoqUq0cBVsoFOMVBamSId7TZSC6QgF4p0CXg1m0xAXpHOFlBWRNrNqWmD0TEZjHaFQ9og",
	"pQ1S+0PRtMFrQ5msJQCWj7OXGI8GIuylJe5hZP1g0Dnnf6tsVleQeuANYf99Cz1oIsdDbszC+rSNIPXa",
	"PfYT8djTihYQ24x545YiaN6PoY0h32r8kzmHjoPCZgXmInl9oblodHI2mpydD9vwfNRvD3snqD3pTsx2",
	"t3cO+0N0Op2OJAtRgv0sb9SRmeI8m46MgjowP7EVgSf7H5ePEgRhW/JJhUh8GWX31tIkL1JpaAq4xbI2",
	"pdXg+z0xDSU3qsPp17AIJY4yT43Icae+pjArjvTZR9WnL6220hyFlWYv7tXBm1CSl2MjhpP9AIyOkt+h",
	"WaNGkLwsU+TFyKcl2S16PoZy5flJd3QyKiNXjrqnWXKlxykhMj3k+S7408fAwtTDnLB2JBuJSyzfDNJk",
	"bU3CHHZG/bSEaaHu+fnZELXPR9Z5ezgZdtuj3kmv3RsNh9PeqHveg2gnEqYOWFcFrDcjwFWKV09QgCOJ",
	"6FHuSUerH1+0egagtRFFG1FKUwUdq77pWPVirvBn5GmWcCNGh3ile88S6iBvZZB3Mzxh+RhvzRBqh50D",
	"d9jRrKBmBbfDCmp3l13GdxczlqJPc44zQXh3oe/MHjO0Kt8Z8BnNGNXoNexEM+ycDEeHws/quGhVXHRD",
	"PipfdsbOal+V58CRH2AUs/ZZ2W2IcXUJRPuuaN+V5+y7suno34NxYtGhuZv0YXmo6b0ShlsDPkKuA8t1",
	"0PTqoQF7RY4w17/ojTo9SZjjS+fPpQPwYoks7AGycDAFpr/400cdOUUWl6cm3el0OEFWG8Gp2R72rFF7",
	"ND2F7ZOJaZ6cn1kTyOUpYpq+65ZdRp5c17/onXfO+oO4jiGmeIJtLlfwCGLXgXYk753ASb87OJu2JwNz",
	"2h6enI7aIwQH7bPBxBqg7jkye+exvBftTWBBBZEv2TNX6ks21b4tSt+W5G2SZL/w7oCrh914uDwclSnj",
	"QXu1HLtXy4M2YmgjRjEn/aA9WbbsyZJ6+DOdWRLsIdX8YVX+MNn40PlD7eiidHRpkkGs4O6iuUPt4nIg",
	"Li6aL9R84Vb4Qu3Wsku3llJ6SNFtVQ+5dd+WJHOz4+IFmfwtP5DIJWM/dJ6D0fBoeFrt7KJydmmSpa3g",
	"8vJwGM4uKTxW+rvwT2mvlvgyBeOI67Q/zi0P2q1lY24taSzJs+sKbMmw2kpYE48dYI52X6kkXWjHlUNy",
	"XGn0Bh2+g8rDNlxTmoWBdkFp1gVlipA1geb9Wl4o4SClHFF+Chpv2dYAHeI8LQhj1afQpqhVIJ31h53h",
	"sBdJPeGWjAvjN2RjRsCXyLahB5YuRBQ5HvYXoV2iw/YCPSY9XwzCf47n/gI6XAS4MG7IAj3OoQco9DCd",
	"YmQVimH9086wd5IKKYBd86w3NIdtc3B+0h7CyVn73Drttc/71qR7ggaDXm+iELciKNeRuMLO5YSuCBe0",
	"r0mur8k0vgYrotdPEbia9jiJycGRmBVWN6T9To7P70QFZW1i0CaGcvRAe59szfukgDOUHFDiN0/zhfl8",
	"obygA+QLtY9Jvo9JY4xheU8TzRVqf5OD8jfR/KDmB7fJD2qvk73wOingLpOOJwm9Y3O+J9Fzvn33k82x",
	"tuFZSW4p29Bvdk9Hh8vHar+SXL+SxtjY8t4lm2Vjm3Ewidas9DEJv6bdTMQNvTMuhqxTSBbuBBHeE1eT",
	"vebBD9nbJEaZPFNthDoZ1toAhe4EEt3JaHQXI9Kz9jupKGVo15ODdD1p9jodvBNKtkC1KT+UhgGiPVIa",
	"9kgJqAG0sYeFYKM0PPDC9+nGaRGQNfpppY1Kdv3TR+6TJLyKUsVGnsTaUnddwhn6XRQx/qrqjx0PzZBb",
	"MADFf6F63afY9pD7O0XQNedf6+wgGIH9tU5/avuz/P5f1xKIywk/Moo8ZcpA1DdNRGlFsScDB0OBJ415",
	"W1Dav8ihxMnZG6y+zZsJJGANOSJGTVdnjloy9CnTjiGWst2LQ7dLPD+QacPLURleniMCa8uStixpWs6v",
	"gjadlTGdEaqQZ+Ji+Q56TDCVT2DqkgVYuuQBW8gC3PqTlnREd5njfNqypctBj+PEMtUmrt5WCgi8Ofmp",
	"+6ZbWEBgOOoMorz8aZ7/C0UuBXROfNsCEwTgxEbAIwBaFsAeWlD2hwldz2jJCVrH2OLc/XTUH/TNSbc9",
	"QdNhezhA/fZoOOm24bTbGyHrpNfvDxjLHwhFl4pR0+UIjD/I3Pn/x3SELZkg+YevDO50hhyMeIA4f4m5",
	"xOhavvck/+ZPbGyOk1v+xH8E8o+lKyCwa29cGNCy2nwfbY+02T7a3WkX9gb90/bZ+Vm3Peya0zYcDntt",
	"66R7ej46g7ALp0ZRBYUEpEJzoNntTYfoxGyf96Yn7eF5H7ZH5+ewPZ2MevBkNDpDPSs2B6YFsfK2wKSM",
	"mGcHTN7LAPm2bAO8dh6gjS3gkXvkbN3u1zKG/X69rQhM/90wofPCYzdqYkPn3tjYgnFwEPVslDGBnaao",
	"5Bbl9U8fb0qbJ5Oz761tMrXOTRR7WKVV6RYJSnlnXPwef/2qrBbRukvT7DuOEnti/Eyf4f5YPgk9ONNn",
	"+jS3mEBdgakZLZMYe8dxNtHqa25G9lYqLTzH4LsQhw/J7vrxZstaBm11PRqr63O8yYdv8k1fx43Ye58l",
	"KpQwNgtyqq3NW7E218iCkJQI8zIgrCpnGqi0WFZRctY5HfUzFCUfedplSJfIxcRFFHjI4UXEGZemVI7E",
	"ao8vHnjggXKMMfWghylwkIko5X9MfNpRl2VcQ8shvlTTavhemy+zHS2znVxmoQLjpNvpn5+lFRin0xM4",
	"HMD2cNTvtYfWdNIenZ+eteHZaDDpjQZTdNbbpQJDJ2lQJWloUD9QLTtDilgdSzRexrZ0poYjzNSQCWtt",
	"RdVW1Cq0QWdt2HTWhjKc7M/I02zsMbOxiRM8FDZW55RQ5pRokI+tkExCM7Hav/FI/Bs1+6rZ162xr9pT",
	"bpdJJsoww6JXkz53QXaJEm53+8uGZ7ndmXNk3hN/M952b+LBVpzsGEdDkl52j8S1ra362UmpNBpn6c87",
	"56OTA2PpdXoNVXqNJj3XvuySo9cebIflwaaTeGhPtqP3ZPuyF+Kk9mjTHm3ao22nYrt2bduKa5vOo7Jl",
	"z7Yo6SFlsqbrZSZX+Rl5KQ1I1BOInkWGwTDZH30TNC+RdIUb5iordDar+BDS82m7e2pcdFvRn71B4s9+",
	"N/nnmfTnWbs7NC661TNRBkDJFZKjPCVaLC6HpXuZiyV6UNKw/5e4Akef2aT6AWg72nOwo1VAB21w0wa3",
	"rdAZbZnbiWUuj231lx5eoMo8q+hWkmH9whvX4VZ3wJ32+8ZFrytzoIP0D8P0DyfpH07TP5ylfxilfzhP",
	"/TDoJn44azOeNPlDP/3DIP3DMP3DSfqH0/QPYqXlWWwZgTR/XZ+/Tt2oPWeuZag/P8661O41W/0s2OqS",
	"uKB5as1Tb57CaIZ6lwx1lDfd9KlHFuMpRrY1pshGHKjrFH7PGLJUGfg3vOtPrOdN2HHbwSTyarFlXAyG",
	"rTitPPeK6vZN2O+NztvwvGe2h6fT0/aka8H2ZDAcno+G/enANNnd5CtG1ljQrzha5AHaPoPCW2LzCBOT",
	"uC67JQBS6i+QY0GAKEWdyA2rd6IoZ5QBqTrFjdRDlSt1lAFdHTOcV9g949QUZZBUN6D5mOJC8nAk8Rml",
	"96mjjo8v6rgC8DULrFngtaiHjkveWjX5SuymVFte85qHymvqwN7cYvF7wGyWD/zVnOb+cppa96p5TM1j",
	"HhGPqTWq+1ChvhrHmqxXn8m0Nle7PoO7aCDeuDnu+Za9hWLjQEwL+LSHzDXr2Nm80vR7wDSXj61thGlu",
	"ppR9xg6U0bf8dqajYRV3+c64+L27LyGxh8j4H3Kh+yyEygunEoiVEb6kQrC7CMWedaTqZqQbHbp6kCXw",
	"G79oBx9AWlmW21Rx/OZBpeM6m43rjEDtEhuNPUjv13LhYaMANkopr53PxEa3kN5v23qSk12qf3Fy1hn0",
	"ehnZpa484BEPLsADsf2lBz20CPO7Ll1MhMxgLJCF/QVn+em9cWH8Px9DAE3Tp3DhU+AQByDeJy+zUv/i",
	"ZNQZDNM5//vmxJp0p9O2dWqdt4enE9g+h+isfd4/G51YI3iCzpFCpIzBWUeKjHqXExyj5tqbJ9+bJ7oe",
	"CvGQXQZwyyG2M68diQgcm/lEsTXtm3PEvjlKeGtTiTaVVKUR2gNnax44Md9Q6HQTsopU84qrKzlMXlF7",
	"4+R74zTHLNbwutGcovatOXjfGs0jah6xIR5Re9DshQdNkX4y6TST0E825ygToVgTvjH1+d1bofBT5aTP",
	"4Xd5r7hloUa0e3J+0Fyu9p7J9Z5pjsmt4SWzYSa3GceYeNFKXxj2pUom+uAm89/neDa/M/bNP2a/+fVD",
	"domRUCnP4stRao2kwiGKhd85mt1xRNNeMnXkFO0Yc5COMftw3Y7HVyZHUNuUe8xeAEx7zOzQY4Zm5o98",
	"h6kXsblAtE1Lm6yNzOzScqkisWPavoVyc0W2MrJMwhn63fEXE+R+VfXHjodmyC0YgOK/UEH39XJV1hHO",
	"ssSWKAdjJUlFDb60hAIE1JpNUJhEwH8F2KBIleV3u/1TBrB/nLwWMP/HyVvR7vrD7dXPV58VDRls1c1e",
	"HJOCv8Fz08aDozUeNIpF2jChDRP7RNW00aOM0YNQBXP4hmvdKYDAQY9JNgNMXbIAS5c8YAtZgGvt03yj",
	"6C5zjlu2UDjoMWmeUFsmek1ZJgYX3V6ndzrKsEy8fwIJDk22UvB6wHBixwamgLNNdzJkdnBlxPBTvgUj",
	"tc7YgnF+cjoZwrY5GMD2cHo6aY/Oh7BtTUw4GZ2fjibDswwLRn3jRWm7BQhOfssmi2vnAdrYAh65R87W",
	"zRQtY9jv19uKwI/fDRM6LzwwQWBiQ+fe2NiCcXAQ9UwqMSlJkJGtCiufPt7UsqXQw7CelC/hG4ChrD1l",
	"Hy0ndJ9sJYQetrGkfvHFEJNqqQkPzFDy8Wa7Qpm2jRynbWSXt+u47CJ0G5aQnYKnhBVEkB1tBtmGGWTt",
	"mOGy4cI7DP/gwlz3ZKgWOvnblCFaXi6Ri+ECwAXygIWphzmpBS5aItuGPNwj4ujFQAVSZb/TPRukpEo0",
	"7Q/P0Oi8fT6Z9NvDk/NB+3w4nLZ7Z/DU7PYH/bPT6Q6lSh0anBcavH2hrX5E8HGGeOg44GcTB6zDO7QV",
	"pQp3rKN/m4r+LRf4q5m+lYUcCNOnY3xzY3y3z/XVDO3VLJ/2yTlUnxzN7Glmb1vMnvZo2Z8w3rIRvDuI",
	"3t1x4G4+07rqzPJWCuL9EoXmlnOTkTrkuMvciE9S40Jed7SS3mbPeV0d6ZsX6duAV8qXHbK62jvl+XDs",
	"hx7Sq71Udh/OqyN5tbeK9lapK6I9J7cVHby7Ta+VBK+Pre+q+PFyMb5xKpviQN8wk6kO9q0Z7MszMW0x",
	"4jcJzGazb76oRBZTCPyPs7cqFNZRwmuIH/t2xNp4ceTGi/1DOG1I0YaUA6WV2qizGaNOCrKVTTwlAqFF",
	"Wvg68c8NZGldiYHOSdHaazRF63DQzbD0fAgPNRkALaVnnePZPE7OGrYvU34gnjUKa0a90x7qTdpm/wy2",
	"h7A/aUNonrang+mg3z+b9MyRuT+JWXWUc2IrAgMOJ8q5ycyxdcOdK7yIOq/sHtufyoFQB1LrrLPHF0xd",
	"6QJoS5bOSatz0m7ySXmeCWt1qPZWjF7sjMpas0TbPEPWbdBCG7GqG7HY7Fu1X4XgW3G3E1DbkdmKr0rb",
	"oiqLIg2fmzYwHaWBqXEs0lYjbTXaJ6qmTUEbzljLQVjdYsN4kCatNZzXa8BQQ2zisgX99NNPRqsgQqfX",
	"64yG/Qy7zWt/BkzoU2SByROAYO4voBOztK/9GfuDeOxpRQuIbcbAMW7Qhub9GNoY8h3GP5lz6DgobJYf",
	"e5NYWWjbGQ7M0/7pudU+O5lO28Oz4Wn7fGD12wj1rVM0ODO7lsq2I9jQGmYdziCXsuhwFNTGnINOWStu",
	"6DallTo2HI68+2+Y4cssHRSUY5Ph9GuvQ4KCrWo7yybsLOIw6zq/l9ADCnzS6WoLJDJtNjk+s8lu79bx",
	"GEyCC7JZK8iOgaPtHzu1f6yTqpbLGmVS1UYS7hYTQITSZnd49vqnURmB86w/yBA4f0M29sCfPoYALylc",
	"AOo7PENZKHHa0LGwhzEFS+ROkYscC1PABFSKRcNtSaP9zugknep2dA7R+QAN2tZk1GPSqNmG5gi2h+Z0",
	"Cs3pCez2BzuURnWq27xUt9sX9uqluhXU4djyniV3pVPdHnGq2zSotflFm18qUAad6nZrqW5z+EYp1a1m",
	"GjdowoiXfSBMo06Vm5sqd/tcY41UuZpl1M5Ah+wMpJlFzSxui1nUrjR7kSo3h/VMpsptwCknnSo32y9n",
	"f5ne98jC/gJ8CkOoI1B+6m1XC3pycnpYDK3Oh5uXD7cBl5cvO+RntevLc2HKDzkbrnaB2XUu3ApiiHaF",
	"0a4wz90VZmuZcPffJ0bnwd2CS0zJaOD8QOAjCgLO6D7Ftofc3ymCrjn/WmcH4QhciFlrBMQYNu9pnTFY",
	"63X6+xS5Y2ytdZbIecAucRYMf9ZZS/j4QRt7GK15tO4DNjPGgK4Ln4pPFsHFOv1Nn3pkMZ5iZFtjimxk",
	"esgaC3ZjjK38oRuNYN9i8Loqbn1XIetNxifyZgIRWENObKKmqzPHLTlRKdUyIB5l2jLkKtMuIAal9iRf",
	"+jJjpy53uS2KSxy1vfz8+fI/6h2yy1qiXdGlVA1xLKkHNP5r/K+D/9pqfIxWY00NNDWoRw20e4F2L9Bc",
	"hqYrm6Yr2g9lwyldqmdzaTCTSwNJXKB575BHG1mzwBmDM0UGxK4HJzYaTyBF43v0tPLBRSZxrTG2sr74",
	"rr3ySfxX6ICCTxQ6UCS0l4aKf5RGMaFjItvmGx0vEKVwhlLfEnuIf5s8jRlBiT4QZ2r7yDHRmNFPaeL0",
	"F3n2XB+a4aBz1pUKUEMPWmQ2doiHJoTIe1v5JM1hIU+QgXgTUxfReUB+0se0+k0aK/kRm/fIy+wqvkqd",
	"Z9ib+5MxptSXjyfxs9yckJmNxpaLHxLN5Z9Xmy8Q8rAzW+0QfpC6/IFduLIc6Uep6T122KV1iLuAttEy",
	"bDjhXkd/G0sbelPiLowL4xE7FnmkRst4QC4VBKLX6fWN7y3Dxg6C7spsiZ+l+RbQ85C7INQLXZykToqP",
	"MvYrPssjYw/PYBIf4t9SSB18UNwNsqQz5GDJES1e3+o3aX52BVzL955UPRUf5a7+xMbmOPBaEr+5iBLb",
	"V62Qf3lI7DP6KbVNykiv42EoTrnPfhFY7JBH1TqVn6WVhtzL5vzphr1Ob3SW4U9341MTL7EHHOIAsnAw",
	"BYwjw+ziEymY5Obqt36Gg120YGPBnfOM0k531PYZe0zRQ789HJz0T89GJ+3+yeSkPZwOTtuTfn/Shv2B",
	"OYSD6dloaBbWrU9sNfTTOxtM+72uedo+6fXM9hCOJm14djptn/YH0wE67Z/3RlLd+mA7OPTRmxM3CR/2",
	"g+l7Y+oR90kGbPKDqkuKXiZ/lzvIZyV3SPwuX9zkl9VFJz4nPnAIkHnbIW1KFsibY2fWxrQ9cXmWrZbx",
	"/7H37U2O20ieX4Wri4m5iyiU+QBfFbEx47XbXt/6Ne7umdhtdShAAKzilESqSaraNb7+7hcE3xRJUSqJ",
	"olT5j91FghQIZCYy8ftlIopJ2LvQGJZeCFfeuNCSP2bE8ZZe/LyghD6IhZ+wled7UZx4NP79InFQEwcz",
	"FYnKX6Zm3ZialXhQhFK+jhcrEj4KU5xTdbPric2K8ms7yKXarayVdd/yxvFDGGzuHxZRFMzuXLKMkhdt",
	"wlBg82mXZndJh7KyBVXTIJRhdjd75F78QP7KHR7Gt0F4P7uZuV4YxdlEzb4lK3H8T/IqXbFuCvQ/WtBg",
	"k/hOcrI6lA98x3kUz/JrieZlblWqf4so6V3ZD9Es4tyvXAt8JyAhS8Y58e3SvPhsoNZh4HpLvlg/BHFQ",
	"lTLqrRabbYuVTmg2OBGPkmVqkdZiy1qKWCP/GPVmFnsrvvhX4At+LkmZ0e+8FZf+9/u3Uhp/SN8QnzDy",
	"f3artnZrKHap2gUfNRO5WRXP+scDiSUabJZM8mLJ4X+pMFZ/eZD84N+kt7mwS14kFcIeh3y5DBaU1FzJ",
	"6tWK8uzscNUFE88VsXjMo7gajBMqRq2MyL/qU8lctdrXhz553CyXNXGUchkr7iw+e/GDkPnZ3ezDf3nh",
	"0vPR10704IX8o1R/qPVNqa3JBy83wrpilTY26X9qXp88GgfhIlhHbWtl293K+P+L+4xHj9veZONG9ZEg",
	"WLU4erXL/ww8v/MZIW3l3fzzFBnrRLMwUhxOEJapg2zLpcjWHdswXOpotiECtTRciB68dRbupPF1zFdR",
	"OaMf/kjfKlu2zVzKkWNxirDMdURUxUCmpVPbNjhTdLuFYV57qUC8k5dxrFJX1yykmpQijLGBiJW8zCCG",
	"w4hmEUsb/DLmYkXlxEam4xgIM2YiR6UEGaorK1zlmutYg1+GFc2Usaoh6mILYcVykU2JiSxD1RRZpxpn",
	"w3umuURxTJUgbBKGsONoyFIoQ6ZLMSHckCmXB7/Mkk2TESIjjVEHYUowskzZRdxwmMptxWW6PvhlhksJ",
	"0bmGMLYVhInsIsvFDOnYVA2qE2zpw3tmUmbYrm4gZtgqwormIluxGZIpUbgjuxbH5s6XJUtry75PIqAV",
	"YUxaVfe0WuTUsBTD1h3Ede4izAyGLM5spJiaTG1ObY1XqpPW3lWOjqzbNmUKYqrBEbZMjGxbkZFmUVtR",
	"bMuw9M53iB4+dfRNZqqiYBNxyjjCqsmQzYmDuGvrTNUsYiq4ZaCy1xXdUyzDcU2MEcYKQdhWbWRbJkMa",
	"5S4hDjUwU3pek/TQ5Zw5hD42x7ax/7f9CYSpxMIaRza1KMLMYchmtooU7jhE01zVdnn5283XlSJDmOpy",
	"qiPFUh2EFVdDxKEuwq5paJbGNEszel4jcu/DYLNu6aGBFRnbwrY4HGHNsRGRk2mUmUpVQhgzSfnq7C3l",
	"1DuYUWoYyDC5jjCjBrIdkyOV6K7hYt1wVHX76aQ/xTivk5B1FYQxX5W9yw301vkblcEXR8Jsf5Ar27ah",
	"uxQRnkQjlqsjW7YMxFTVtaiKVVnFXWcpkijy7pvibVuWbjjUQUwxFIS5LSOL2ypyqK5oHOsOcYe9UGTV",
	"ZNu/2/3WLWqZKjaRbOBkjrGOCHV1pFCFMMshrklxNdbJ3lN0U+eY24rOka4ZBGGuyciyVQu5nBoGN22Z",
	"UqXtecFsbHT+sPMkB+Q3Qbnhxk5qdZvuw2y1iUTRYeLGPJSCUOKfNmQpxYH0bsNvJFmX/u9mKSX+qpR7",
	"qhKSTVmeboHiUzHSDihLPP2KxB0HRCZS3cy7SsL/5rVHz2fiWhKjpK3Smdl6ONv4WXiseauyPCfB/Hx2",
	"96G8//GmQXxvb5KHna03q6vTc3uTdJ81+fgvN/N01WhvWNvTaumHsA7ZF4pQM01ZE0K6CPyFCHjmeWQ8",
	"TyK9raEq9lC2k+IK3W3eakAhzdvV3djmvcoG5laqXQWZmHLGHdSZPk6S3Y6j5oRV6MgZEdah456wEvk9",
	"YSmKpzJr0fXSitXoaNK0HnOhlLV2H2+20mf6m1atSWejbavS2TSzLvPMvsyrFqbzobql6e5ranHK0Umt",
	"TpHK07A889L2zFPr0zX0pRXqTCQqrVFHk6ZV6mhWs04dbapWqittqWqtoJR5NzMQUjevLnUTLDdY7uu2",
	"3FeTHXzsGvmg+qD6V676cAzDuXLOX3ACw6DDF05cQxcYokdhiGrqrW4owBCdMkMUyJ8XRf5UJkj+1NRb",
	"rBgd5M83scRjaUmcIOTSE1/W+Z7KCfmeCjJcU7OxwpFuKQRhYpnIdpmFqCOrVFY11cRsJyms9nU5F8eW",
	"bdOyFR1RXdcQ1iwN2cSgyLI0xVa5ZSmy+cr5njxGfiK7iGxi9Gnj7aR5NlaL3TTPbFk8Gm9T1W9Nwz6M",
	"t5kvVV3EzX8S3/P5X//FV0vyeOsFTeLmO7JaeTlxU5V3EzffhXzlLMnzxXI35eNyN2uTt4u7+XPgS5yE",
	"m5VENrH0FCw365hEtxVg/k0sCekVDT5tvNsjEzf1W1vWDyZutujWML5mmxhW+JpCCqWKaLVTNreadT3e",
	"wdNU5WvmabqmbJuOrSKmygrCis2QRbGKHFfWiOLqBqHO/jxNzjjRNUtG2HFlhDE3kUVcjGxdlS2iadym",
	"ymBmH9WxiqnhIFXTHIQNbiHH0DQk29zEjqs6zgBmX8GG1LnDFRsj1yQOwqZNkY1VB8my41DTtRnVnMEv",
	"07GpEGqryKKKhrCl28hSiIZcRXcU1VaJ4g4nMFLCDYUoGDkOtxBmxEWObMrIZbLuMuZoqqUOZ5A6nKk2",
	"o8jBmouwY9nIdjUVaYZMqGE4TDfo4Jc5imqpzHSQ4yoqwo5NkE24imRsuK6muLbi4OGfqSiUY1NBiq7b",
	"CGtURpZFDeSqioWJapt4AFH2xTzNPoKkxXWNaraJFIpx8rk6sizMkOJY1LEUh9it8tYkSDrcsHVDcZCl",
	"mCbCjGHkMNNCrmZQrCq6bNrk6ATJVk7iSYmBBlEYxtRChmZghHXLQsThJtKwzAzT5LbF3b2IgdiydM10",
	"MXJVpiHsyhqyqOkgmXFFVTkjMucvIQaOy8yDoxf7jl48FY3toAMXr+7gHDhm8TUcswiH5kBVm4GgLByu",
	"OMLhirvPVQQ8CPAgwIMADwI8CPAgwIMAD3oFeJACeND14EENWQc8CPAgwIMADwI8CPAgwIN24EECpQE0",
	"6Lmxi3ZqQKh50g6gQXAWxrWdhQE4EOBAJ8CBoF5962GSiRJWzpJkWdV5Lyz3ILrP/ft4M1tvWoCl4lT2",
	"oahS+sBIle/TXYEdxe8BygIoC6AsgLIAygIoC6AsgLIAygIoa3BZeoncE88fVpw+bXv0TCdD1gDZAmQL",
	"kC1AtgDZAmQLkK2hyFa2sgK29VzdyDt5we735wG2Jle4+7pLckO97OvAO3/dvMq62VBMsadKIpSgPmcJ",
	"6vdnxuOhFPVrK0UNxvCVGcPrqeq8RRyZQHlnUKfXpk4DKiW/h0LJpyqU/FU6R+K8/rF4Ub+lkrMHMeob",
	"0cmRiFHpiAAxag9i1OznxDCvPJ/926xJkGrB5YxbS6kgwtvcKThWHY5VP86x6sataVklfg10PKDjAR0P",
	"6HhAxwM6HtDxgI53LXS8woeeWK1x49ZSgYEHDDxg4AEDDxh4wMADBt5gBl62MQsEvOqOsT9pCl62dXyh",
	"TLy2rd3LoIRl4w7MsNMzw1qFBGhDu2lDhYwCe+hVsYf2UZgrpJYUYj8iw2SvIQf6wXnpB92xWGux/h+9",
	"KC58wEXX003+QPJU7iV+I575LnnkbfWJNvrDpw0PKxs/nk+XGyY0sJP0cNP+6Jrc8w/+ZuXw8GPb854f",
	"83se7nhB5P2L73j844uoCnsGMu3j3xkJRBtKeRTt6fwPnfJmONA+0ScoP/fn/Qxi+wf8JROuf3/7y09v",
	"Fm/f/fbDz98v/v71j+/fpHvEyfz/Sf+PVIT+pH+btvvh53dvvn/zW0vDRFTam/356krgnX9MoQjfdRfh",
	"m4KEQRlAKAN4KdYQChGeqxBhELV4zd8IlD+SiOTzz7t8KckNg5W0DoMnj3Emic3vLUKueGGfp3Vikq7P",
	"K8Sf9u9oJ+4qxyTu1n7YY7M7Ta9gIQKUkFVKVMWyEbEVirDhGsiRGUGOhrFtYdXVKE0Miug1Z4vU6JbU",
	"1iey3AjQOVno09+TxO8VNB3FaAE1utzkA9CKDid/CIjRJWEZ6+TE4MYP/hNZekxK6RmnBjRuZlhVD/sU",
	"h0Q8iVwyTY8k7sUPPJTE3EtBKJFYWnKSOEI+lxqiMjvad3nZeB2G0ZQ2Zpdejhiq/frL25fAOe1KNHl8",
	"p0v722Gfug2bz+7km3lqdrbrL2wZqfns7oP8ccLIUNdITAcqCqKLxYo6Ba13e7YhcPNU5Oa50HXm/m0L",
	"37wQv0tCm355e76AFfCnq8OfpqSEV4lgdWnSUSGtSc3iAFAsNWKAip0EFcvzgUZNy/0p+9E98nLzR0bK",
	"zM2HBXJz4dACyJJ8RVmSrZkliiUX8tSSQAk55JBDfqwccgXjMumqLSd39hsXaTJitzxZEiTX+50zyYv/",
	"bQa5upCrC7m6kKsLubqQqxslBiT3VSaXq6tYkKsLubqQqwu5upCrC7m6kKs7OFe3XNIhXbe2kzzxfN18",
	"3i40Y3d7J+JC8nXzcYeM3dNn7LYICeTrDiBQlDIKjIlXlbE7XGGuke1Qiv2IGbt7DDnk656VmZChAhOv",
	"F549MRItIRsTYCUAKwFYCa+dlYAttY+VcMllnftB7hqEvHNottFl4GsAX+NYfA2sV/BxICwAYQEIC0BY",
	"AMLCgYSFfK2eHF8BWwbwFYCvAHwF4CsAX+H6+ApZl12ZcpsRjhRVpwgTW0FEkV1kq4psGLaiuLre0uXK",
	"K1PjCLyHo/MeCs8AaA8XVKU8m7ULJT1s70xdCOkhG3bgPJye89AiI8B5GMB5KEQUKA+vivIwXF+ukfJQ",
	"SP2IjIc9RhwYD+djPJSbKF++am4u7K5PLqWPSOkjfUXJvxYNf8jaQSny/UuRV2bnlPXHm1Pa9O6ldCal",
	"dCrPWWy8FN3ExlWFF0qNH+bFT2FEodD49RYan4Z8QZlxKDN+GZYQiowfp8h4BSk8QbXxisO0f2Xx0i8e",
	"s554RaBHKCI+RdJuCjVwtoiDIUxa9U42b027i8H0c0MMqncvhCtbL+ruKqbFZMdBukZ0hBWOEdFsFVmK",
	"Y8iWw23sJLq0P/01+cTZ3oTXdegFW2SvMRhROVyTeNZ1dkhjxvM7R2SAbMnc3vyFnG3AdeI4FubIIqaF",
	"cDKRtqVyJHOLEkXXVF02doK/+yNs1Yh1UDH9ygNQQb/+KYXkfZhR4v85lhwuOUviP87KUH4Rks9tDaZa",
	"Pr+qQGPsNBxcK7/bG5x+pfxqb1vhxmyGmqXwK1PfvJWYcnEtMZfiSm6fxdUH7/4hraYvdE5cS+znRKHL",
	"7smFGvrHqaFfG9M+zCAXxY6qzlWR7GgiRDO/J8Qzv1OIaH5XiGlRMDoV1fyeENfLQ1BPXXe/T1UAUL22",
	"qvsXrrZXBuT26d5x6/Rf+rxDbf+p4MlLHsY7kOSsTRt0/HVyC8DifTb5xGieAh0upikP0r5OL0wI/xUd",
	"AuT3KEHQyGMJmO+rwXxHlyxAewHtnbr1A5x3mjjv13FM6EPm/EhxUE18GQL1ps/nfuyp0V3RzROUZvqw",
	"VfyhByhV7lT51jLlWsmhtMgN91k9772WI/jhY1kSJ63vkKd+ib9Ky5EVetlRK2CrH5XireTe9yT+u/Rp",
	"40V53nYfENd4V46qUW6Zlm1YiDlUQZgaBnKIpiHLZoalM6LpuJI5mnnQibAtPT/NLRTp/VlS991XX33+",
	"/Pk2G/1tO2VanKkaZohploEwJhw5hkmQrOm6aTALazrPTdeWbVJaTZEiZ5UBztwFn/8el0gvfyqrBizd",
	"s3ZtOObZH3iJu1eJaO4VSfaZ05OElscC/NIOTxXqS7vXju2JgRGtCsOZQnPtoF/OJsnOvS7vfbyZV+11",
	"e4PSHov3qrJiI9lCKn6n4DtFv1PV/xG/ki8E/a3SxSD5lT/ms0e+1dftA7y/JJ3IB+jLJYCN2cwBzPgC",
	"mDEbxN6N6lQN8idKVSj2k/t3sqtqIY6Rrbf5KBo11aOzYUVN8t9rVYL81wt1GdQ6U5t5qjjzVHU6vqvr",
	"DN0vaUfLQf8CQOgANQYI9EogUDApY5mU6wZpM7twFHgWZHI0mQQAeSIAclkqakAqcta4Lwn5Td4EIOX9",
	"84/F+J4087iYwS0mcDZx00Gb064C2nyMKHjssQS0+bWgzeNLFqDNgDZP3foB2nwJWcVCLvbPJxae0pip",
	"xKKfIyQR92fnKtatbpaZkmmn0izNfETqCa6O7LrY4Qxx4lKEFWYhyzUI0h1KddtkDiGJDQmoKOM+8Gf7",
	"szkbjZ+8yEuL1c/uZvz3mIc+WRbgsmE4qqUoBGHZ4Aibho4cl6uIyUTG3JINrKs9ZWz3T9ZM3ftBaZqp",
	"aEKCZv1TUpFrS8/MhvbCkjP5U3t51yMGY0fCZ1Ohn34qZtrPVqBW3NpCOAsLkb0ntREXkUeZfytAm8fI",
	"oMxGs2/zN5Wgrh3QUpLKd2fSBGmOwyQZ0L1rS3AcQ6uuGuDKVeO4+YejTAtgPBPBeGqHbQyAecr2fUjP",
	"d5VWAPbsD/bko3xSvKc6lVtRRjmD00F9ig4D8HOMGOEMwwnYz2vBfs4iXAD/APxzATYQEKBLQIBy0dgf",
	"BMp9pzFxoLy3Y9ST9QP/eRVsBp3Zq96p+q0ml2f2Fh1N4aHqWJH0cGCc/3PxsFkRX5zDdjf7Ow+fpYjE",
	"XuR6nO1Ee2q/mqM6FrFMx8QGwq7iIExtEzmWZiCDusQ1HGbpetvheKWjfACwU7jyg7CdQugA3ql9Sik1",
	"FwThuKVsnza+OhKQU8j59LGcoqutcE5+t4nopGZlnpiYeWnG5qkduwBUp/LVAOwcA9gpB7Rvu7MQp44d",
	"z0ys5qlgzauiNS+FCyCeAWINKM+1oTzjqthV4z0VPTku5DPyHAH4MxHwJ40K0Jrcc7RXsk/6oJQ8OCTx",
	"561o/iu55wAIHQYIpQO+SPo2QiZQ6/RuhTDprErJtE4vQ2hbtAE0OkYIcs5xBfTotaBH55UygJEARrok",
	"qwh40hVnFJW+85hw0pa/eeYUI+1ONm+xbO2RYmRrsmMS3UBcwyrCjmYi27EshLlhM9k1DVkzk8kP4sQT",
	"iDZOMnWOkI9sxnvqW271pwBYPP+JR7F3n4JZ+Y10JD0mPGiiq7pqcI5URk2EZVNDjkEJMqhpmbZjmgp2",
	"E1e6D+FqdCBHuFTLVU1VMRHBqoywaWFEFMVCMjFNC2PNdE23BeHamu6DoK7tIGUQ5rX1GIBfg3ObWqTr",
	"YuCxrShzvCDzSIDZ9rI/feRsW9WHZ0Q1pK21BGV+5FzNDoqnty3tfHbnkmV0CdDb9lQDBnccDK5FIA/O",
	"PWgKaF91rOoJRnVhzd/WIrDzisgCoLePsgCyd23I3gUr7lXDhG3ad1y88JJnHsDHkcHH9ZI8O0HwKE53",
	"j776w2Nf0q2SJY/59qbJt+K6RKRozannelTKXyAlL5CcZ0nsz9T3TNKnfs1avktPuT/mKRz7bVZg+1Yz",
	"tfIQjtoX/m0TMIn/Tvk63oSe5AdRHG5W0ipYLr3YI7ciDIoeZ3ezr6M1D30Sb0Lp08aTVp6/iSRvtebM",
	"i3edmqHd6fItLgqe5BsE2GZMlV0dybrsIuzKDBEH60hj1NUNaqlUrmwQ1Odujz2B2oO92wC1llIqFaeO",
	"/H8OYskNNj6TglCqhuvTOrChUIWaBlSi5FzepXdieo4QGH/75sc3794MDI0bmp2sRMkCdOHoZ8dXTSjc",
	"S+XideGPqWAeOYbpnGpAAAEB3MMy7PYpC/F91RhcK7PsNx6HHn8Se8NbPt+ix+f7nsdVhy8Cj6/WiQvx",
	"+IQfBv7ec0MTxnP5moQ78Pem5u8B2Qw8PfD0LsTTA6rVEKrV/gyrTYvr+F54Q/vuFaZPbe0Vno5ZlTpt",
	"i5pQneCg4CM6rO/SvbjikpT5naWjKlqUV3fuRCq2fll+af5t4JlWFW08t/TX92d0S09Kxan3t5V9k9xp",
	"km8qk1o/dnUa5Jnpu9G/bi6OJNMQlT6QVYhMB8ZaFZ2Wc9gui8ryfgqxAVBWLomyMp4aXTyxZEfk80IG",
	"yYgTMYDn8R5oHseneexIIS+btSWM/1q5C2nigwPMQq1OkBRenbCmtz92wnfRF8jl3tcthzRt2Dl/kXcM",
	"GdiwKz+RXXlIrp7cjv+A/Odi63BwCnTuZoyQ+Jx37uxpzrp6q8lKmeacHUy4SHyoO2GkKw7auwcvkjxB",
	"nMmulTvL/xl8luJAeiA+W3KJbqI4WPEQuYR6/n2RhPmX3Xv31Q7le/eMW0wluoo0hesIO66JiMJd5Bqa",
	"JWsaU1UXi1lbikGKHry1+HbuP3lh4K/yUlPpCCXevSjPSzm2HZkgarscYUPGyHEUgjSsm7rMNVOjeokI",
	"1N4lvPTkHbLmathxKTKIrSBsuxoiJtaQamumSTm1FSJ3vSOR5Nz0kqUXe7ylk0zTCDFMFVHZYAg7OkaO",
	"ylykcV3THM3UsEPKH2i+ruin5mBVIYqMGDMMhGWXI8vCGtIVWzdd03E1g/a8RrCpwmCzrvZQIAY8fPJo",
	"W8dlTTMUl3PEXEdknVPkqApDOsaYmLapatwsf7F4T9FjahBLN1QFUZswhJnMkM1cjCyLE03Hlmtz3PZ8",
	"2qvEk2sMqAgdG/DOQcjOEFAHcsrrn5J1ePrp4utyEThJ+LlHKnghpJOHljpQpWTOt3K60zFvXq4uPFuP",
	"pNr83J4DXrGpHUniqWlov1m1dB0/IOxey62JAWGQIH4c7GvHNrGQ6a7cwky2O27XZLzrFVVZ78xNbMp8",
	"dxJjRfY7G23rQGfTUhfamrz6JPWaPQQw76rAPLALL7MLVwNVRkcGJ0GwXihYkGJ/Luz1Jdn1QxLrz5pi",
	"pau3ijZwayz9M4/K/87DQOJixU3zrpg3IH1eu9VMtXmCFHUsjVAbmZw7CBuuixxTwUi3KFdMx6GK4+yx",
	"8dW/47TPJs9Edlkgf78vf/9UexgHZe1fXQIX5Oq/hlx9SN4CmHhgXAAZ+iNk6O9Ozn9VTmP158BpHOY0",
	"QgmA3hIAYxEvwWUE0uK1kRbBWQRn8QTOIlD+JpHkPyS/f9zc/rOn9e/j7+7BH8w9mH2Ig9qtrBngCu/l",
	"CkPVgb6qAyfjgL0/jycMXLDXwgWDegjACQNO2JSqPUChB+CGgX24em7YqSpYgISdniQG9TlOwxErQlKP",
	"fWkUfBlWvEOKs3rb3RU88orcUMVj/yoeolLhCUt5FNM3XlHpPw801RXR/JP5bUM4oerHQXHnRMYUELar",
	"RdgmI2GA8QHGdynWEFDGo6CMlfncG24cULUkPaNk34olIxQVr1Yt6akoroxaUVxX5I6K4j/nY1m9XFQT",
	"z+8OOeGm/I0cVHSowYmCDWTK2EFYs1VkE9tBuqOYCmEmVg3zjJXEofJEvfKEmPLLKTwxQqnzA0pQ7FzK",
	"oPz5RCMuKAsBJdEvp3DCAHEG9AzKpL/WMulD9OMKK6dD+v5RoZkgiherIIz5ahHz1XpJsnirG4lJVu70",
	"Celd8UQrHlM0rLYDVGY4KtMyOacAZzpmtIg62m6PDNS0iSlgMoMjhPMOH8AvVwW/nFuYAGkBpGWCNg5A",
	"lSNVa2/xN/aAQbaczjHAkBbZO385d+NWt3AFExHyMLtzyTLihb/703PbeO/OsKq+PAdDXJs42LItpCnY",
	"QdhRLGQbJkfYphTbzFQdXCnT3R567IGJtHnHvdBIywOAkNQ/JZWKC0BISpmNS5k9dcSyD1rSJt3TBUba",
	"etuKj2T+YwMfEaZlniLfU0FF2j8JAJCXACCtY9q3ISjEpXNDMBWbeSk4rxz56NJCADmuA+Q4vfpcPrrR",
	"rgPHATJGGH9AMKaAYBxQjLgt6uytS9weaJ6t+IZxq5narmjvbxtP4kEkcd9bSWseRmuPeiT2ogHl5cxb",
	"Q/xdjfhkW3V1hyhIobaBsGqayJIdjAyZM6xyw8EyO2PE1zanUCa4rUxw+x7AqeOp/YoHtyr6tVSF6/04",
	"KCp8hUWFd8w4oByAcuxvJ6DY8LGLDQ/3C7/n8atzCqs/cMFOIZQBbi0DfB6vcI/iwOASAqfmajk14AyC",
	"M3hiZxAYKecsJjzctczqCo/NbckrDA+mt0zOt22nt0jvs1q3AzY9Naxevn8LtX3bavuex73do+Lvydxb",
	"IJNcqS9+iYV1gVRyypqzh0cWQC4BcskrIJccvUzrNFgmUMH0NCSTHdmx+SElFYZye3bsD1nDxM38qWh3",
	"JdmxHY+73jLm4YeIk5A+fDzkC/I3iADkRW/Iyhi/5B1J65c8v4l4uPDYi8ayejrNS/rSOMrmZUObHnHT",
	"+g4ShuR598hysup/foz861yXaxsgJ8i/7rAZeSCaW4pKvHrG/Osxc+pEs1QkkobCbBRNt3+5bCnMw6CW",
	"mRkY0jaRwCHtMrUe9E1V9R3y7oaaDvvEVB2Ltl//9tvX/93+hYnatbW7ogR4kN9XKL+All4pWgra/Cq1",
	"GfBwwMNhlQe70LQLwHg4ZEeryJbava0V7bWvlbY7NQU2f88skRONPiji//yPP/JO35ZMAun/SYzEPFkV",
	"/vTf6E8r9Cc2n335IiGp0lzg2V++pK/7Kn/f3K+/P/0risPAv0+v/MgJ26yzx6o3Ot7khLU3rYkvRfHz",
	"kv/7fEaDZRDeSf/LJJZhk3n6afxbMTEOl+IHLlEvpJtVFBOf8kiKH0gsLTmT4kCKxdnK2dfk3VkTv/pr",
	"9d8u/tr5jd+J3egRPvFz8kEu8bJv+hyEjxKJJP77mtOYsyN/1rc85sJkjfFpD8FnMYPFvs9nEklM9ODo",
	"H/ZbEMQSJZuIRyf8tN82vkQkHX1+eI4k4pPlc+RFybRt/MRBi4nPxBcncVTWGylwa4Nw5O/+yYu9e2FR",
	"pOTHQx4Fy82JJ/gfichGMV9HEvOY9BxspJg88mQcxO8/8bpq/uXI3/wjj6IkDFtyEvrxqT/0s5Bcvlz+",
	"RRJ/02CzZNIDeeLSfeBzyeFxzMPsJl9GvBgU0b/9Pn5200sHU+907RabRkEHK7ZuBWOLKFizTIUjmbgW",
	"wswwkcMIRcx1uMs0mylcn93MVqnMZL+RnlifTVz1UvQQhHHtVPuH4POi4fMsvNWaJPpcEAaTRumR8O33",
	"cg+o/W7srfjS83nrxQURP73wUnyqrcU9971Nx70oJmHI2SLwl88Fga7eJDuhr+3pOCTesrgVk7B7kjC+",
	"VSrHdBS8MR5Rb+PHEtnE0pJsGPFjb7OSPm0CtisHZWvmxbwUQULMo7gaJRBKg40f190fP/t9RDYxKn8f",
	"Jb9fsP64QW1NxwpSLaIirBOMiMNMZDLqOJqp24yoJeuvDTrYh/XXCj30sf7aHoC0lva0lha85Qxwy7A4",
	"9gqzWSCJ5fq3ZSF3BfbqpAPsAWzgTDtlpbZ05m5GX85Kx3bQyXNW2vyhMXJWYDMKNqNgMwo2o2AzCjaj",
	"XsFmVOtm0WXvRlXy/jaD0kTVO12/VTQMW1AtW1CQedqWeXqeHaiDMk8vIOG0VdLbT3dN5KWZcZrKlLjK",
	"QuLG+cXMdDSbVw1z817FQG/9StVMZck8zcup9eq6mRrNzkfTE//ab1YtcqPNlqVv3O9aShrNGotJ4y5Z",
	"8jCOFiSOCX2o3hXu18JjSa8+lOP1cXp5v5Due5x033Zl7T1UUihtR35cprz53VSBKzdzJe54vKbMHW2q",
	"St3Vi5pyzwv5nrcreE+DTMn7XpGfwtnVoKbs2+22FX67TafSbzdtKv52i6by11qUBmAuTEBtbD9C9va+",
	"W+qQtH1JSdtgDMEY7mcMrykH/+ip96BOoE57qhNUUhiZd75ZRrtOGM/atJ4pnt+CY8SHHyOejNkp8taL",
	"eSpKpqUXRs5NFz8Kh4EP3tMYebyA5HVVJK/RpQf4Y8Afm4IVA2rakc73FlO3x4neSfMxDvEWv3PeU7vx",
	"nSzfqkrl1O7sFXVImTDmpSFUcj9RidmXm8RgdLxWuVPwrSyXWHc1oVd4Z4JakYyOS1VDU3cwHEQ3ZVyt",
	"viwOVavwEuoC8PUmTlQ8CHkk8ViiwWoVMO92lgHbNieOIssO0hUTI8wdgmyXm4hQkyjM0KkigO0iCXUh",
	"EPTZnVz424w/8WWwTj4occKDOPET+Ip4y+T7PgrB9NLO4JtZtCT0cUGWHhFTnNxPL9EH4vt8WVzb3Nff",
	"jTTXMlWZyUknOcKayZFDLQ1ZqsIJxbZiUZo4xJysBNvDxFY/eaAxlImXvSRO2oU/Zo/8WUQrAvS+mT2R",
	"5YbnPjtnAt5OhNWttX4glaaUGaqCLepQnTtYVQzL5bbtMkeXiWZgrqiOKhuECpufvsBbkXteeUXI770o",
	"Dp+rFjj951erZ5SF/HfpD4kO5bsAaRhB6GMUk3suxiMVjkLaZGz+x3fWIGnT9MHS9ne+rKYRuYTykEub",
	"OJG3ey9+2DiLkAuBCMLnhRMSnz7M7mYrEsU8bG2TSln6W/devCS739BoU33DAw+Dx82CrNe1y0IVsCHr",
	"imZqyLR1E2GGCbJ1XUe2QWyNMtuhTO5QhceNw0OfxzxaML5eBs+JxNZ+IVOWN4nbyLxYeuJLKSJ8zW/b",
	"lSZYR/fc96pTlyyUIdvEz9VrhW7pN7P1xll6dFGbkYyZtJfW8ShGSSfRE18i0ckD9KoQGiGWufPyaCXK",
	"1EkOku90u2kwq0cmJkMrpe/Y2YPSluckHmoYjJiqgXTVlBF2LRc5hCuIEtUlhLhUYWalenwaUe9RLl4E",
	"+300nXT5zRTuxLycH7Lj/uPgkfsn5+LczLCqHvYpxfx+mFHi/zmWHC45S+I/zo7WZy8bi8OoQ6ULtc78",
	"oeNvuvz6y9vBBCHxo9MtQS+610oBSj9+i52TDvTW5XQlayGo3MyrTlR7gwaHSJUVG8kWUvE7Bd8p+p2q",
	"/o/4ldxx62+VugXJr/wxT1bqZl/Fcl27+OWjoCS5+z+UD+mXqfBwsvmcDvEmiC6v0H46iH1wWKYcXUhU",
	"piRdtyvK0ga4iEZNpels2IKvtapG/uuFEg1qnSnTPNWMeaobHd+V6sj2zS8fMwjPPc6Lyqn7cmG8l/RE",
	"++NvMwLT5XqOJwDjc1HG5/J5JpkFOc6ZDiC9lyW9A2gd6aIFvI5j8jr6Kwm2nq+dbkd0n6hd7P6f7aBB",
	"+9aWjeaOfG2/Pd3famyqV3dyy13a+vZodVdq4z/6wWd/1p+2ttWfcovgbxuPSDyKuESDMNysY0/iT9z3",
	"eDzgIO/qS/OtKp1SrHFMkU2ogrCqush2LBW5tmVxhVqKSu0RtqqgilFrFaPT7QPtUako1fprqVFU/xog",
	"rlwfcQXqEgGvRNrLBgDtY9oVifr8x+zY7BEIJPlJ2d0ckgvwWCs0EA0TA8uDgHndGAzM/21DVhL/XXy4",
	"E0hPwXKzjkkkrXno8pD7zIsKTojFHM3hxEXYMGSEDVNDxLJsZLia5uqaLbv8eJwQ/UWcEMYYlnUTYd0y",
	"EHYIR7ZjukizVFu1mGXKxDwAuy7G9cuQSOJ4RAtdHjyfPxInCL0gIivpUxJ8RF4sLZNr/BKoFq6uuK7j",
	"YER1YiHsuC5yuC0j4ugWYbpqmbL1UqrFz5vVp0ToY54sZFzyySqJztZBmIr6MUgXxvFIF37aXZR1F/lk",
	"hfLuHiLCchv94sWB7n4UDNvWpxnXQmmUttIoJ6Q3vD9DWAs0B6A5XMEGxAUWGgHMBugOl1LmY4+9KaA9",
	"AO0BjBDQHvbbvwT+A/AfoKzF6egP5U5cX2GLolVbaYu35c0rKW7R8Xh6kOeH5K+Ph/Q/ez5abu5f8nx1",
	"v7T/PWMU6cgt4AnKdFSkLt9UKWRt3FIdeU/OdjhvIgGDTqNdbu6HtKvKUGv7Sy8W8vpmDFgf18T6eI3y",
	"C8QWILaAJYeSLUcs2ZIJz/CiLZmDOULZlqxrIxRuOQbBQtFvNU2tECyqY/5mSaLYizgJ6UO9SMvCY8Jv",
	"l1WbOdzQEcUyRdjiFFnMUZFqY8wMw6KmayY+fS/1wvN7iBez1Go8fPpq9YzSRnmJj9kOQkb+3lY6RvO9",
	"S1J9bw+Lh4tBoemooHUYsBbaxOyfwYP/19LgJUMb8OqFJrFiZplYI4qjIkVhBGFL5sjCtoZMjA1Dti3T",
	"4e6sSb2Y/fo3+7/MH5J5bqNczH4VF6XqxYKls2B8zX3GffqcT6dNVUtRuI10U3YQVjWGLANTxJmOHVWx",
	"XYOJ6dyzcsbWiCGOqWWaVENcYRbCsmkhGxs6Irqpc4Ub2GLGTi5FTXa/FDQthTuUmci0mImwxnVkmzZH",
	"xHIxY9TimslLLkURig5nU+Sj18enyM0TFLWofUqqQdOvaFHagVPsT+xR1SIXz8kSPvIOtlI+smipRnyo",
	"TFjz1rYBa7aoWdlt3odY+7beWrGXzXsVA9y81b4c7W6VLj8t7VoWod2t2t/WQoD5WCHN1M26uDsROkkp",
	"LVA34wVEkmIY++AvIWAd4E1VxTqatChjR8u6UnZiYKlydv1aVUk72lSVtaNJh9IObp2pW3f7NiUe3Lr/",
	"7a1g4scaGNlQ7Hmu2q+7Mkd1CQKSylWQVMDAgYGrG7iLp8GUVuoo/BfQENCQhoZAhZEzUWyKGiNpdtr2",
	"1vW34no1RzTfH2rPEk3bV3esT5e4eZQ9ZHxr1mpvd6TkCc9HIkvv08Zj0pMXE5GWt72t/HEauXo9m8B/",
	"23jOJmJkJfFYiryVl3wULxJIX5hJ150817Vzu/ee7Kf8AxCPUfEBKP+A3Xuvxq1lN+uzDNo+HmvvNcsV",
	"hWy255oJOunW5rdvfnzz7s2em5vXUq1l63smtM2Vzv/rIu+kwnii3Qao2wL0FmlPa7DbQy9E9lUTQIbX",
	"6uv3o7/nMTjR4ERP2ImuzvkknWgoddha6vC0XvTwcofgQgP5/QLJ7+A8g/N8fOcZqNPnLHvY74qn7cch",
	"YWelD3t52Jfl/o/Ew94REdQY08QP4gce7snI3hExdP3CgdzsZE4SMW6hZyeOWFDnZ38OwiV7KUObdjG0",
	"7eEM7aIO2/hM7SOgArqtTDmggRp3bTXuTkx4fn+WeAaIz0B8nhjxGSrpAQEa2E+vmgD9/rybKkCEBiI0",
	"GDogQp+dCH3sioCgKqAq+zOioebgqQjRX1W26R5IGHcWIvyeFxXhpOIZKX2mm9HxQ97ym6zhgBKFax56",
	"wd7738fdOU63zAwkG2LfMv9T0Wp/qnL9T7Pyp4lkPLuTh2+PNSaif5ssr+oH22O7JHMipQuLdbQ5z39J",
	"xf16SwDu/+XAJrhqNsEecgC0A6AdHNeyAD/hLPyEVtdzs469Fd/D70wf2Ol0vhfNDvE4z+BhqursTpGr",
	"XqTWvICbF/TmBaN5wWxesJoX7MYFTa5dMFHiV9YvqM0LWvMCbl7QmxeM5oW0p8Pd5KrQgI98iI/c0KLJ",
	"OcjVGX5F3vGgzwbX+Lpd44FCAH4x+MVHtCngFJ/XKU5MceztPgWmaNd+Dkzl9pWcBDPOCSpi3J5Pc4RK",
	"ZU5KR6u4OLarlf/weMXcL99PG3/MwMm7LifvHBIEHiJ4iFOxZuBeHu04jdRV2ec8jfSJUQ7UyH7q9Cdq",
	"7Ju1pcq3sip3ZG39p3f/IP0aekE2TpmL+qvcXteg+My72Yozb7Oa7Zu9s5Z3JujUOpwn6BiypsmyzRDh",
	"uoUwJRw52OaIUpcblqo43LSqCTqFl7lPik7mC/fn6GRSCMcmXOixCYVNOE1IstfJCfkPTziFKO/iMZKI",
	"8sEX12nyXkqW4s52dtBksmLKAYADAV6UD1MM5AnZr4WE5fcLKctbdNFZoUZ9TdUhOeNKkjMuQOuuIF+g",
	"VJ0jJQpcwrRBNe/Ryeu5WBxUzzuLXPoLeldC5tNVI9m78oh9aytdlUd+TbcC/FiKguUmJhKP8/p8MV/d",
	"llHt2zd/P1lcG/EnGXGXKA4jFlJd00GYURs5DnaQyTWDK6aOLdceEv5att4If03FdEzLlJFrqQxhw9aQ",
	"QxwFGaaryJasMsVQRw1/oXJ1e+XqE0eXexavLszF1dTe2/oiKGB9jQWsW6YZQB0AdQZaBChiffwi1r3O",
	"o6Cfg+d4Zs+x9q2T9RyhXHNHueYTu477VGwGvxF4RhfKMwKPETzGU3iMwNI5b+XmXv8zL908Ct+nqN3c",
	"R/mZrtP7k3BT20g/yslIP8qQXU9Ds6fuu0Jl3vbKvKfm1Lw/k+sK3JrX65VfZM1Z4NhMuwzqflEKcG2A",
	"awNcm8HhG5BuoGDk8Tk3wkdHa3LPEX8SLvb+3Ju8RJOUvk1K3iaJt/WycfICkm/FU7+S+1MfEtoXVmp3",
	"snkrq7gIK0X/k3WYUx5FXkxiz9lEwr7yTxsSb0LJDxwvakAq+VikJ8/YmuyYRDcQ17CKsKOZyHYsC2Fu",
	"2Ex2TUPWzDIsjTZOMtCO2IJwyTLiN0kQFQ7ucxFxef4Tj2LvnsTp6TvpjcU6PSFJxDBEV3XV4BypjJoI",
	"y6aGHIMSZFDTMm3HNBXsJtFNX2Cr3cnWra6pjcAWu4wxYjFEXMdCWFcxsgzTQgbTGHeJQnXqloFtMWLV",
	"TqayONu/xOb2W3pj3+7HgAPUygHq1vVKfJxrtpSqtpTotvQmndLRaULbFu5aYJ/uLwPa0BXShvqmG8Ag",
	"AIP2tBBAIzo2jajHmegkFm07wRF4wRfnBVc7cF1eMPCZWvlMU3CD96A8gQ8MFKgLp0CB9wve76jeL1Ci",
	"zkmJ2ntPOX1Fx57yyelS3R7UGASqQzx64YdUDjq/GJddsS1iK6aDTEdPXHZNRjZWTEQMRrjm2A4mdNDG",
	"tarJV+myA42rjcY1BY99D6bXaTz2kzK+evShlQImbm0RveoKv33Setog+8GKsaie0l6xR/PMIE2FFHYR",
	"8coFksP6hK+P75AKYReboSGMnaeIZkJZdqYqmI0TSavCOa+I5+vmjh0Y3gGH7JI4ZNegpJdPMdsdFr+Q",
	"anYV0wxMtLMx0XYclpGeAS5VBKLj1IwapAbHZgw/NqOiaic4OaM2f1I+f0VuTRl5jX6IRkUE4RiNA0Ia",
	"OEgD0J2Xuv9wlAYAR9MBjuAwjYs8TKN0YPY4T2MsyEicqFH2cIRDNchyGXxeRJyE9GHB/XvP5wvPZ/z3",
	"HLHbccaGeqtZdlfC/XNts7x682bGfeIsS2DQDYKYh4si4V/5Tv0OK7Ob2T1ZxCGhj55/L/AnsVBkZrls",
	"LsuG8p2a+PLCgyygJnEQ4r8CPzEe7999UwEp6p3bnaZf/9DP3Im8mC/WofdE6PMicTSzruW3os06MU5t",
	"t4pLObqkU9UipmkhzeI2wjIhyNEtirgjy1ixDdkwqod8VMObPTL+K757b9J/RUXgsI/ap2Qdnv5pH9uB",
	"1AnjqH1O/qisn9OtT1DRr1Z4SojBHiUKqtaqea9q+Jr3Oo3zPDOb81n0EHxepAe+tl5cLEkULxh5Trqu",
	"yTfzzEKWjTNDnF2YHhgG54+8sDZCVZr79lhTqT48wbcm5R1tatLe0aZb6ueF1M7rkt91oyL980z+54UG",
	"1B7KtWBe6sErPxWlpoGAs11LrQawBodag2uC9452XguI08HiBKfInBFHPOQcmUpc3HuUzFhFK16+d6Na",
	"VvveTbpfce49mt/4OuQP3Gc89GLp08aLpMjzY2kVLHkUe4Tf7t630W41Wz7Vvo1LFcYolZGmKAbCuk2R",
	"pTOCVM01HGpiyhzlLPs2UKGirULFqLsih5aiuMYEPCg/8UrKT0DqHSCow4MQKDlxypNrdrqr3/MYfNUp",
	"+ar1j3wtvirUkWitIzGqs3pQwQjwVIFGeIk0QvBRwUc9jY8KJLyznpWz0+PNjssZuQLETkbfpXjaTUbf",
	"t+VN6X1RLmJazL5Kx3buFMu2+uq8bygJ0VYSYlz+3PuzOd/Ao3s9PDooJwF8OuDTnb+KBdSvAF4dWIUr",
	"5dUd/WwmkKtTEuygTscR+XUxJ6sdBTrSJm0lOd5ld6AYx+DtpWQwT1GFI5+kPN5Np2bcghuiD1BpY2ic",
	"N/JwATZ2TdjY6MIDqBugbhOwYYDnHamoRjJzw6tpJO7ECHU0kk6NUECjAKreGLqqq7Od+Jpxq2KjA197",
	"88TD5/jB8+8lz3dDEsXhhsabkEshX2YoVuaI/lC7XxZc5yviLRPnLPHrloQ+LsjSI+Lby0v0gfg+z5vt",
	"wMWqHc7hLMNQVMUwZKQqqoawjRVkE+oixVIJw66iMc0o4az7MNis9wGyhGfbh2AJiYPiFLVPSQVj+rUp",
	"4lT/jx5d7FGGQiw1k8XNUnVpRcwyZ28QYDYRCEqMNdRweBHmlEnEaU5nf/WlDjIJBSzmSrCY02vLxUMW",
	"mcgfBaIYYbghVf4cW/kH5MgLv7wvOb4I/k545tX+EZmiaX25RVnI9ZYziQbhOgi9SPq0IVzyA//2lKGX",
	"eatirRF6MerKssYNpFHKENYUjIiBDWQ7isNVouuWe/rQC/LL2/LLTxXZ7JVKnqrulWTm1D8GksevL3m8",
	"OcOADQA2sNsOQLr4sdPFezy373kMbtt+O+ZlzybltkGqdWuq9an8tuFZ1eC0AVfkcrgi4K6Bu3Zkdw2Y",
	"FufMnO5x/tLGI3A2smTpbtrGZL3NKm0jd0C2CRtvc9fkpI6nXRydPynHE7KM27KMT8aEeD++3wmMiMv3",
	"jy8wGxeYESdMWt3D2QeGBDAkro8hcexszmlQJSDp8YhMic9B+Ogug88LuoniYLVwPb5ki4gvuVD7Q0gU",
	"O17Zy6/4R/bsN+LR75In3+YPnnoDv9rbJPTQlJvZPfe9TbQoPkmEJA52TNcyZGQ4jouwixmyMTEQoapu",
	"GQ5l2NBnNzPPpx7jfryggc+8bLi+/vm/E7MhvomzRWrsFx4TAVIe8yiV0xJ3TdAesc6OV/WGQc2B6Jhb",
	"IFa0ESt2jFolhuqT//G5GDuNw5Xs+A/+TmBwXB+DY4/JB7QA0IIXWQ/gfRyb93GYs/k9j8HTvGxPE7gg",
	"rVyQCbmaw+kj4GdO188E0gl4mOBhXpGHCVSVc1JVDvNX0/fsdFlPzm7Z5V2MQHwZxXf+4e01u87AZmlj",
	"swwbvDEd6OE8mFEc6JNSZHZ9QSt5Zlt3xbt+eCtat+jvfHb3Qf44ER7NJUYDF0ix2SlZfXB2i4Tl7/3h",
	"bfFkm6TNC1l71Ryc48Q+QM+5JHrOBDTu4vk7e4d8L6T2TGHOgPtzJu5PTKLHlzB9pOQFg3g970j0eGp0",
	"pScRQrnT1VtDM4tEiHUQZTGfkjj20eNC7A2IF4nF9272C6WEJ52RWLAMQslPpFEQXWi8iW6Tl4Q8XbTy",
	"zN1o4/yT01gs2L60iSXCvLUXUU/iv1O+jjehdzvLfi/fSuA+SzMqkhtBEl8ErutRj4gKiH2JE8qdjm/1",
	"InHiZlaPgzXdNTHXXaRyThFmKkW2RQ2kEwVTRaeGZepFtoXDsam6joVMVeMIc9lFDtM44rrscu46LjFo",
	"S9grBOiQIFcMQV9IW2sJ9KJeepFQw5YA9Z2YnbORh1Lrcm0QTv2rgBh0xcSg5lQDSAMgzR6WAUg/JyP9",
	"9PidFYoPOJ0ncTrrH3W9TicwjXqZRif3Og/gEYHLCRyhC+UIgbMJzuZJnU3g/0yB/9O3ZVpn+xTe63js",
	"HrGij8DlOcxpVruc5pzXMgXnWLu1deUVOMfAJWrjEo3mGx9AETqebzwOIUj0t5X+k5uE+exOvplXjUL2",
	"rlybxQsJYwuScui8mK/SN0aRd+9ztoiDxSbi4cJjzWI869ALktkX15fBZ3Hx0fO3GmZiMLSYz01+OLa4",
	"mkQF6c8FUZz0poBUY2/Fl57Pi/Oiiyb1AlvzRHrms+0P2Kow9OXjl6kxoCYb2Vwy3ylVnD7cvlCgeapC",
	"87oSle8vFCn/kaYyFb/SolAd1UAKxcrvJ8qV3xQK1vFgrmiHHxafKV5+Vyhf0a1OBawd2d6hhPNUDedC",
	"ETt+vaNESqqWQBbbMwgGathFUsPAOF2kcboeXl37xsmxWHQg3pcp3kBBPA8FUWzjtALAP3pRLJXNmntl",
	"ye1/VO62be192vDwubK3lx7RPuvb0Ltpf3RN7vmH9PD2j23Pe37M73m44wWR9y++4/GPL9p523PLp2tH",
	"JNpQyqNoz02QrQlrbn6cBBT8826TP+Lh/H++EshxxCEDOPMa4cxRBQigUoBKJ2LLAIYdAsMGUYvD941A",
	"BSOJSD7/XCIpbhispHUYPHmMM0kAik1fMH0ydzNOjJn6/HMBmLZjpcpxD/xYrYjPUvdVBEco5lG84+AP",
	"9U5WbhVF7jtmjvvEWZYgN/efvDDwV0n4lVU8uJnlpoUsvfi5vCzqQZd/lmHb85qXlzPX913a3ZCvOYkX",
	"/ImHzwu2Sacv70t2M7nwYfZ2djP7aXYzeze7mf1jdjP7bXYz+252M3uf+I8RD588WvmVKHljrXfRcnMv",
	"DvAQvxuH3v09DyuocXvVtB9/bC0KsSD00Q8+Lzm7z8Y67XFLS8bjNM+tt1VlnItibS3NaiPf11DMRV+D",
	"4lIYCJe7s2e1aex746MnBFIUy2i5vfJi757sHIiQR8HyaVerbL77upNLQG+bmIQ7e1SA0N2vyaOdznc8",
	"eZHneDsmjSwXnk9o7D2Jdo2XJcMrAic/CFdkOatqWNpF3lS84le9/FYu9kWEmbYsFUL8QvGCHM7fxXDY",
	"MiyfiZcNaU5cILLuqqqrIdNUDYSpbiCHMhdRQ1Vtw3EcrlBhD5bCBEQP3lqoZRGWhhs/Kg2iKLzSoDdU",
	"b37Z4kAcRH8YwnyQMpN7YtLDD/4TWXpMioNH7k+L6FCu0Z/L1fYkcf6vv7zdl+EQTZ7TMPwooGQN24NR",
	"kHkJzcuJcjavta7DHY3EjQ/z2dv57OPNPPcYaoyEGhGjttRmY1CxQ+JXcpMjfie3RenPlIYy1bP0V+t2",
	"MW2Z6VOjQW4c0zaZyW+0qVrKpF3yJbUG9ZIyX//4o+hor6WvFp/pWC53NKkwQrobVTyHXa/LVsQdzWoL",
	"/s5XinV4R6ua17KjrXBcdv1qwa3548uObxDeTU/D0gPoaVRx4XpaNVzCnpZVV6inWcUV6m5VcxpEsy9C",
	"J2tuey76qSZ/FNWQSv94++6W6972gsLj3r5ZRAKNWxMjGkVTohYF0cVyiw4/A0gsaIejh/kC13FbLHQd",
	"99oXvP7GWYMPyX9FIZOP4m6+ADZRyS1At74QlmNaXQzzHhQLYt6HYlEsurC1MBY9aiyOxRP5ArndsFgk",
	"i7b5QrndtrZYzivLZX/tl2TRzD+mf+FsqRbTtYAOa9pAmfsbVxfUga/PF9ZhzesL7NCfSBfaYa3rC+6w",
	"Z9KFd2BvKrh/si7NhyzC/Y0rC3F/w+pi3N+yuSD3t64tyv1Nqwtzb8v64jzPl+f59gJdUbvc8nzMyiRV",
	"FurOVtsLds8Ly4W7s1G5gLc1uTBi4i9vT4ZnARfx6riI4MyAMwPODDgz4My8ImfmaojM0ZGpy7AawmoI",
	"qyGshrAavqbVcEDeQxpUQ+LDkRMfXlJ2eUjF5VMXvst5aSl5ZQcZTb61bX0KZLQ3MQ99spTebvzowfO5",
	"FLhS/MClt+sgXvIokn7yfHYOthpPO4airGMocFH8wFGUdQyt0o4BnQ3obEBna6ezDSCvqbeyYfSQ1zRu",
	"uTahLlIMmSFMOUGWzh1kcpvZXOHctuwLJa9BDfW+Guqn4rEdVDr96kpYQsH011AwHcpXQk7WwM1LKJM+",
	"Qpn03RXSxwoSy+SloXEOBJQQUEJACQHl1APKuiF6VQElnI/Qez7CWBVQIJyE6iHXVj0EAkkIJE8QSELt",
	"jUkcgTDk9INxTz4Y49CD64+F3xfnMIwe7ZZHQEA8C/EsxLMHx7PKram/0ngWjjTpO9LkZIU+3p8nnL3K",
	"gh9D6mkcXBQEyn9A+Q8o/wHlPy6w/AccMfQqyoDsk15ztLwiyByCzCHIHILMISgK8spOK4ODyqA4CLg4",
	"4OKAiwMuDrg4UCpkuqVCTnXcISySsEjCIgmLJCySUEEETk49RwGRr+gmioPVwvX4ki0ivuRC4wceq7ro",
	"errvtNVvxDPfJY+8rT4BJ7DufwJr+/if8mDWnilv0jvaJ/pMZ7gWLmyXxMMhr4ejoucfU8jjuO48jilI",
	"GGSSQCbJpVhDyGU5Vy7LHmfTdvhS+x9Z2+ZpjXiMbcd3jHG6bfWHPTa709Sb2T33vU1U9k7wzh3smK5l",
	"yMhwHBdhFzNkY2IgQlXdMhzKsKG3cu8LWn76XZwtUrOcp5DkxHbFnm1xzTud5QMo6B2u/hBmepecwXGU",
	"W8dRdonyiNHNISdX7lx7Js9071KVVgJ8Q+0z/ngHBzujB7eo73x290GeLtf0q84hgbPojkBC7ZS4Pkyq",
	"KXklLNMDWVR2wdukcF7IIZyVNFQDgC91ZXypSWrjFSL43Sp1VGR/mtMJ1erPBzZVwrEvX21n7O4Gm6S0",
	"bR+09C5rAVDS/lBSMrqnBI6K6WsGUumknREWqkhmYiDrsgmw0EEBzETGFGChq4WFJiNhAAsBLHQp1hBg",
	"oaPAQlVo4YT4kHCZ9keDEodqTPQn6eUYWE9PFTPlTldvTQsXhYdy3vTsTk08zuixUs9LLIR3s//ky2WQ",
	"ju5vQnWTx0Ke2vG8yFK0cf7JadzRXLw4n2TuswVfES9xUeMg8XBjHsV/zb4rsQuzXfWTtj6jjmFpumti",
	"rrtI5ZwizFSKbIsaSCcKpopODcvUZzkeJesK0TUuI8PmBsIm5sjizEIy0zgmCuGO5rQgVqmXfgA+JcZi",
	"UJ0kIdWAPW1hT2JgThkgHYos9S5f00eWRDdbcaRmAaLSTmTvyvVbvJAwtiAp6urFfJW+MYq8e5+zRRws",
	"NhEPUzSqVvZoHXpBUU1nGXwWF4uiPtUSTkW1mqFVnCp1f5J4Lf25IIqT3pRcbm/Fl57Pa3WXRJNoSejj",
	"gj4Q3+dLgYb9MZ9tf8BWuakvH79METTrFVMAzY4DmqWD2beL25ayVFGs8v2FcuU/0lSw4ldalKwjiapQ",
	"tvx+onD5zVqqTzOhrJKLclhOWSM7SChk0a1OpWxme7Up5jxVzblQzo5f70iWS1UVcMWhRgJwxWvDFcFg",
	"XaTBui7odYfVOS70ChJ/mRIP6PRo6PSXtDZ8vsWXhM13HbqctP//AQAA//8MhccTQ3IKAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

